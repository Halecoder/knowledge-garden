/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian3 = require("obsidian");

// src/settings/FieldSettingsModal.ts
var import_obsidian2 = require("obsidian");

// src/Field.ts
var Field = class {
  constructor(name = "", values = {}, id = "", isMulti = false, isCycle = false, valuesListNotePath = "") {
    this.name = name;
    this.values = values;
    this.id = id;
    this.isCycle = isCycle;
    this.isMulti = isMulti;
    this.valuesListNotePath = valuesListNotePath;
    this.insertNewValue.bind(this);
  }
  insertNewValue(value) {
    return __async(this, null, function* () {
      let newKey = 1;
      Object.keys(this.values).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKey) {
          newKey = parseInt(key) + 1;
        }
        ;
      });
      this.values[newKey.toString()] = value;
      return newKey.toString();
    });
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.isCycle = source.isCycle;
    target.isMulti = source.isMulti;
    target.valuesListNotePath = source.valuesListNotePath;
    Object.keys(source.values).forEach((k) => {
      target.values[k] = source.values[k];
    });
    Object.keys(target.values).forEach((k) => {
      if (!Object.keys(source.values).includes(k)) {
        delete target.values[k];
      }
      ;
    });
  }
};
var Field_default = Field;

// src/settings/FieldSetting.ts
var import_obsidian = require("obsidian");
var FieldSetting = class extends import_obsidian.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.property = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
  }
  setTextContentWithname() {
    this.infoEl.textContent = `${this.property.name}: [${Object.keys(this.property.values).map((k) => this.property.values[k]).join(", ")}]`;
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.property);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.property.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(notePath, app2) {
    return __async(this, null, function* () {
      let values = [];
      const file = app2.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian.TFile && file.extension == "md") {
        const result = yield app2.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian2.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, property) {
    super(app2);
    this.valuesPromptComponents = [];
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialProperty = new Field_default();
    this.parentSettingContainer = parentSettingContainer;
    if (property) {
      this.new = false;
      this.property = property;
      this.initialProperty.name = property.name;
      this.initialProperty.id = property.id;
      Object.keys(property.values).forEach((k) => {
        this.initialProperty.values[k] = property.values[k];
      });
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.property = new Field_default();
      this.property.id = newId.toString();
      this.initialProperty.id = newId.toString();
    }
    ;
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.property.name == "") {
        this.titleEl.setText(`Add a property and set predefined`);
      } else {
        this.titleEl.setText(`Manage settings values for ${this.property.name}`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.property, this.initialProperty);
    if (!this.new && this.parentSetting) {
      this.parentSetting.infoEl.textContent = `${this.property.name}: [${Object.keys(this.property.values).map((k) => this.property.values[k]).join(", ")}]`;
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.property, this.app, this.plugin);
    }
    ;
  }
  setValueListText(header) {
    header.setText(`Preset values: ${Object.values(this.property.values).join(", ")}`);
  }
  createnameInputContainer(parentNode) {
    const propertyNameContainerLabel = parentNode.createDiv();
    propertyNameContainerLabel.setText(`Property Name:`);
    const input = new import_obsidian2.TextComponent(parentNode);
    const name = this.property.name;
    input.setValue(name);
    input.setPlaceholder("Name of the property");
    input.onChange((value) => {
      this.property.name = value;
      this.titleEl.setText(`Manage predefined values for ${this.property.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    return input;
  }
  createTogglerContainer(parentNode, label) {
    parentNode.addClass("metadata-menu-toggle");
    const propertyContainerLabel = parentNode.createDiv({ cls: "frontmatter-checkbox-toggler" });
    propertyContainerLabel.setText(label);
    const toggler = new import_obsidian2.ToggleComponent(parentNode);
    return toggler;
  }
  createListNoteContainer(parentNode) {
    const listNoteContainerLabel = parentNode.createDiv({ cls: "metadata-menu-input" });
    listNoteContainerLabel.setText(`Path of the note containing the values:`);
    const input = new import_obsidian2.TextComponent(listNoteContainerLabel);
    const listNotePath = this.property.valuesListNotePath;
    input.setValue(listNotePath);
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.property.valuesListNotePath = value);
    return input;
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.property.values) {
      if (key !== _key) {
        newValues[_key] = this.property.values[_key];
      }
      ;
    }
    ;
    this.property.values = newValues;
  }
  createValueContainer(parentNode, header, key) {
    const values = this.property.values;
    const presetValue = values[key];
    const valueContainer = parentNode.createDiv({
      cls: "metadata-menu-prompt-container"
    });
    const input = new import_obsidian2.TextComponent(valueContainer);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.property.values[key] = value;
      this.setValueListText(header);
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian2.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      this.setValueListText(header);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.property.values)[0]) {
      const valueUpgradeButton = new import_obsidian2.ButtonComponent(valueContainer);
      valueUpgradeButton.setButtonText("\u25B2");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = values[key];
        const upperComponent = this.valuesPromptComponents[this.valuesPromptComponents.indexOf(input) - 1];
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(values).filter((k) => values[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            values[upperKey] = thisValue;
            input.setValue(upperValue);
            values[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({
        cls: "metadata-menu-prompt-div"
      });
      const mainDiv = div.createDiv({
        cls: "metadata-menu-prompt-form"
      });
      const nameContainer = mainDiv.createDiv();
      this.namePromptComponent = this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const multiContainer = mainDiv.createDiv({ cls: "metadata-menu-toggle" });
      this.isMultiTogglerComponent = this.createTogglerContainer(multiContainer, "Is Multi: ");
      this.isMultiTogglerComponent.setValue(this.property.isMulti);
      this.isMultiTogglerComponent.setTooltip("Can this property have multiple values?");
      this.isMultiTogglerComponent.onChange((value) => {
        this.property.isMulti = value;
        if (this.property.isCycle && this.property.isMulti) {
          this.property.isCycle = false;
          this.isCycleTogglerComponent.setValue(false);
        }
        ;
      });
      const cycleContainer = mainDiv.createDiv();
      this.isCycleTogglerComponent = this.createTogglerContainer(cycleContainer, "Is Cycle: ");
      this.isCycleTogglerComponent.setValue(this.property.isCycle);
      this.isCycleTogglerComponent.setTooltip("Is this property's values set in cycle mode?");
      this.isCycleTogglerComponent.onChange((value) => {
        this.property.isCycle = value;
        if (this.property.isCycle && this.property.isMulti) {
          this.property.isMulti = false;
          this.isMultiTogglerComponent.setValue(false);
        }
        ;
      });
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const listNotePathContainer = mainDiv.createDiv();
      this.createListNoteContainer(listNotePathContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const valuesList = mainDiv.createDiv();
      const valuesListHeader = valuesList.createDiv();
      valuesListHeader.createEl("h2");
      valuesListHeader.setText(`Preset values: ${Object.values(this.property.values).join(", ")}`);
      const valuesListBody = valuesList.createDiv();
      Object.keys(this.property.values).forEach((key) => {
        this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
      });
      const valuesListFooter = valuesList.createDiv();
      const addValue = valuesListFooter.createEl("button");
      addValue.type = "button";
      addValue.textContent = "Add";
      addValue.onClickEvent((evt) => __async(this, null, function* () {
        evt.preventDefault;
        const newKey = yield this.property.insertNewValue("");
        this.createValueContainer(valuesListBody, valuesListHeader, newKey);
      }));
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian2.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
    });
  }
  createSaveButton(b) {
    b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
      let error = false;
      if (/^[#>-]/.test(this.property.name)) {
        FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name cannot start with #, >, -");
        error = true;
      }
      ;
      if (this.property.name == "") {
        FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name can not be Empty");
        error = true;
      }
      ;
      this.valuesPromptComponents.forEach((input) => {
        var _a, _b, _c;
        if (/^[#>-]/.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
          error = true;
        }
        ;
        if (/[,]/gu.test(input.inputEl.value) && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
          error = true;
        }
        ;
        if (input.inputEl.value == "" && ((_c = input.inputEl.parentElement) == null ? void 0 : _c.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
          error = true;
        }
        ;
      });
      if (error) {
        new import_obsidian2.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.saved = true;
      const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.property.id)[0];
      if (currentExistingProperty) {
        Field_default.copyProperty(currentExistingProperty, this.property);
      } else {
        this.plugin.initialProperties.push(this.property);
      }
      ;
      this.initialProperty = this.property;
      this.plugin.saveSettings();
      this.close();
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialProperty.name != "") {
        Object.assign(this.property, this.initialProperty);
      }
      ;
      this.close();
    });
    return b;
  }
  static setValidationError(textInput, insertAfter, message) {
    var _a;
    textInput.inputEl.addClass("is-invalid");
    if (message && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
      if (!mDiv) {
        mDiv = createDiv({ cls: "invalid-feedback" });
      }
      mDiv.innerText = message;
      mDiv.insertAfter(insertAfter);
    }
  }
  static removeValidationError(textInput) {
    var _a;
    if (textInput.inputEl.hasClass("is-invalid") && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      textInput.inputEl.removeClass("is-invalid");
      textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
    }
    ;
  }
};

// src/settings/MetadataMenuSettingTab.ts
var SettingsMigrationConfirmModal = class extends import_obsidian3.Modal {
  constructor(plugin, tab) {
    super(plugin.app);
    this.plugin = plugin;
    this.tab = tab;
  }
  onOpen() {
    this.titleEl.setText("Confirm");
    const body = this.contentEl.createDiv({
      cls: "modal-text-danger"
    });
    body.setText("This will erase current settings. Are you sure?");
    const confirmButton = new import_obsidian3.ButtonComponent(this.contentEl);
    confirmButton.setIcon("check");
    confirmButton.onClick(() => {
      if (this.app.plugins.plugins.hasOwnProperty("supercharged-links-obsidian")) {
        let settings = this.app.plugins.plugins["supercharged-links-obsidian"].settings;
        let _settings = this.plugin.settings;
        _settings.classFilesPath = settings.classFilesPath;
        _settings.displayFieldsInContextMenu = settings.displayFieldsInContextMenu;
        _settings.getFromInlineField = settings.getFromInlineField;
        _settings.globallyIgnoredFields = settings.globallyIgnoredFields;
        this.plugin.initialProperties = [];
        settings.presetFields.forEach((prop) => {
          const property = new Field_default();
          Object.assign(property, prop);
          this.plugin.initialProperties.push(property);
        });
        this.plugin.saveSettings();
        this.close();
      }
      ;
    });
  }
  onClose() {
    this.tab.display();
  }
};
var MetadataMenuSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h4", { text: "Settings" });
    new import_obsidian3.Setting(containerEl).setName("Search for attribute in Inline fields like <field::>").setDesc("Sets the `data-link-<field>`-attribute to the value of inline fields").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.getFromInlineField);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.getFromInlineField = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, "").split(",");
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    new import_obsidian3.Setting(containerEl).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addText((text) => {
      text.setPlaceholder("Path/").setValue(this.plugin.settings.classFilesPath).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.classFilesPath = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Add New Property Manager").setDesc("Add a new Frontmatter property for which you want preset values.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.app, this.plugin, containerEl);
        modal.open();
      }));
    });
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(containerEl, property, this.app, this.plugin);
    });
    containerEl.createEl("h4", { text: "Migrate" });
    new import_obsidian3.Setting(containerEl).setName("Copy settings from supercharged links plugin").setDesc("Copy settings from supercharged links plugin").addButton((button) => {
      return button.setTooltip("Get settings from supercharged links").setButtonText("Copy").onClick(() => __async(this, null, function* () {
        let modal = new SettingsMigrationConfirmModal(this.plugin, this);
        modal.open();
      }));
    });
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: "",
  getFromInlineField: true,
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass"
};

// src/utils/parser.ts
var fieldComponents = ["startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => new RegExp(`(?<startStyle>[_*~\`]*)(?<attribute>${attribute})(?<endStyle>[_*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)(?<values>.*)`, "u");

// src/commands/getValues.ts
function getValues(app2, file, attribute) {
  return __async(this, null, function* () {
    var _a;
    const content = yield (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start, end } } = frontmatter || null;
    const result = [];
    content.map((line, i) => {
      if (frontmatter && i >= start.line && i <= end.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const regex = inlineFieldRegex(attribute);
        const r = line.match(regex);
        if (r == null ? void 0 : r.groups)
          result.push(r.groups.values);
      }
    });
    return result;
  });
}

// src/commands/replaceValues.ts
function replaceValues(app2, file, attribute, input) {
  return __async(this, null, function* () {
    var _a;
    const content = yield (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const start = frontmatter ? frontmatter.position.start : null;
    const end = frontmatter ? frontmatter.position.end : null;
    const newContent = content.map((line, i) => {
      if (frontmatter && i >= start.line && i <= end.line) {
        const regex = new RegExp(`${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const regex = inlineFieldRegex(attribute);
        const r = line.match(regex);
        if ((r == null ? void 0 : r.groups) && Object.keys(r.groups).every((i2) => fieldComponents.includes(i2))) {
          const { startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = r.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          return `${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}`;
        } else {
          return line;
        }
      }
    });
    app2.vault.modify(file, newContent.join("\n"));
  });
}

// src/commands/fieldWithMenu.ts
var import_obsidian4 = require("obsidian");
function fieldWithMenu(plugin, dv, p, fieldName, attrs) {
  const fieldContainer = dv.el("div", "");
  fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
  const field = dv.el("span", p[fieldName], attrs);
  const spacer = document.createElement("div");
  spacer.setAttr("class", "metadata-menu-dv-field-spacer");
  const inputContainer = document.createElement("div");
  const input = document.createElement("input");
  input.setAttr("class", "metadata-menu-dv-input");
  inputContainer.appendChild(input);
  input.value = p[fieldName];
  inputContainer.appendChild(input);
  const validateIcon = document.createElement("a");
  validateIcon.textContent = "\u2705";
  validateIcon.setAttr("class", "metadata-menu-dv-field-button");
  validateIcon.onclick = (e) => {
    const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    if (file instanceof import_obsidian4.TFile && file.extension == "md") {
      replaceValues(plugin.app, file, fieldName, input.value);
    }
    fieldContainer.removeChild(inputContainer);
  };
  inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
  const cancelIcon = document.createElement("a");
  cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
  cancelIcon.textContent = "\u274C";
  cancelIcon.onclick = (e) => {
    fieldContainer.removeChild(inputContainer);
    fieldContainer.appendChild(button);
    fieldContainer.appendChild(field);
    fieldContainer.appendChild(spacer);
  };
  inputContainer.appendChild(cancelIcon);
  input.focus();
  const button = document.createElement("button");
  button.setText("\u{1F58D}");
  button.setAttr("class", "metadata-menu-dv-field-button");
  button.hide();
  spacer.show();
  fieldContainer.onmouseover = () => {
    button.show();
    spacer.hide();
  };
  fieldContainer.onmouseout = () => {
    button.hide();
    spacer.show();
  };
  input.onkeydown = (e) => {
    if (e.key === "Enter") {
      const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
      if (file instanceof import_obsidian4.TFile && file.extension == "md") {
        replaceValues(plugin.app, file, fieldName, input.value);
      }
      fieldContainer.removeChild(inputContainer);
    }
    if (e.key === "Escape") {
      fieldContainer.removeChild(inputContainer);
      fieldContainer.append(button);
      fieldContainer.append(field);
    }
  };
  fieldContainer.appendChild(button);
  fieldContainer.appendChild(field);
  fieldContainer.appendChild(spacer);
  button.onclick = (e) => {
    fieldContainer.removeChild(field);
    fieldContainer.removeChild(button);
    fieldContainer.removeChild(spacer);
    fieldContainer.appendChild(inputContainer);
    input.focus();
  };
  return fieldContainer;
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      fieldWithMenu: this.fieldWithMenu()
    };
  }
  getValues() {
    return (app2, file, attribute) => __async(this, null, function* () {
      return getValues(app2, file, attribute);
    });
  }
  replaceValues() {
    return (app2, file, attribute, input) => __async(this, null, function* () {
      return replaceValues(app2, file, attribute, input);
    });
  }
  fieldWithMenu() {
    return (dv, p, fieldName, attrs) => fieldWithMenu(this.plugin, dv, p, fieldName, attrs);
  }
};

// src/options/linkContextMenu.ts
var import_obsidian15 = require("obsidian");

// src/optionModals/valueMultiSelectModal.ts
var import_obsidian5 = require("obsidian");
var valueMultiSelectModal = class extends import_obsidian5.Modal {
  constructor(app2, file, name, initialValues, settings, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.settings = settings;
    if (initialValues) {
      if (initialValues.toString().startsWith("[[")) {
        this.values = initialValues.split(",").map((item) => item.trim());
      } else {
        this.values = initialValues.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
      }
      ;
    } else {
      this.values = [];
    }
    ;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const valueGrid = this.contentEl.createDiv({
        cls: "metadata-menu-value-grid"
      });
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      yield this.populateValuesGrid(valueGrid, listNoteValues);
    });
  }
  populateValuesGrid(valueGrid, listNoteValues) {
    return __async(this, null, function* () {
      if (listNoteValues.length === 0) {
        Object.keys(this.settings.values).forEach((key) => {
          const presetValue = this.settings.values[key];
          this.buildValueToggler(valueGrid, presetValue);
        });
      }
      ;
      listNoteValues.forEach((value) => {
        this.buildValueToggler(valueGrid, value);
      });
      const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const saveButton = new import_obsidian5.ButtonComponent(footer);
      saveButton.setIcon("checkmark");
      saveButton.onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          replaceValues(this.app, this.file, this.name, this.values.join(","));
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
      const cancelButton = new import_obsidian5.ExtraButtonComponent(footer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => this.close());
    });
  }
  buildValueToggler(valueGrid, presetValue) {
    const valueSelectorContainer = valueGrid.createDiv({
      cls: "metadata-menu-value-selector-container"
    });
    const valueTogglerContainer = valueSelectorContainer.createDiv({
      cls: "metadata-menu-value-selector-toggler"
    });
    const valueToggler = new import_obsidian5.ToggleComponent(valueTogglerContainer);
    this.values.forEach((value) => {
      if (value == presetValue) {
        valueToggler.setValue(true);
      }
      ;
    });
    valueToggler.onChange((value) => {
      if (value && !this.values.includes(presetValue)) {
        this.values.push(presetValue);
      }
      ;
      if (!value) {
        this.values.remove(presetValue);
      }
      ;
    });
    const valueLabel = valueSelectorContainer.createDiv({ cls: "metadata-menu-value-selector-label" });
    valueLabel.setText(presetValue);
  }
};

// src/optionModals/valueTextInputModal.ts
var import_obsidian6 = require("obsidian");
var valueTextInputModal = class extends import_obsidian6.Modal {
  constructor(app2, file, name, value, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.parseDate = false;
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildInputEl(inputDiv);
  }
  buildDateParseToggler(container) {
    if (app.plugins.plugins.hasOwnProperty("nldates-obsidian")) {
      const nldates = app.plugins.plugins["nldates-obsidian"];
      const dateParserLabel = container.createDiv({
        cls: "metadata-menu-date-parser-label"
      });
      dateParserLabel.setText("\u{1F4C6}");
      const dateParserToggler = new import_obsidian6.ToggleComponent(container);
      dateParserToggler.onChange((value) => {
        this.parseDate = value;
      });
      dateParserLabel.onclick = () => dateParserToggler.setValue(!this.parseDate);
    }
    ;
  }
  buildInputEl(inputDiv) {
    this.buildDateParseToggler(inputDiv);
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const inputEl = new import_obsidian6.TextComponent(form);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (app.plugins.plugins.hasOwnProperty("nldates-obsidian") && this.parseDate) {
        const nldates = app.plugins.plugins["nldates-obsidian"];
        const format = nldates.settings.format;
        let textStart = "";
        let textEnd = "";
        let date = "";
        const selectionStart = inputEl.inputEl.selectionStart;
        const selectionEnd = inputEl.inputEl.selectionEnd;
        if (selectionEnd == selectionStart) {
          date = nldates.parseDate(inputEl.getValue()).moment.format(format);
        } else {
          textStart = inputEl.getValue().slice(0, selectionStart);
          date = nldates.parseDate(inputEl.getValue().slice(selectionStart, selectionEnd)).moment.format(format);
          textEnd = inputEl.getValue().slice(selectionEnd);
        }
        ;
        inputValue = textStart + "[[" + date + "]]" + textEnd;
      }
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.name, inputValue);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    });
  }
};

// src/optionModals/valueToggleModal.ts
var import_obsidian7 = require("obsidian");
var valueToggleModal = class extends import_obsidian7.Modal {
  constructor(app2, file, name, value) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({
      cls: "metadata-menu-toggler"
    });
    this.buildInputEl(inputDiv);
  }
  buildInputEl(inputDiv) {
    const inputEl = new import_obsidian7.ToggleComponent(inputDiv);
    inputEl.setValue(this.value);
    inputEl.onChange((v) => {
      replaceValues(this.app, this.file, this.name, v ? "true" : "false");
    });
  }
};

// src/optionModals/valueSelectModal.ts
var import_obsidian8 = require("obsidian");
var valueToggleModal2 = class extends import_obsidian8.Modal {
  constructor(app2, file, name, value, settings, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.settings = settings;
    this.newValue = null;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      yield this.buildInputEl(inputDiv);
    });
  }
  buildInputEl(inputDiv) {
    return __async(this, null, function* () {
      const selectEl = new import_obsidian8.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      const values = this.settings.values;
      selectEl.addOption("", "--Empty--");
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      listNoteValues.forEach((value) => selectEl.addOption(value, value));
      if (listNoteValues.includes(this.value)) {
        selectEl.setValue(this.value);
      }
      ;
      if (listNoteValues.length === 0) {
        Object.keys(values).forEach((key) => {
          selectEl.addOption(values[key], values[key]);
        });
        if (Object.values(values).includes(this.value)) {
          selectEl.setValue(this.value);
        }
        ;
      }
      selectEl.onChange((value) => this.newValue = value != "--Empty--" ? value : "");
      const submitButton = new import_obsidian8.ButtonComponent(inputDiv);
      submitButton.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          if (this.newValue || this.newValue == "") {
            replaceValues(this.app, this.file, this.name, this.newValue);
          }
          ;
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var import_obsidian11 = require("obsidian");

// src/optionModals/fieldSelectModal.ts
var import_obsidian10 = require("obsidian");

// src/optionModals/addNewFieldModal.ts
var import_obsidian9 = require("obsidian");
var addNewFieldModal = class extends import_obsidian9.Modal {
  constructor(plugin, lineNumber, file, inFrontmatter, top) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontmatter;
    this.file = file;
    this.top = top;
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const addNewFieldContainer = this.contentEl.createDiv();
    const nameInputContainer = addNewFieldContainer.createDiv();
    nameInputContainer.setText("Field Name: ");
    const nameInputEl = new import_obsidian9.TextComponent(nameInputContainer);
    nameInputEl.setPlaceholder("Field name");
    const valueInputContainer = addNewFieldContainer.createDiv();
    valueInputContainer.setText("Field value: ");
    const valueInputEl = new import_obsidian9.TextComponent(valueInputContainer);
    valueInputEl.setPlaceholder("Field value");
    const footerButtons = this.contentEl.createDiv({
      cls: "metadata-menu-textarea-buttons"
    });
    const saveButton = new import_obsidian9.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const result = yield this.app.vault.read(this.file);
      let newContent = [];
      if (this.top) {
        newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
      } else {
        result.split("\n").forEach((line, _lineNumber) => {
          newContent.push(line);
          if (_lineNumber == this.lineNumber) {
            newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
          }
        });
      }
      this.app.vault.modify(this.file, newContent.join("\n"));
      this.close();
    }));
    const cancelButton = new import_obsidian9.ExtraButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/optionModals/fieldSelectModal.ts
var fieldSelectModal = class extends import_obsidian10.Modal {
  constructor(plugin, file, lineNumber, line, inFrontmatter, top) {
    super(plugin.app);
    this.line = line;
    this.lineNumber = lineNumber;
    this.plugin = plugin;
    this.file = file;
    this.inFrontmatter = inFrontmatter;
    this.top = top;
  }
  onOpen() {
    this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
    const container = this.contentEl.createDiv({ cls: "metadata-menu-field-select" });
    const settingsDropdownContainer = container.createDiv();
    const settingsSelector = new import_obsidian10.DropdownComponent(settingsDropdownContainer);
    settingsSelector.addOption("---", "Choose Field");
    settingsSelector.addOption("++New", "New");
    this.plugin.settings.presetFields.forEach((setting) => {
      settingsSelector.addOption(setting.name, setting.name);
    });
    settingsSelector.onChange((value) => {
      if (value == "++New") {
        const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
        newFieldModal.open();
        this.close();
      } else {
        const field = this.plugin.settings.presetFields.filter((_field) => _field.name == value)[0];
        if (field.valuesListNotePath || field.values && Object.keys(field.values).length > 0) {
          if (field.isMulti) {
            const fieldModal = new valueMultiSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
            fieldModal.titleEl.setText(`Select values for ${value}`);
            fieldModal.open();
          } else {
            const fieldModal = new valueToggleModal2(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
            fieldModal.titleEl.setText(`Select value for ${value}`);
            fieldModal.open();
          }
          ;
        } else {
          const fieldModal = new valueTextInputModal(this.app, this.file, value, "", this.lineNumber, this.inFrontmatter, this.top);
          fieldModal.titleEl.setText(`Enter value for ${value}`);
          fieldModal.open();
        }
        ;
        this.close();
      }
      ;
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var chooseSectionModal = class extends import_obsidian11.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText("Add a field in this note after:");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      const selectEl = new import_obsidian11.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      selectEl.addOption("", "Select line");
      selectEl.addOption("top_0", "top");
      const result = yield this.app.vault.read(this.file);
      let foreHeadText = false;
      let frontmatterStart = false;
      let frontmatterEnd = false;
      let inFrontmatter = false;
      result.split("\n").forEach((line, lineNumber) => {
        if (line != "---" && !foreHeadText && !frontmatterStart) {
          foreHeadText = true;
        }
        ;
        if (line == "---" && !foreHeadText) {
          if (!frontmatterStart) {
            frontmatterStart = true;
            inFrontmatter = true;
          } else if (!frontmatterEnd) {
            frontmatterEnd = true;
            inFrontmatter = false;
          }
          ;
        }
        if (inFrontmatter) {
          selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        } else {
          selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        }
        ;
      });
      selectEl.onChange(() => {
        const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
        const position = valueArray && valueArray.length > 0 ? valueArray[1] : 0;
        const lineNumber = Number(valueArray && valueArray.length > 1 ? valueArray[2] : 0);
        const inFrontmatter2 = position == "frontmatter" ? true : false;
        const top = position == "top" ? true : false;
        const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split("\n")[lineNumber], inFrontmatter2, top);
        this.close();
        modal.open();
      });
    });
  }
};

// src/fileClass/fileClassAttribute.ts
var types = {
  "input": "Accepts any value",
  "select": "Accepts a single value from a list",
  "multi": "Accepts multiple values from a list",
  "cycle": "Cycle through values from a list"
};
var FileClassAttribute = class {
  constructor(raw) {
    var _a, _b;
    const completeRegex = new RegExp(`^${genericFieldRegex}::(?<fieldSettings>.+)?`, "u");
    const nameRegex = new RegExp(`^${genericFieldRegex}$`, "u");
    let fieldName;
    let { attribute, fieldSettings } = ((_a = raw.match(completeRegex)) == null ? void 0 : _a.groups) || {};
    if (attribute) {
      fieldName = attribute;
    } else {
      let { attribute: attribute2 } = ((_b = raw.match(nameRegex)) == null ? void 0 : _b.groups) || {};
      fieldName = attribute2;
    }
    if (fieldName) {
      this.name = attribute.trim();
      if (fieldSettings) {
        const settings = JSON.parse(`${fieldSettings.trim()}`);
        this.type = settings["type"];
        switch (this.type) {
          case "multi":
            this.isMulti = true;
            break;
          case "cycle":
            this.isCycle = true;
            break;
          default:
            break;
        }
        this.options = settings["options"];
      }
    } else {
      const error = new Error("Improper value");
      throw error;
    }
  }
  getField() {
    let values = {};
    this.options.forEach((option, index) => {
      values[index] = option;
    });
    return new Field_default(this.name, values, this.name, this.isMulti, this.isCycle);
  }
};

// src/fileClass/fileClass.ts
var import_obsidian12 = require("obsidian");
var FileClassManager = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.basename == name);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassManager(this);
    this.attributes = [];
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian12.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error("no such fileClass in fileClass folder");
      throw error;
    }
  }
  getAttributes() {
    return __async(this, null, function* () {
      try {
        const file = this.getClassFile();
        let attributes = [];
        let errors = [];
        const result = yield this.plugin.app.vault.cachedRead(file);
        result.split("\n").forEach((line) => {
          try {
            const attribute = new FileClassAttribute(line);
            attributes.push(attribute);
          } catch (error) {
            errors.push(error);
          }
        });
        this.attributes = attributes;
        this.errors = errors;
      } catch (error) {
        throw error;
      }
    });
  }
  updateAttribute(newType, newOptions, newName, attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            if (newType == "input") {
              newContent.push(newName);
            } else {
              let settings = {};
              settings["type"] = newType;
              settings["options"] = newOptions;
              newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
            }
          } else {
            newContent.push(line);
          }
        });
        this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        settings["options"] = newOptions;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
};
function createFileClass(plugin, name) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      const fileClass = new FileClass(plugin, name);
      fileClass.getAttributes().then(() => {
        resolve(fileClass);
      }).catch((error) => {
        reject(error);
      });
    });
  });
}

// src/fileClass/FileClassAttributeSelectModal.ts
var import_obsidian14 = require("obsidian");

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian13 = require("obsidian");
var FileClassAttributeModal = class extends import_obsidian13.Modal {
  constructor(app2, fileClass, attr) {
    super(app2);
    this.attr = attr;
    this.fileClass = fileClass;
    if (this.attr) {
      this.type = this.attr.type || "input";
      this.options = this.attr.options;
      this.name = this.attr.name;
    }
  }
  onOpen() {
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    const nameInputContainer = this.contentEl.createDiv();
    nameInputContainer.setText("name");
    const nameInput = new import_obsidian13.TextComponent(nameInputContainer);
    this.attr ? nameInput.setValue(this.attr.name) : nameInput.setPlaceholder("Type a name for this attribute");
    const typeSelectHeader = this.contentEl.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    const attrName = attrLine.createEl("strong");
    attrName.setText(`<${this.name}>`);
    attrLine.append(" fields in files with:");
    String(`---
fileClass: ${this.fileClass.name}
...
---`).split("\n").forEach((line) => {
      typeSelectHeader.createEl("div", "yaml-metadata-menu-red").setText(line);
    });
    const typeSelectContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    const typeSelectLabel = typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label" });
    typeSelectLabel.setText("will: ");
    const typeSelectDropDown = typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-toggler" });
    const typeSelect = new import_obsidian13.DropdownComponent(typeSelectDropDown);
    Object.keys(types).forEach((key) => {
      typeSelect.addOption(key, types[key]);
    });
    if (this.attr) {
      typeSelect.setValue(this.type);
    }
    const optionsInputContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    const optionsInputLabel = optionsInputContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label-top" });
    optionsInputLabel.setText("Values");
    const optionsInput = new import_obsidian13.TextAreaComponent(optionsInputContainer);
    optionsInput.inputEl.rows = 3;
    optionsInput.inputEl.cols = 26;
    this.attr ? optionsInput.setValue(this.type == "input" ? "" : this.options.join(", ")) : optionsInput.setPlaceholder("insert values, comma separated");
    !this.attr || this.type == "input" ? optionsInputContainer.hide() : optionsInputContainer.show();
    typeSelect.onChange((type) => {
      type == "input" ? optionsInputContainer.hide() : optionsInputContainer.show();
      this.type = type;
    });
    optionsInput.onChange((value) => this.options = value.split(",").map((item) => item.trim()));
    nameInput.onChange((value) => {
      this.name = value;
      attrName.setText(`<${value}>`);
    });
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian13.ButtonComponent(footer);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => {
      this.fileClass.updateAttribute(this.type, this.options, this.name, this.attr);
      this.close();
    });
    if (this.attr) {
      const removeButton = new import_obsidian13.ButtonComponent(footer);
      removeButton.setIcon("trash");
      removeButton.onClick(() => {
        var _a;
        const confirmModal = new import_obsidian13.Modal(this.app);
        confirmModal.titleEl.setText("Please confirm");
        confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
        const confirmFooter = confirmModal.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
        const confirmButton = new import_obsidian13.ButtonComponent(confirmFooter);
        confirmButton.setIcon("checkmark");
        confirmButton.onClick(() => {
          if (this.attr)
            this.fileClass.removeAttribute(this.attr);
          confirmModal.close();
          this.close();
        });
        const dismissButton = new import_obsidian13.ExtraButtonComponent(confirmFooter);
        dismissButton.setIcon("cross");
        dismissButton.onClick(() => this.close());
        confirmModal.open();
      });
    }
    const cancelButton = new import_obsidian13.ExtraButtonComponent(footer);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var FileClassAttributeSelectModal = class extends import_obsidian14.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to update`);
      const fileClass = yield createFileClass(this.plugin, this.file.basename);
      this.titleEl.setText(`Select the field to update in ${fileClass.name}`);
      const selectContainer = this.contentEl.createDiv();
      const select = new import_obsidian14.DropdownComponent(selectContainer);
      select.addOption("select an attribute", "--select an attribute--");
      fileClass.attributes.forEach((attr) => {
        select.addOption(attr.name, attr.name);
      });
      select.addOption("++newAttr++", "++Add a new attribute++");
      select.onChange((attrName) => {
        if (attrName == "++newAttr") {
          const modal = new FileClassAttributeModal(this.plugin.app, fileClass);
          modal.open();
          this.close();
        } else {
          const modal = new FileClassAttributeModal(this.plugin.app, fileClass, fileClass.attributes.filter((attr) => attr.name == attrName)[0]);
          modal.open();
          this.close();
        }
      });
    });
  }
};

// src/options/OptionsList.ts
function isMenu(category) {
  return category.addItem !== void 0;
}
function isSelect(category) {
  return category.modals !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, category) {
    this.file = file;
    this.plugin = plugin;
    this.category = category;
  }
  createExtraOptionList() {
    return __async(this, null, function* () {
      var _a;
      const frontmatter = (_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter;
      if (frontmatter) {
        const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
        Object.keys(attributes).forEach((key) => {
          if (this.plugin.settings.globallyIgnoredFields.includes(key)) {
            delete attributes[key];
          }
          ;
        });
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        let fileClassForFields = false;
        let fileClassFields = [];
        const fileClassAlias = this.plugin.settings.fileClassAlias;
        if (Object.keys(attributes).includes(fileClassAlias)) {
          const fileClass = attributes[fileClassAlias];
          try {
            const _fileClass = yield createFileClass(this.plugin, fileClass);
            this.fileClass = _fileClass;
            fileClassFields = _fileClass.attributes.map((attr) => attr.name);
            fileClassForFields = true;
            Object.keys(attributes).forEach((key) => {
              if (!fileClassFields.includes(key) && key != fileClassAlias) {
                delete attributes[key];
              }
              ;
            });
            const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, this.fileClass.getClassFile());
            if (isMenu(this.category)) {
              this.category.addSeparator();
              this.category.addItem((item) => {
                item.setIcon("gear");
                item.setTitle(`Manage <${this.fileClass.name}> fields`);
                item.onClick((evt) => {
                  fileClassAttributeSelectModal.open();
                });
              });
            } else {
              this.category.addOption("manage_fileClass_attributes", "Manage fileClass attributes");
              this.category.modals["add_field_at_section"] = () => fileClassAttributeSelectModal.open();
            }
            ;
            yield this.createExtraOptionsListForFrontmatter(attributes);
            yield this.createExtraOptionsListForInlineFields(this.file, fileClassForFields, fileClassFields);
            if (isMenu(this.category)) {
              this.category.addSeparator();
            }
            ;
            this.addSectionSelectModalOption(this.plugin);
          } catch (error) {
            yield this.createExtraOptionsListForFrontmatter(attributes);
            yield this.createExtraOptionsListForInlineFields(this.file);
            if (isMenu(this.category)) {
              this.category.addSeparator();
            }
            ;
            this.addSectionSelectModalOption(this.plugin);
          }
          ;
        } else {
          yield this.createExtraOptionsListForFrontmatter(attributes);
          yield this.createExtraOptionsListForInlineFields(this.file);
          if (isMenu(this.category)) {
            this.category.addSeparator();
          }
          ;
          this.addSectionSelectModalOption(this.plugin);
        }
        ;
      } else {
        yield this.createExtraOptionsListForInlineFields(this.file);
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        this.addSectionSelectModalOption(this.plugin);
      }
      ;
    });
  }
  createExtraOptionsListForInlineFields(_0) {
    return __async(this, arguments, function* (file, fileClassForFields = false, fileClassFields = []) {
      let attributes = {};
      const regex = new RegExp(`^${genericFieldRegex}::s*(?<values>.+)?`, "u");
      const result = yield this.plugin.app.vault.read(file);
      result.split("\n").map((line) => {
        const regexResult = line.match(regex);
        const { attribute, values } = (regexResult == null ? void 0 : regexResult.groups) || {};
        if (attribute && !this.plugin.settings.globallyIgnoredFields.includes(attribute.trim())) {
          if (fileClassForFields) {
            if (fileClassFields.includes(attribute.trim())) {
              attributes[attribute.trim()] = values ? values.trim() : "";
            }
            ;
          } else {
            attributes[attribute.trim()] = values ? values.trim() : "";
          }
          ;
        }
        ;
      });
      if (Object.keys(attributes).length > 0) {
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        this.buildExtraOptionsList(attributes);
      }
      ;
    });
  }
  createExtraOptionsListForFrontmatter(attributes) {
    return __async(this, null, function* () {
      this.buildExtraOptionsList(attributes);
    });
  }
  buildExtraOptionsList(attributes) {
    Object.keys(attributes).forEach((key) => {
      const value = attributes[key];
      const propertySettings = this.getPropertySettings(key);
      if (propertySettings == null ? void 0 : propertySettings.values) {
        if (propertySettings.isCycle) {
          this.addCycleMenuOption(key, value, propertySettings);
        } else if (propertySettings.isMulti) {
          this.addMultiMenuOption(key, value, propertySettings);
        } else {
          this.addSelectMenuOption(key, value, propertySettings);
        }
        ;
      } else if (isBoolean(value) || /true/i.test(value) || /false/i.test(value)) {
        let toBooleanValue = false;
        if (isBoolean(value)) {
          toBooleanValue = value;
        } else if (/true/i.test(value)) {
          toBooleanValue = true;
        } else if (/false/i.test(value)) {
          toBooleanValue = false;
        }
        ;
        this.addToggleMenuOption(key, toBooleanValue);
      } else {
        this.addTextInputMenuOption(key, value ? value.toString() : "");
      }
      ;
    });
  }
  addSectionSelectModalOption(plugin) {
    const modal = new chooseSectionModal(this.plugin, this.file);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setIcon("pencil");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption("add_field_at_section", "Add field at section...");
      this.category.modals["add_field_at_section"] = () => modal.open();
    }
    ;
  }
  addCycleMenuOption(name, value, propertySettings) {
    const values = propertySettings.values;
    const keys = Object.keys(values);
    const keyForValue = keys.find((key) => values[key] === value);
    let nextValue;
    if (keyForValue) {
      const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
      nextValue = values[nextKey];
    } else {
      nextValue = values[Object.keys(values)[0]];
    }
    ;
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`${name} : ${value} \u25B7 ${nextValue}`);
        item.setIcon("switch");
        item.onClick((evt) => {
          replaceValues(this.plugin.app, this.file, name, nextValue);
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`${name}_${value}_${nextValue}`, `${name} : ${value} \u25B7 ${nextValue}`);
      this.category.modals[`${name}_${value}_${nextValue}`] = () => replaceValues(this.plugin.app, this.file, name, nextValue);
    }
    ;
  }
  addMultiMenuOption(name, value, propertySettings) {
    const modal = new valueMultiSelectModal(this.plugin.app, this.file, name, value, propertySettings);
    modal.titleEl.setText("Select values");
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("bullet-list");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  addSelectMenuOption(name, value, propertySettings) {
    const modal = new valueToggleModal2(this.plugin.app, this.file, name, value, propertySettings);
    modal.titleEl.setText("Select value");
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon("right-triangle");
        item.onClick((evt) => modal.open());
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  addToggleMenuOption(name, value) {
    const modal = new valueToggleModal(this.plugin.app, this.file, name, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("checkmark");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  addTextInputMenuOption(name, value) {
    const modal = new valueTextInputModal(this.plugin.app, this.file, name, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick((evt) => modal.open());
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  getPropertySettings(propertyName) {
    const matchingSettings = this.plugin.settings.presetFields.filter((p) => p.name == propertyName);
    if (this.fileClass) {
      const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == propertyName);
      if (fileClassAttributesWithName.length > 0) {
        const fileClassAttribute = fileClassAttributesWithName[0];
        if (fileClassAttribute.options) {
          return fileClassAttribute.getField();
        } else if (matchingSettings.length > 0) {
          return matchingSettings[0];
        }
        ;
      }
    } else if (matchingSettings.length > 0) {
      return matchingSettings[0];
    }
    ;
  }
};

// src/options/linkContextMenu.ts
var linkContextMenu = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.createContextMenu();
  }
  createContextMenu() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      if (this.plugin.settings.displayFieldsInContextMenu && (source === "link-context-menu" || source === "calendar-context-menu" || source === "pane-more-options" || source === "file-explorer-context-menu")) {
        const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
        if (file instanceof import_obsidian15.TFile && file.extension === "md") {
          this.file = file;
          if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
            menu.addSeparator();
            menu.addItem((item) => {
              item.setIcon("gear");
              item.setTitle(`Manage <${file.basename}> fields`);
              item.onClick((evt) => {
                const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, file);
                fileClassAttributeSelectModal.open();
              });
            });
          } else {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            this.optionsList.createExtraOptionList();
          }
          ;
        }
        ;
      }
      ;
    }));
  }
};

// src/options/NoteFieldsCommandsModal.ts
var import_obsidian17 = require("obsidian");

// src/optionModals/SelectModal.ts
var import_obsidian16 = require("obsidian");
var SelectModal = class extends import_obsidian16.DropdownComponent {
  constructor(containerEl) {
    super(containerEl);
    this.modals = {};
  }
};

// src/options/NoteFieldsCommandsModal.ts
var NoteFieldsCommandsModal = class extends import_obsidian17.Modal {
  constructor(app2, plugin, file) {
    super(app2);
    this.app = app2;
    this.plugin = plugin;
    this.file = file;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to manage`);
      this.containerEl.addClass("metadata-menu");
      const optionsListContainer = this.contentEl.createDiv({ cls: "field-options" });
      this.select = new SelectModal(optionsListContainer);
      this.select.addOption("---", "Choose Field");
      this.optionsList = new OptionsList(this.plugin, this.file, this.select);
      yield this.optionsList.createExtraOptionList();
      this.select.onChange((value) => {
        this.select.modals[value]();
        this.close();
      });
      this.select.selectEl.focus();
    });
  }
};

// src/suggester/MetadataSuggester.ts
var import_obsidian18 = require("obsidian");
var ValueSuggest = class extends import_obsidian18.EditorSuggest {
  constructor(app2, plugin) {
    super(app2);
    this.inFrontmatter = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(option)) && (!lastValue || !!lastValue && option.contains(lastValue));
    };
    this.app = app2;
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    const frontmatter = this.plugin.app.metadataCache.metadataCache[app.metadataCache.fileCache[file.path].hash].frontmatter;
    this.inFrontmatter = frontmatter && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    const regex = this.inFrontmatter ? new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u") : new RegExp(`^${genericFieldRegex}::(?<values>.*)`, "u");
    const fullLine = editor.getLine(editor.getCursor().line);
    if (!regex.test(fullLine)) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a, _b;
      const line = context.start.line;
      let regex;
      if (!this.inFrontmatter) {
        regex = new RegExp(`^${genericFieldRegex}::(?<values>.+)?`, "u");
      } else {
        regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
      }
      ;
      const regexResult = context.editor.getRange({ line, ch: 0 }, context.end).match(regex);
      if (regexResult && ((_a = regexResult.groups) == null ? void 0 : _a.attribute)) {
        const fieldName = regexResult.groups.attribute;
        const valuesList = (_b = regexResult.groups.values) == null ? void 0 : _b.replace(/^\[|^\s\[/, "").replace(/\]$/, "").split(",").map((o) => o.trim());
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        const cache = this.plugin.app.metadataCache.getCache(context.file.path);
        let tryWithPresetField = !(cache == null ? void 0 : cache.frontmatter);
        if (cache == null ? void 0 : cache.frontmatter) {
          const _c = cache.frontmatter, { position } = _c, attributes = __objRest(_c, ["position"]);
          const fileClassAlias = this.plugin.settings.fileClassAlias;
          if (Object.keys(attributes).contains(fileClassAlias)) {
            const fileClassValue = attributes[fileClassAlias];
            try {
              const fileClass = yield createFileClass(this.plugin, fileClassValue);
              this.fileClass = fileClass;
              const fileClassAttributes = this.fileClass.attributes;
              if (fileClassAttributes.map((attr) => attr.name).contains(fieldName)) {
                const options = fileClassAttributes.filter((attr) => attr.name == fieldName)[0].options.filter((option) => this.filterOption(firstValues, lastValue, option));
                return options.map((option) => Object({ value: option }));
              }
            } catch (error) {
              tryWithPresetField = true;
            }
            ;
          } else {
            tryWithPresetField = true;
          }
          ;
        }
        ;
        if (tryWithPresetField) {
          const presetFieldMatch = this.plugin.settings.presetFields.filter((field) => field.name == fieldName);
          if (presetFieldMatch.length > 0) {
            const presetField = presetFieldMatch[0];
            if (presetField.valuesListNotePath) {
              const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.valuesListNotePath);
              if (valuesFile instanceof import_obsidian18.TFile && valuesFile.extension == "md") {
                const values2 = yield (yield this.plugin.app.vault.read(valuesFile)).split("\n").filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
                return values2;
              }
              ;
            }
            ;
            const values = Object.entries(presetFieldMatch[0].values).map((option) => option[1]).filter((option) => this.filterOption(firstValues, lastValue, option));
            return values.map((_value) => Object({ value: _value }));
          }
          ;
        }
        ;
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.value);
  }
  selectSuggestion(suggestion, event) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian18.MarkdownView);
    if (!activeView) {
      return;
    }
    ;
    const editor = activeView.editor;
    const activeLine = editor.getLine(this.context.start.line);
    if (this.inFrontmatter) {
      try {
        let parsedField = (0, import_obsidian18.parseYaml)(activeLine);
        let [attr, pastValues] = Object.entries(parsedField)[0];
        let newField;
        if (!pastValues) {
          newField = attr + ": " + suggestion.value;
        } else if (typeof pastValues == "string") {
          if (!pastValues.contains(",")) {
            newField = attr + ": " + suggestion.value;
          } else {
            newField = attr + ": [" + pastValues.split(",").map((o) => o.trim()).slice(0, -1).join(", ") + ", " + suggestion.value + "]";
          }
        } else if (Array.isArray(pastValues)) {
          if (activeLine.endsWith(",]") || activeLine.endsWith(", ]")) {
            newField = attr + ": [" + [...pastValues, suggestion.value].join(", ") + "]";
          } else {
            newField = attr + ": [" + [...pastValues.slice(0, -1), suggestion.value].join(", ") + "]";
          }
        } else {
          newField = attr + ": [" + [...pastValues].join(", ") + "]";
        }
        editor.replaceRange(newField, { line: this.context.start.line, ch: 0 }, { line: this.context.start.line, ch: activeLine.length });
        if (Array.isArray(pastValues) || typeof pastValues === "string" && pastValues.contains(",")) {
          editor.setCursor({ line: this.context.start.line, ch: newField.length - 1 });
        } else {
          editor.setCursor({ line: this.context.start.line, ch: newField.length });
        }
      } catch (error) {
        new import_obsidian18.Notice("Frontmatter wrongly formatted", 2e3);
        this.close();
        return;
      }
    } else {
      let cleanedLine = activeLine;
      while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
        cleanedLine = cleanedLine.slice(0, -1);
      }
      editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
    }
    this.didSelect = true;
    this.close();
  }
};

// main.ts
var MetadataMenu = class extends import_obsidian19.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      this.registerEditorSuggest(new ValueSuggest(this.app, this));
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this.app, this));
      this.api = new MetadataMenuApi(this).make();
      this.addCommand({
        id: "field_options",
        name: "field options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file);
          }
          const fieldsOptionsModal = new NoteFieldsCommandsModal(this.app, this, view.file);
          fieldsOptionsModal.open();
        }
      });
      this.addCommand({
        id: "fileClassAttr_options",
        name: "fileClass attributes options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
          }
          const modal = new FileClassAttributeSelectModal(this, view.file);
          modal.open();
        }
      });
      new linkContextMenu(this);
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3MvTWV0YWRhdGFNZW51U2V0dGluZ1RhYi50cyIsICJzcmMvc2V0dGluZ3MvRmllbGRTZXR0aW5nc01vZGFsLnRzIiwgInNyYy9GaWVsZC50cyIsICJzcmMvc2V0dGluZ3MvRmllbGRTZXR0aW5nLnRzIiwgInNyYy9zZXR0aW5ncy9NZXRhZGF0YU1lbnVTZXR0aW5ncy50cyIsICJzcmMvdXRpbHMvcGFyc2VyLnRzIiwgInNyYy9jb21tYW5kcy9nZXRWYWx1ZXMudHMiLCAic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXMudHMiLCAic3JjL2NvbW1hbmRzL2ZpZWxkV2l0aE1lbnUudHMiLCAic3JjL01ldGFkYXRhTWVudUFwaS50cyIsICJzcmMvb3B0aW9ucy9saW5rQ29udGV4dE1lbnUudHMiLCAic3JjL29wdGlvbk1vZGFscy92YWx1ZU11bHRpU2VsZWN0TW9kYWwudHMiLCAic3JjL29wdGlvbk1vZGFscy92YWx1ZVRleHRJbnB1dE1vZGFsLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvdmFsdWVUb2dnbGVNb2RhbC50cyIsICJzcmMvb3B0aW9uTW9kYWxzL3ZhbHVlU2VsZWN0TW9kYWwudHMiLCAic3JjL29wdGlvbk1vZGFscy9jaG9vc2VTZWN0aW9uTW9kYWwudHMiLCAic3JjL29wdGlvbk1vZGFscy9maWVsZFNlbGVjdE1vZGFsLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvYWRkTmV3RmllbGRNb2RhbC50cyIsICJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzc0F0dHJpYnV0ZS50cyIsICJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzcy50cyIsICJzcmMvZmlsZUNsYXNzL0ZpbGVDbGFzc0F0dHJpYnV0ZVNlbGVjdE1vZGFsLnRzIiwgInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzQXR0cmlidXRlTW9kYWwudHMiLCAic3JjL29wdGlvbnMvT3B0aW9uc0xpc3QudHMiLCAic3JjL29wdGlvbnMvTm90ZUZpZWxkc0NvbW1hbmRzTW9kYWwudHMiLCAic3JjL29wdGlvbk1vZGFscy9TZWxlY3RNb2RhbC50cyIsICJzcmMvc3VnZ2VzdGVyL01ldGFkYXRhU3VnZ2VzdGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBNZXRhZGF0YU1lbnVTZXR0aW5nVGFiIGZyb20gXCJzcmMvc2V0dGluZ3MvTWV0YWRhdGFNZW51U2V0dGluZ1RhYlwiO1xuaW1wb3J0IHsgTWV0YWRhdGFNZW51U2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tIFwic3JjL3NldHRpbmdzL01ldGFkYXRhTWVudVNldHRpbmdzXCI7XG5pbXBvcnQgdHlwZSB7IElNZXRhZGF0YU1lbnVBcGkgfSBmcm9tICdzcmMvTWV0YWRhdGFNZW51QXBpJztcbmltcG9ydCB7IE1ldGFkYXRhTWVudUFwaSB9IGZyb20gJ3NyYy9NZXRhZGF0YU1lbnVBcGknO1xuaW1wb3J0IEZpZWxkIGZyb20gJ3NyYy9GaWVsZCc7XG5pbXBvcnQgbGlua0NvbnRleHRNZW51IGZyb20gXCJzcmMvb3B0aW9ucy9saW5rQ29udGV4dE1lbnVcIjtcbmltcG9ydCBOb3RlRmllbGRzQ29tbWFuZHNNb2RhbCBmcm9tIFwic3JjL29wdGlvbnMvTm90ZUZpZWxkc0NvbW1hbmRzTW9kYWxcIjtcbmltcG9ydCBGaWxlQ2xhc3NBdHRyaWJ1dGVTZWxlY3RNb2RhbCBmcm9tICdzcmMvZmlsZUNsYXNzL0ZpbGVDbGFzc0F0dHJpYnV0ZVNlbGVjdE1vZGFsJztcbmltcG9ydCBWYWx1ZVN1Z2dlc3QgZnJvbSBcInNyYy9zdWdnZXN0ZXIvTWV0YWRhdGFTdWdnZXN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0YWRhdGFNZW51IGV4dGVuZHMgUGx1Z2luIHtcblx0cHVibGljIGFwaTogSU1ldGFkYXRhTWVudUFwaTtcblx0cHVibGljIHNldHRpbmdzOiBNZXRhZGF0YU1lbnVTZXR0aW5ncztcblx0cHVibGljIGluaXRpYWxQcm9wZXJ0aWVzOiBBcnJheTxGaWVsZD4gPSBbXTtcblx0cHVibGljIHNldHRpbmdUYWI6IE1ldGFkYXRhTWVudVNldHRpbmdUYWI7XG5cblx0YXN5bmMgb25sb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnNvbGUubG9nKCdNZXRhZGF0YSBNZW51IGxvYWRlZCcpO1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0dGhpcy5yZWdpc3RlckVkaXRvclN1Z2dlc3QobmV3IFZhbHVlU3VnZ2VzdCh0aGlzLmFwcCwgdGhpcykpO1xuXG5cdFx0dGhpcy5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZm9yRWFjaChwcm9wID0+IHtcblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gbmV3IEZpZWxkKCk7XG5cdFx0XHRPYmplY3QuYXNzaWduKHByb3BlcnR5LCBwcm9wKTtcblx0XHRcdHRoaXMuaW5pdGlhbFByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBNZXRhZGF0YU1lbnVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cdFx0dGhpcy5hcGkgPSBuZXcgTWV0YWRhdGFNZW51QXBpKHRoaXMpLm1ha2UoKTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogXCJmaWVsZF9vcHRpb25zXCIsXG5cdFx0XHRuYW1lOiBcImZpZWxkIG9wdGlvbnNcIixcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KVxuXHRcdFx0XHRpZiAoY2hlY2tpbmcpIHtcblx0XHRcdFx0XHRyZXR1cm4gISEodmlldz8uZmlsZSlcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBmaWVsZHNPcHRpb25zTW9kYWwgPSBuZXcgTm90ZUZpZWxkc0NvbW1hbmRzTW9kYWwodGhpcy5hcHAsIHRoaXMsIHZpZXchLmZpbGUpXG5cdFx0XHRcdGZpZWxkc09wdGlvbnNNb2RhbC5vcGVuKClcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHQvKiBUT0RPIDogYWRkIGEgY29udGV4dCBtZW51IGZvciBmaWxlQ2xhc3MgZmlsZXMgdG8gc2hvdyB0aGUgc2FtZSBvcHRpb25zIGFzIGluIEZpbGVDbGFzc0F0dHJpYnV0ZVNlbGVjdE1vZGFsKi9cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwiZmlsZUNsYXNzQXR0cl9vcHRpb25zXCIsXG5cdFx0XHRuYW1lOiBcImZpbGVDbGFzcyBhdHRyaWJ1dGVzIG9wdGlvbnNcIixcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KVxuXHRcdFx0XHRpZiAoY2hlY2tpbmcpIHtcblx0XHRcdFx0XHRyZXR1cm4gISEodmlldz8uZmlsZSkgJiYgYCR7dmlldy5maWxlLnBhcmVudC5wYXRofS9gID09IHRoaXMuc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGhcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBtb2RhbCA9IG5ldyBGaWxlQ2xhc3NBdHRyaWJ1dGVTZWxlY3RNb2RhbCh0aGlzLCB2aWV3IS5maWxlKVxuXHRcdFx0XHRtb2RhbC5vcGVuKClcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRuZXcgbGlua0NvbnRleHRNZW51KHRoaXMpO1xuXHR9O1xuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdNZXRhZGF0YSBNZW51IHVubG9hZGVkJyk7XG5cdH07XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9O1xuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzLnByZXNldEZpZWxkcyA9IHRoaXMuaW5pdGlhbFByb3BlcnRpZXM7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fTtcbn1cbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIEJ1dHRvbkNvbXBvbmVudCwgVG9nZ2xlQ29tcG9uZW50LCBNb2RhbCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZ3NNb2RhbCBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ3NNb2RhbFwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvRmllbGRcIjtcbmltcG9ydCBGaWVsZFNldHRpbmcgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdcIjtcblxuY2xhc3MgU2V0dGluZ3NNaWdyYXRpb25Db25maXJtTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cblx0cHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudTtcblx0cHJpdmF0ZSB0YWI6IE1ldGFkYXRhTWVudVNldHRpbmdUYWI7XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBNZXRhZGF0YU1lbnUsIHRhYjogTWV0YWRhdGFNZW51U2V0dGluZ1RhYikge1xuXHRcdHN1cGVyKHBsdWdpbi5hcHApO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHRcdHRoaXMudGFiID0gdGFiO1xuXHR9O1xuXG5cdG9uT3BlbigpOiB2b2lkIHtcblxuXHRcdHRoaXMudGl0bGVFbC5zZXRUZXh0KFwiQ29uZmlybVwiKTtcblx0XHRjb25zdCBib2R5ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHtcblx0XHRcdGNsczogXCJtb2RhbC10ZXh0LWRhbmdlclwiXG5cdFx0fSk7XG5cdFx0Ym9keS5zZXRUZXh0KFwiVGhpcyB3aWxsIGVyYXNlIGN1cnJlbnQgc2V0dGluZ3MuIEFyZSB5b3Ugc3VyZT9cIik7XG5cdFx0Y29uc3QgY29uZmlybUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQodGhpcy5jb250ZW50RWwpO1xuXHRcdGNvbmZpcm1CdXR0b24uc2V0SWNvbihcImNoZWNrXCIpO1xuXHRcdGNvbmZpcm1CdXR0b24ub25DbGljaygoKSA9PiB7XG5cdFx0XHQvL0B0cy1pZ25vcmVcblx0XHRcdGlmICh0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnMuaGFzT3duUHJvcGVydHkoXCJzdXBlcmNoYXJnZWQtbGlua3Mtb2JzaWRpYW5cIikpIHtcblx0XHRcdFx0Ly9AdHMtaWdub3JlXG5cdFx0XHRcdGxldCBzZXR0aW5ncyA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2luc1tcInN1cGVyY2hhcmdlZC1saW5rcy1vYnNpZGlhblwiXS5zZXR0aW5ncztcblx0XHRcdFx0bGV0IF9zZXR0aW5ncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzO1xuXHRcdFx0XHQvL2NvcHlpbmcgc2ltcGxlIHNldHRpbmdzXG5cdFx0XHRcdF9zZXR0aW5ncy5jbGFzc0ZpbGVzUGF0aCA9IHNldHRpbmdzLmNsYXNzRmlsZXNQYXRoO1xuXHRcdFx0XHRfc2V0dGluZ3MuZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnUgPSBzZXR0aW5ncy5kaXNwbGF5RmllbGRzSW5Db250ZXh0TWVudTtcblx0XHRcdFx0X3NldHRpbmdzLmdldEZyb21JbmxpbmVGaWVsZCA9IHNldHRpbmdzLmdldEZyb21JbmxpbmVGaWVsZDtcblx0XHRcdFx0X3NldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcyA9IHNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcztcblx0XHRcdFx0Ly9kZWVwIGNvcHlpbmcgcHJlc2V0RmllbGRzIGluIGluaXRpYWxQcm9wZXJ0eVxuXHRcdFx0XHR0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcyA9IFtdO1xuXHRcdFx0XHRzZXR0aW5ncy5wcmVzZXRGaWVsZHMuZm9yRWFjaCgocHJvcDogRmllbGQpID0+IHtcblx0XHRcdFx0XHRjb25zdCBwcm9wZXJ0eSA9IG5ldyBGaWVsZCgpO1xuXHRcdFx0XHRcdE9iamVjdC5hc3NpZ24ocHJvcGVydHksIHByb3ApO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuXHRcdFx0XHR9KVxuXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHR9O1xuXG5cdG9uQ2xvc2UoKTogdm9pZCB7XG5cdFx0dGhpcy50YWIuZGlzcGxheSgpO1xuXHR9O1xufTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ldGFkYXRhTWVudVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudTtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUpIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH07XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdTZXR0aW5ncycgfSk7XG5cblx0XHQvLyBNYW5hZ2luZyBjaG9pY2Ugd2hldGhlciB5b3UgZ2V0IGF0dHJpYnV0ZXMgZnJvbSBpbmxpbmUgZmllbGRzIGFuZCBmcm9udG1hdHRlciBvciBvbmx5IGZyb250bWF0ZXJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdTZWFyY2ggZm9yIGF0dHJpYnV0ZSBpbiBJbmxpbmUgZmllbGRzIGxpa2UgPGZpZWxkOjo+Jylcblx0XHRcdC5zZXREZXNjKCdTZXRzIHRoZSBgZGF0YS1saW5rLTxmaWVsZD5gLWF0dHJpYnV0ZSB0byB0aGUgdmFsdWUgb2YgaW5saW5lIGZpZWxkcycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XG5cdFx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZXRGcm9tSW5saW5lRmllbGQpXG5cdFx0XHRcdHRvZ2dsZS5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2V0RnJvbUlubGluZUZpZWxkID0gdmFsdWVcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0LyogTWFuYWdpbmcgcHJlZGVmaW5lZCB2YWx1ZXMgZm9yIHByb3BlcnRpZXMgKi9cblx0XHQvKiBNYW5hZ2UgbWVudSBvcHRpb25zIGRpc3BsYXkqL1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJEaXNwbGF5IGZpZWxkIG9wdGlvbnMgaW4gY29udGV4dCBtZW51XCIpXG5cdFx0XHQuc2V0RGVzYyhcIkNob29zZSB0byBzaG93IG9yIGhpZGUgZmllbGRzIG9wdGlvbnMgaW4gdGhlIGNvbnRleHQgbWVudSBvZiBhIGxpbmsgb3IgYSBmaWxlXCIpXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGU6IFRvZ2dsZUNvbXBvbmVudCkgPT4ge1xuXHRcdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnUpXG5cdFx0XHRcdHRvZ2dsZS5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnUgPSB2YWx1ZVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0LyogRXhjbHVkZSBGaWVsZHMgZnJvbSBjb250ZXh0IG1lbnUqL1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0lnbm9yZWQgZmllbGRzJylcblx0XHRcdC5zZXREZXNjKCdGaWVsZHMgdG8gYmUgaWdub3JlZCBieSB0aGUgcGx1Z2luIHdoZW4gYWRkaW5nIG9wdGlvbnMgdG8gdGhlIGNvbnRleHQgbWVudScpXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHtcblx0XHRcdFx0dGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgZmllbGRzIGFzIHN0cmluZywgY29tbWEgc2VwYXJhdGVkJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2xvYmFsbHlJZ25vcmVkRmllbGRzLmpvaW4oJywgJykpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2xvYmFsbHlJZ25vcmVkRmllbGRzID0gdmFsdWUucmVwbGFjZSgvXFxzL2csICcnKS5zcGxpdCgnLCcpO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5yb3dzID0gNjtcblx0XHRcdFx0dGV4dC5pbnB1dEVsLmNvbHMgPSAyNTtcblx0XHRcdH0pO1xuXG5cdFx0LyogU2V0IGNsYXNzRmlsZXMgUGF0aCovXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnY2xhc3MgRmlsZXMgcGF0aCcpXG5cdFx0XHQuc2V0RGVzYygnUGF0aCB0byB0aGUgZmlsZXMgY29udGFpbmluZyB0aGUgYXV0aG9yaXplZCBmaWVsZHMgZm9yIGEgdHlwZSBvZiBub3RlJylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG5cdFx0XHRcdHRleHRcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ1BhdGgvJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGgpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGggPSB2YWx1ZVxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdC8qIFNldCBmaWxlQ2xhc3MgYWxpYXMqL1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ2ZpbGVDbGFzcyBmaWVsZCBhbGlhcycpXG5cdFx0XHQuc2V0RGVzYygnQ2hvb3NlIGFub3RoZXIgbmFtZSBmb3IgZmlsZUNsYXNzIGZpZWxkIGluIGZyb250bWF0dGVyIChleGFtcGxlOiBDYXRlZ29yeSwgdHlwZSwgLi4uJylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG5cdFx0XHRcdHRleHRcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXMpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXMgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvKiBBZGQgbmV3IHByb3BlcnR5IGZvciB3aGljaCB3ZSB3YW50IHRvIHByZXNldCB2YWx1ZXMqL1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJBZGQgTmV3IFByb3BlcnR5IE1hbmFnZXJcIilcblx0XHRcdC5zZXREZXNjKFwiQWRkIGEgbmV3IEZyb250bWF0dGVyIHByb3BlcnR5IGZvciB3aGljaCB5b3Ugd2FudCBwcmVzZXQgdmFsdWVzLlwiKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYnV0dG9uXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoXCJBZGQgTmV3IFByb3BlcnR5IE1hbmFnZXJcIilcblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIitcIilcblx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgbW9kYWwgPSBuZXcgRmllbGRTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgY29udGFpbmVyRWwpO1xuXHRcdFx0XHRcdFx0bW9kYWwub3BlbigpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvKiBNYW5hZ2VkIHByb3BlcnRpZXMgdGhhdCBjdXJyZW50bHkgaGF2ZSBwcmVzZXQgdmFsdWVzICovXG5cdFx0dGhpcy5wbHVnaW4uaW5pdGlhbFByb3BlcnRpZXMuZm9yRWFjaChwcm9wID0+IHtcblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gbmV3IEZpZWxkKCk7XG5cdFx0XHRPYmplY3QuYXNzaWduKHByb3BlcnR5LCBwcm9wKTtcblx0XHRcdG5ldyBGaWVsZFNldHRpbmcoY29udGFpbmVyRWwsIHByb3BlcnR5LCB0aGlzLmFwcCwgdGhpcy5wbHVnaW4pO1xuXHRcdH0pO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnTWlncmF0ZScgfSk7XG5cblx0XHQvKiBBZGQgbmV3IHByb3BlcnR5IGZvciB3aGljaCB3ZSB3YW50IHRvIHByZXNldCB2YWx1ZXMqL1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJDb3B5IHNldHRpbmdzIGZyb20gc3VwZXJjaGFyZ2VkIGxpbmtzIHBsdWdpblwiKVxuXHRcdFx0LnNldERlc2MoXCJDb3B5IHNldHRpbmdzIGZyb20gc3VwZXJjaGFyZ2VkIGxpbmtzIHBsdWdpblwiKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYnV0dG9uXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoXCJHZXQgc2V0dGluZ3MgZnJvbSBzdXBlcmNoYXJnZWQgbGlua3NcIilcblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIkNvcHlcIilcblx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgbW9kYWwgPSBuZXcgU2V0dGluZ3NNaWdyYXRpb25Db25maXJtTW9kYWwodGhpcy5wbHVnaW4sIHRoaXMpO1xuXHRcdFx0XHRcdFx0bW9kYWwub3BlbigpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH07XG59O1xuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcsIFRleHRDb21wb25lbnQsIE5vdGljZSwgQnV0dG9uQ29tcG9uZW50LCBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgVG9nZ2xlQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9GaWVsZFwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZyBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWVsZFNldHRpbmdzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHJpdmF0ZSBuYW1lUHJvbXB0Q29tcG9uZW50OiBUZXh0Q29tcG9uZW50O1xuICAgIHByaXZhdGUgdmFsdWVzUHJvbXB0Q29tcG9uZW50czogQXJyYXk8VGV4dENvbXBvbmVudD4gPSBbXTtcbiAgICBwcml2YXRlIGlzTXVsdGlUb2dnbGVyQ29tcG9uZW50OiBUb2dnbGVDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBpc0N5Y2xlVG9nZ2xlckNvbXBvbmVudDogVG9nZ2xlQ29tcG9uZW50O1xuICAgIHByaXZhdGUgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIHByb3BlcnR5OiBGaWVsZDtcbiAgICBwcml2YXRlIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIHByaXZhdGUgaW5pdGlhbFByb3BlcnR5OiBGaWVsZDtcbiAgICBwcml2YXRlIHBhcmVudFNldHRpbmc/OiBTZXR0aW5nO1xuICAgIHByaXZhdGUgbmV3OiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIHBhcmVudFNldHRpbmdDb250YWluZXI6IEhUTUxFbGVtZW50O1xuXG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIHBhcmVudFNldHRpbmdDb250YWluZXI6IEhUTUxFbGVtZW50LCBwYXJlbnRTZXR0aW5nPzogU2V0dGluZywgcHJvcGVydHk/OiBGaWVsZCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5wYXJlbnRTZXR0aW5nID0gcGFyZW50U2V0dGluZztcbiAgICAgICAgdGhpcy5pbml0aWFsUHJvcGVydHkgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgdGhpcy5wYXJlbnRTZXR0aW5nQ29udGFpbmVyID0gcGFyZW50U2V0dGluZ0NvbnRhaW5lcjtcbiAgICAgICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICAgICAgICB0aGlzLm5ldyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsUHJvcGVydHkubmFtZSA9IHByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQcm9wZXJ0eS5pZCA9IHByb3BlcnR5LmlkO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocHJvcGVydHkudmFsdWVzKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbFByb3BlcnR5LnZhbHVlc1trXSA9IHByb3BlcnR5LnZhbHVlc1trXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5ld0lkID0gMTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHByb3AuaWQpICYmIHBhcnNlSW50KHByb3AuaWQpID49IG5ld0lkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0lkID0gcGFyc2VJbnQocHJvcC5pZCkgKyAxO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkuaWQgPSBuZXdJZC50b1N0cmluZygpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsUHJvcGVydHkuaWQgPSBuZXdJZC50b1N0cmluZygpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnR5Lm5hbWUgPT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoYEFkZCBhIHByb3BlcnR5IGFuZCBzZXQgcHJlZGVmaW5lZGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoYE1hbmFnZSBzZXR0aW5ncyB2YWx1ZXMgZm9yICR7dGhpcy5wcm9wZXJ0eS5uYW1lfWApO1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUZvcm0oKTtcbiAgICB9O1xuXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnByb3BlcnR5LCB0aGlzLmluaXRpYWxQcm9wZXJ0eSk7XG4gICAgICAgIGlmICghdGhpcy5uZXcgJiYgdGhpcy5wYXJlbnRTZXR0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNldHRpbmcuaW5mb0VsLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgICAgICBgJHt0aGlzLnByb3BlcnR5Lm5hbWV9OiBbJHtPYmplY3Qua2V5cyh0aGlzLnByb3BlcnR5LnZhbHVlcykubWFwKGsgPT4gdGhpcy5wcm9wZXJ0eS52YWx1ZXNba10pLmpvaW4oJywgJyl9XWA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zYXZlZCkge1xuICAgICAgICAgICAgbmV3IEZpZWxkU2V0dGluZyh0aGlzLnBhcmVudFNldHRpbmdDb250YWluZXIsIHRoaXMucHJvcGVydHksIHRoaXMuYXBwLCB0aGlzLnBsdWdpbik7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgc2V0VmFsdWVMaXN0VGV4dChoZWFkZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGhlYWRlci5zZXRUZXh0KGBQcmVzZXQgdmFsdWVzOiAke09iamVjdC52YWx1ZXModGhpcy5wcm9wZXJ0eS52YWx1ZXMpLmpvaW4oJywgJyl9YCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlbmFtZUlucHV0Q29udGFpbmVyKHBhcmVudE5vZGU6IEhUTUxEaXZFbGVtZW50KTogVGV4dENvbXBvbmVudCB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZUNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgcHJvcGVydHlOYW1lQ29udGFpbmVyTGFiZWwuc2V0VGV4dChgUHJvcGVydHkgTmFtZTpgKTtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBuZXcgVGV4dENvbXBvbmVudChwYXJlbnROb2RlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMucHJvcGVydHkubmFtZTtcbiAgICAgICAgaW5wdXQuc2V0VmFsdWUobmFtZSk7XG4gICAgICAgIGlucHV0LnNldFBsYWNlaG9sZGVyKFwiTmFtZSBvZiB0aGUgcHJvcGVydHlcIik7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkubmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoYE1hbmFnZSBwcmVkZWZpbmVkIHZhbHVlcyBmb3IgJHt0aGlzLnByb3BlcnR5Lm5hbWV9YCk7XG4gICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwucmVtb3ZlVmFsaWRhdGlvbkVycm9yKGlucHV0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVUb2dnbGVyQ29udGFpbmVyKHBhcmVudE5vZGU6IEhUTUxEaXZFbGVtZW50LCBsYWJlbDogc3RyaW5nKTogVG9nZ2xlQ29tcG9uZW50IHtcbiAgICAgICAgcGFyZW50Tm9kZS5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdG9nZ2xlXCIpXG4gICAgICAgIGNvbnN0IHByb3BlcnR5Q29udGFpbmVyTGFiZWwgPSBwYXJlbnROb2RlLmNyZWF0ZURpdih7IGNsczogJ2Zyb250bWF0dGVyLWNoZWNrYm94LXRvZ2dsZXInIH0pO1xuXG4gICAgICAgIHByb3BlcnR5Q29udGFpbmVyTGFiZWwuc2V0VGV4dChsYWJlbCk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZXIgPSBuZXcgVG9nZ2xlQ29tcG9uZW50KHBhcmVudE5vZGUpO1xuICAgICAgICByZXR1cm4gdG9nZ2xlcjtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVMaXN0Tm90ZUNvbnRhaW5lcihwYXJlbnROb2RlOiBIVE1MRGl2RWxlbWVudCk6IFRleHRDb21wb25lbnQge1xuICAgICAgICBjb25zdCBsaXN0Tm90ZUNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS1pbnB1dFwiIH0pO1xuICAgICAgICBsaXN0Tm90ZUNvbnRhaW5lckxhYmVsLnNldFRleHQoYFBhdGggb2YgdGhlIG5vdGUgY29udGFpbmluZyB0aGUgdmFsdWVzOmApO1xuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFRleHRDb21wb25lbnQobGlzdE5vdGVDb250YWluZXJMYWJlbCk7XG4gICAgICAgIGNvbnN0IGxpc3ROb3RlUGF0aCA9IHRoaXMucHJvcGVydHkudmFsdWVzTGlzdE5vdGVQYXRoO1xuICAgICAgICBpbnB1dC5zZXRWYWx1ZShsaXN0Tm90ZVBhdGgpO1xuICAgICAgICBpbnB1dC5zZXRQbGFjZWhvbGRlcihcIlBhdGgvb2YvdGhlL25vdGUubWRcIik7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHRoaXMucHJvcGVydHkudmFsdWVzTGlzdE5vdGVQYXRoID0gdmFsdWUpO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVtb3ZlUHJlc2V0VmFsdWUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgbGV0IG5ld1ZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICBmb3IgKGxldCBfa2V5IGluIHRoaXMucHJvcGVydHkudmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBfa2V5KSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWVzW19rZXldID0gdGhpcy5wcm9wZXJ0eS52YWx1ZXNbX2tleV07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb3BlcnR5LnZhbHVlcyA9IG5ld1ZhbHVlcztcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVWYWx1ZUNvbnRhaW5lcihwYXJlbnROb2RlOiBIVE1MRGl2RWxlbWVudCwgaGVhZGVyOiBIVE1MRGl2RWxlbWVudCwga2V5OiBzdHJpbmcpOiBUZXh0Q29tcG9uZW50IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5wcm9wZXJ0eS52YWx1ZXM7XG4gICAgICAgIGNvbnN0IHByZXNldFZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgIGNvbnN0IHZhbHVlQ29udGFpbmVyID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiAnbWV0YWRhdGEtbWVudS1wcm9tcHQtY29udGFpbmVyJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFRleHRDb21wb25lbnQodmFsdWVDb250YWluZXIpO1xuICAgICAgICBpbnB1dC5zZXRWYWx1ZShwcmVzZXRWYWx1ZSk7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkudmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVMaXN0VGV4dChoZWFkZXIpO1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnJlbW92ZVZhbGlkYXRpb25FcnJvcihpbnB1dCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZVJlbW92ZUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQodmFsdWVDb250YWluZXIpO1xuICAgICAgICB2YWx1ZVJlbW92ZUJ1dHRvbi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQcmVzZXRWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVMaXN0VGV4dChoZWFkZXIpO1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodmFsdWVDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzUHJvbXB0Q29tcG9uZW50cy5yZW1vdmUoaW5wdXQpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKGtleSAhPSBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnR5LnZhbHVlcylbMF0pIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlVXBncmFkZUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQodmFsdWVDb250YWluZXIpO1xuICAgICAgICAgICAgdmFsdWVVcGdyYWRlQnV0dG9uLnNldEJ1dHRvblRleHQoXCJcdTI1QjJcIik7XG4gICAgICAgICAgICB2YWx1ZVVwZ3JhZGVCdXR0b24ub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc1ZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgdXBwZXJDb21wb25lbnQgPSB0aGlzLnZhbHVlc1Byb21wdENvbXBvbmVudHNbdGhpcy52YWx1ZXNQcm9tcHRDb21wb25lbnRzLmluZGV4T2YoaW5wdXQpIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHVwcGVyQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwcGVyVmFsdWUgPSB1cHBlckNvbXBvbmVudC5pbnB1dEVsLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cHBlcktleSA9IE9iamVjdC5rZXlzKHZhbHVlcykuZmlsdGVyKGsgPT4gdmFsdWVzW2tdID09IHVwcGVyVmFsdWUpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXBwZXJLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyQ29tcG9uZW50LnNldFZhbHVlKHRoaXNWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdXBwZXJLZXldID0gdGhpc1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodXBwZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHVwcGVyVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVGb3JtKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWRpdlwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYWluRGl2ID0gZGl2LmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwibWV0YWRhdGEtbWVudS1wcm9tcHQtZm9ybVwiXG4gICAgICAgIH0pO1xuICAgICAgICAvKiBQcm9wZXJ0eSBOYW1lIFNlY3Rpb24gKi9cbiAgICAgICAgY29uc3QgbmFtZUNvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMubmFtZVByb21wdENvbXBvbmVudCA9IHRoaXMuY3JlYXRlbmFtZUlucHV0Q29udGFpbmVyKG5hbWVDb250YWluZXIpO1xuXG4gICAgICAgIG1haW5EaXYuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG5cbiAgICAgICAgLyogUHJvcGVydHkgaXMgTXVsdGkgc2VjdGlvbiovXG5cbiAgICAgICAgY29uc3QgbXVsdGlDb250YWluZXIgPSBtYWluRGl2LmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXRvZ2dsZVwifSk7XG4gICAgICAgIHRoaXMuaXNNdWx0aVRvZ2dsZXJDb21wb25lbnQgPSB0aGlzLmNyZWF0ZVRvZ2dsZXJDb250YWluZXIobXVsdGlDb250YWluZXIsIFwiSXMgTXVsdGk6IFwiKTtcbiAgICAgICAgdGhpcy5pc011bHRpVG9nZ2xlckNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLnByb3BlcnR5LmlzTXVsdGkpO1xuICAgICAgICB0aGlzLmlzTXVsdGlUb2dnbGVyQ29tcG9uZW50LnNldFRvb2x0aXAoXCJDYW4gdGhpcyBwcm9wZXJ0eSBoYXZlIG11bHRpcGxlIHZhbHVlcz9cIik7XG4gICAgICAgIHRoaXMuaXNNdWx0aVRvZ2dsZXJDb21wb25lbnQub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eS5pc011bHRpID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eS5pc0N5Y2xlICYmIHRoaXMucHJvcGVydHkuaXNNdWx0aSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHkuaXNDeWNsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNDeWNsZVRvZ2dsZXJDb21wb25lbnQuc2V0VmFsdWUoZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyogUHJvcGVydHkgaXMgQ3ljbGUgc2VjdGlvbiovXG5cbiAgICAgICAgY29uc3QgY3ljbGVDb250YWluZXIgPSBtYWluRGl2LmNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmlzQ3ljbGVUb2dnbGVyQ29tcG9uZW50ID0gdGhpcy5jcmVhdGVUb2dnbGVyQ29udGFpbmVyKGN5Y2xlQ29udGFpbmVyLCBcIklzIEN5Y2xlOiBcIik7XG4gICAgICAgIHRoaXMuaXNDeWNsZVRvZ2dsZXJDb21wb25lbnQuc2V0VmFsdWUodGhpcy5wcm9wZXJ0eS5pc0N5Y2xlKTtcbiAgICAgICAgdGhpcy5pc0N5Y2xlVG9nZ2xlckNvbXBvbmVudC5zZXRUb29sdGlwKFwiSXMgdGhpcyBwcm9wZXJ0eSdzIHZhbHVlcyBzZXQgaW4gY3ljbGUgbW9kZT9cIik7XG4gICAgICAgIHRoaXMuaXNDeWNsZVRvZ2dsZXJDb21wb25lbnQub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eS5pc0N5Y2xlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eS5pc0N5Y2xlICYmIHRoaXMucHJvcGVydHkuaXNNdWx0aSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHkuaXNNdWx0aSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNNdWx0aVRvZ2dsZXJDb21wb25lbnQuc2V0VmFsdWUoZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWFpbkRpdi5jcmVhdGVEaXYoeyBjbHM6ICdtZXRhZGF0YS1tZW51LXNlcGFyYXRvcicgfSkuY3JlYXRlRWwoXCJoclwiKTtcblxuICAgICAgICAvKiBQcm9wZXJ0eSdzIG5vdGUgZm9yIGxpc3Qgb2YgVmFsdWVzICovXG5cbiAgICAgICAgY29uc3QgbGlzdE5vdGVQYXRoQ29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVMaXN0Tm90ZUNvbnRhaW5lcihsaXN0Tm90ZVBhdGhDb250YWluZXIpO1xuXG4gICAgICAgIG1haW5EaXYuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG5cbiAgICAgICAgLyogUHJvcGVydHkgVmFsdWVzICovXG4gICAgICAgIGNvbnN0IHZhbHVlc0xpc3QgPSBtYWluRGl2LmNyZWF0ZURpdigpO1xuICAgICAgICBjb25zdCB2YWx1ZXNMaXN0SGVhZGVyID0gdmFsdWVzTGlzdC5jcmVhdGVEaXYoKTtcbiAgICAgICAgdmFsdWVzTGlzdEhlYWRlci5jcmVhdGVFbChcImgyXCIpO1xuICAgICAgICB2YWx1ZXNMaXN0SGVhZGVyLnNldFRleHQoYFByZXNldCB2YWx1ZXM6ICR7T2JqZWN0LnZhbHVlcyh0aGlzLnByb3BlcnR5LnZhbHVlcykuam9pbignLCAnKX1gKTtcbiAgICAgICAgY29uc3QgdmFsdWVzTGlzdEJvZHkgPSB2YWx1ZXNMaXN0LmNyZWF0ZURpdigpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnR5LnZhbHVlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNQcm9tcHRDb21wb25lbnRzLnB1c2godGhpcy5jcmVhdGVWYWx1ZUNvbnRhaW5lcih2YWx1ZXNMaXN0Qm9keSwgdmFsdWVzTGlzdEhlYWRlciwga2V5KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qIEFkZCBhIG5ldyBWYWx1ZXMgKi9cbiAgICAgICAgY29uc3QgdmFsdWVzTGlzdEZvb3RlciA9IHZhbHVlc0xpc3QuY3JlYXRlRGl2KCk7XG4gICAgICAgIGNvbnN0IGFkZFZhbHVlID0gdmFsdWVzTGlzdEZvb3Rlci5jcmVhdGVFbCgnYnV0dG9uJyk7XG4gICAgICAgIGFkZFZhbHVlLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgYWRkVmFsdWUudGV4dENvbnRlbnQgPSAnQWRkJztcbiAgICAgICAgYWRkVmFsdWUub25DbGlja0V2ZW50KGFzeW5jIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9IGF3YWl0IHRoaXMucHJvcGVydHkuaW5zZXJ0TmV3VmFsdWUoXCJcIilcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVmFsdWVDb250YWluZXIodmFsdWVzTGlzdEJvZHksIHZhbHVlc0xpc3RIZWFkZXIsIG5ld0tleSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWFpbkRpdi5jcmVhdGVEaXYoeyBjbHM6ICdtZXRhZGF0YS1tZW51LXNlcGFyYXRvcicgfSkuY3JlYXRlRWwoXCJoclwiKTtcblxuICAgICAgICAvKiBmb290ZXIgYnV0dG9ucyovXG4gICAgICAgIGNvbnN0IGZvb3RlckVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGNvbnN0IGZvb3RlckJ1dHRvbnMgPSBuZXcgU2V0dGluZyhmb290ZXJFbCk7XG4gICAgICAgIGZvb3RlckJ1dHRvbnMuYWRkQnV0dG9uKChiKSA9PiB0aGlzLmNyZWF0ZVNhdmVCdXR0b24oYikpO1xuICAgICAgICBmb290ZXJCdXR0b25zLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB0aGlzLmNyZWF0ZUNhbmNlbEJ1dHRvbihiKSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlU2F2ZUJ1dHRvbihiOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQge1xuICAgICAgICBiLnNldFRvb2x0aXAoXCJTYXZlXCIpXG4gICAgICAgICAgICAuc2V0SWNvbihcImNoZWNrbWFya1wiKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICgvXlsjPi1dLy50ZXN0KHRoaXMucHJvcGVydHkubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnNldFZhbGlkYXRpb25FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZVByb21wdENvbXBvbmVudCwgdGhpcy5uYW1lUHJvbXB0Q29tcG9uZW50LmlucHV0RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlByb3BlcnR5IG5hbWUgY2Fubm90IHN0YXJ0IHdpdGggIywgPiwgLVwiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BlcnR5Lm5hbWUgPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwuc2V0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lUHJvbXB0Q29tcG9uZW50LCB0aGlzLm5hbWVQcm9tcHRDb21wb25lbnQuaW5wdXRFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJvcGVydHkgbmFtZSBjYW4gbm90IGJlIEVtcHR5XCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNQcm9tcHRDb21wb25lbnRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoL15bIz4tXS8udGVzdChpbnB1dC5pbnB1dEVsLnZhbHVlKSAmJiBpbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQ/Lmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5zZXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsIGlucHV0LmlucHV0RWwucGFyZW50RWxlbWVudC5sYXN0RWxlbWVudENoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVmFsdWVzIGNhbm5vdCBjYW5ub3Qgc3RhcnQgd2l0aCAjLCA+LCAtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICgvWyxdL2d1LnRlc3QoaW5wdXQuaW5wdXRFbC52YWx1ZSkgJiYgaW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Py5sYXN0RWxlbWVudENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwuc2V0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LCBpbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlZhbHVlcyBjYW5ub3QgY29udGFpbiBhIGNvbW1hXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dEVsLnZhbHVlID09IFwiXCIgJiYgaW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Py5sYXN0RWxlbWVudENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwuc2V0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LCBpbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlZhbHVlcyBjYW4ndCBiZSBudWxsLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRml4IGVycm9ycyBiZWZvcmUgc2F2aW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4aXN0aW5nUHJvcGVydHkgPSB0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5maWx0ZXIocCA9PiBwLmlkID09IHRoaXMucHJvcGVydHkuaWQpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RXhpc3RpbmdQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBGaWVsZC5jb3B5UHJvcGVydHkoY3VycmVudEV4aXN0aW5nUHJvcGVydHksIHRoaXMucHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLnB1c2godGhpcy5wcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxQcm9wZXJ0eSA9IHRoaXMucHJvcGVydHk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGNyZWF0ZUNhbmNlbEJ1dHRvbihiOiBFeHRyYUJ1dHRvbkNvbXBvbmVudCk6IEV4dHJhQnV0dG9uQ29tcG9uZW50IHtcbiAgICAgICAgYi5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQ2FuY2VsXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8qIHJlc2V0IHZhbHVlcyBmcm9tIHNldHRpbmdzICovXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFByb3BlcnR5Lm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvcGVydHksIHRoaXMuaW5pdGlhbFByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9O1xuXG4gICAgLyogdXRpbHMgZnVuY3Rpb25zICovXG5cbiAgICBwcml2YXRlIHN0YXRpYyBzZXRWYWxpZGF0aW9uRXJyb3IodGV4dElucHV0OiBUZXh0Q29tcG9uZW50LCBpbnNlcnRBZnRlcjogRWxlbWVudCwgbWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICB0ZXh0SW5wdXQuaW5wdXRFbC5hZGRDbGFzcyhcImlzLWludmFsaWRcIik7XG4gICAgICAgIGlmIChtZXNzYWdlICYmIHRleHRJbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQ/Lmxhc3RFbGVtZW50Q2hpbGQpIHtcblxuICAgICAgICAgICAgbGV0IG1EaXYgPSB0ZXh0SW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgXCIuaW52YWxpZC1mZWVkYmFja1wiXG4gICAgICAgICAgICApIGFzIEhUTUxEaXZFbGVtZW50O1xuXG4gICAgICAgICAgICBpZiAoIW1EaXYpIHtcbiAgICAgICAgICAgICAgICBtRGl2ID0gY3JlYXRlRGl2KHsgY2xzOiBcImludmFsaWQtZmVlZGJhY2tcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1EaXYuaW5uZXJUZXh0ID0gbWVzc2FnZTtcbiAgICAgICAgICAgIG1EaXYuaW5zZXJ0QWZ0ZXIoaW5zZXJ0QWZ0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgc3RhdGljIHJlbW92ZVZhbGlkYXRpb25FcnJvcih0ZXh0SW5wdXQ6IFRleHRDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRleHRJbnB1dC5pbnB1dEVsLmhhc0NsYXNzKFwiaXMtaW52YWxpZFwiKSAmJiB0ZXh0SW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Py5sYXN0RWxlbWVudENoaWxkKSB7XG4gICAgICAgICAgICB0ZXh0SW5wdXQuaW5wdXRFbC5yZW1vdmVDbGFzcyhcImlzLWludmFsaWRcIilcbiAgICAgICAgICAgIHRleHRJbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoXG4gICAgICAgICAgICAgICAgdGV4dElucHV0LmlucHV0RWwucGFyZW50RWxlbWVudC5sYXN0RWxlbWVudENoaWxkXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH07XG59OyIsICJpbnRlcmZhY2UgRmllbGQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICBpc0N5Y2xlOiBib29sZWFuO1xuICAgIGlzTXVsdGk6IGJvb2xlYW47XG4gICAgdmFsdWVzTGlzdE5vdGVQYXRoOiBzdHJpbmc7XG59XG5cbmNsYXNzIEZpZWxkIHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZyA9IFwiXCIsXG4gICAgICAgIHZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9LFxuICAgICAgICBpZDogc3RyaW5nID0gXCJcIixcbiAgICAgICAgaXNNdWx0aTogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICBpc0N5Y2xlOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIHZhbHVlc0xpc3ROb3RlUGF0aDogc3RyaW5nID0gXCJcIikge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmlzQ3ljbGUgPSBpc0N5Y2xlO1xuICAgICAgICB0aGlzLmlzTXVsdGkgPSBpc011bHRpO1xuICAgICAgICB0aGlzLnZhbHVlc0xpc3ROb3RlUGF0aCA9IHZhbHVlc0xpc3ROb3RlUGF0aDtcbiAgICAgICAgdGhpcy5pbnNlcnROZXdWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5zZXJ0TmV3VmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBuZXdLZXkgPSAxO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGtleSkgJiYgcGFyc2VJbnQoa2V5KSA+PSBuZXdLZXkpIHtcbiAgICAgICAgICAgICAgICBuZXdLZXkgPSBwYXJzZUludChrZXkpICsgMTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZhbHVlc1tuZXdLZXkudG9TdHJpbmcoKV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIG5ld0tleS50b1N0cmluZygpO1xuICAgIH07XG5cbiAgICBzdGF0aWMgY29weVByb3BlcnR5KHRhcmdldDogRmllbGQsIHNvdXJjZTogRmllbGQpIHtcbiAgICAgICAgdGFyZ2V0LmlkID0gc291cmNlLmlkO1xuICAgICAgICB0YXJnZXQubmFtZSA9IHNvdXJjZS5uYW1lO1xuICAgICAgICB0YXJnZXQuaXNDeWNsZSA9IHNvdXJjZS5pc0N5Y2xlO1xuICAgICAgICB0YXJnZXQuaXNNdWx0aSA9IHNvdXJjZS5pc011bHRpO1xuICAgICAgICB0YXJnZXQudmFsdWVzTGlzdE5vdGVQYXRoID0gc291cmNlLnZhbHVlc0xpc3ROb3RlUGF0aDtcbiAgICAgICAgT2JqZWN0LmtleXMoc291cmNlLnZhbHVlcykuZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIHRhcmdldC52YWx1ZXNba10gPSBzb3VyY2UudmFsdWVzW2tdO1xuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0LnZhbHVlcykuZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoc291cmNlLnZhbHVlcykuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0LnZhbHVlc1trXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWVsZDsiLCAiaW1wb3J0IHsgQXBwLCBTZXR0aW5nLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvRmllbGRcIjtcbmltcG9ydCBGaWVsZFNldHRpbmdzTW9kYWwgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdzTW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmllbGRTZXR0aW5nIGV4dGVuZHMgU2V0dGluZyB7XG4gICAgcHJpdmF0ZSBwcm9wZXJ0eTogRmllbGQ7XG4gICAgcHJpdmF0ZSBhcHA6IEFwcDtcbiAgICBwcml2YXRlIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgcHJvcGVydHk6IEZpZWxkLCBhcHA6IEFwcCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyRWwpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsID0gY29udGFpbmVyRWw7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50V2l0aG5hbWUoKTtcbiAgICAgICAgdGhpcy5hZGRFZGl0QnV0dG9uKCk7XG4gICAgICAgIHRoaXMuYWRkRGVsZXRlQnV0dG9uKCk7XG5cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzZXRUZXh0Q29udGVudFdpdGhuYW1lKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluZm9FbC50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICBgJHt0aGlzLnByb3BlcnR5Lm5hbWV9OiBbJHtPYmplY3Qua2V5cyh0aGlzLnByb3BlcnR5LnZhbHVlcykubWFwKGsgPT4gdGhpcy5wcm9wZXJ0eS52YWx1ZXNba10pLmpvaW4oJywgJyl9XWA7XG4gICAgfTtcblxuXG4gICAgcHJpdmF0ZSBhZGRFZGl0QnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kYWwgPSBuZXcgRmllbGRTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgdGhpcy5jb250YWluZXJFbCwgdGhpcywgdGhpcy5wcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYWRkRGVsZXRlQnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4aXN0aW5nUHJvcGVydHkgPSB0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5maWx0ZXIocCA9PiBwLmlkID09IHRoaXMucHJvcGVydHkuaWQpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEV4aXN0aW5nUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLnJlbW92ZShjdXJyZW50RXhpc3RpbmdQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ0VsLnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKHRoaXMuc2V0dGluZ0VsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldFZhbHVlc0xpc3RGcm9tTm90ZShub3RlUGF0aDogc3RyaW5nLCBhcHA6IEFwcCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgbGV0IHZhbHVlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3RlUGF0aCk7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKVxuICAgICAgICAgICAgcmVzdWx0LnNwbGl0KCdcXG4nKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgvXiguKikkLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGxpbmUudHJpbSgpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9O1xuICAgIH07XG59OyIsICJpbXBvcnQgRmllbGQgZnJvbSBcInNyYy9GaWVsZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhTWVudVNldHRpbmdzIHtcblx0cHJlc2V0RmllbGRzOiBBcnJheTxGaWVsZD47XG5cdGRpc3BsYXlGaWVsZHNJbkNvbnRleHRNZW51OiBib29sZWFuO1xuXHRnbG9iYWxseUlnbm9yZWRGaWVsZHM6IEFycmF5PHN0cmluZz47XG5cdGdldEZyb21JbmxpbmVGaWVsZDogYm9vbGVhbjtcblx0Y2xhc3NGaWxlc1BhdGg6IHN0cmluZztcblx0aXNBdXRvc3VnZ2VzdEVuYWJsZWQ6IGJvb2xlYW47XG5cdGZpbGVDbGFzc0FsaWFzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNZXRhZGF0YU1lbnVTZXR0aW5ncyA9IHtcblx0cHJlc2V0RmllbGRzOiBbXSxcblx0ZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnU6IHRydWUsXG5cdGdsb2JhbGx5SWdub3JlZEZpZWxkczogW10sXG5cdGNsYXNzRmlsZXNQYXRoOiBcIlwiLFxuXHRnZXRGcm9tSW5saW5lRmllbGQ6IHRydWUsXG5cdGlzQXV0b3N1Z2dlc3RFbmFibGVkOiB0cnVlLFxuXHRmaWxlQ2xhc3NBbGlhczogXCJmaWxlQ2xhc3NcIlxufTsiLCAiZXhwb3J0IGNvbnN0IGZpZWxkQ29tcG9uZW50cyA9IFsnc3RhcnRTdHlsZScsICdhdHRyaWJ1dGUnLCAnZW5kU3R5bGUnLCAnYmVmb3JlU2VwYXJhdG9yU3BhY2VyJywgJ2FmdGVyU2VwYXJhdG9yU3BhY2VyJywgJ3ZhbHVlcyddXG5cbmV4cG9ydCBjb25zdCBnZW5lcmljRmllbGRSZWdleCA9IFwiKD88c3RhcnRTdHlsZT5bX1xcXFwqfmBdKikoPzxhdHRyaWJ1dGU+WzAtOVxcXFx3XFxcXHB7TGV0dGVyfVxcXFxwe0Vtb2ppX1ByZXNlbnRhdGlvbn1dWy0wLTlcXFxcd1xcXFxwe0xldHRlcn1cXFxccHtFbW9qaV9QcmVzZW50YXRpb259XFxcXHNdKikoPzxlbmRTdHlsZT5bX1xcXFwqfmBdKikoPzxiZWZvcmVTZXBhcmF0b3JTcGFjZXI+XFxcXHMqKVwiO1xuXG5leHBvcnQgY29uc3QgaW5saW5lRmllbGRSZWdleCA9IChhdHRyaWJ1dGU6IHN0cmluZykgPT4gbmV3IFJlZ0V4cChgKD88c3RhcnRTdHlsZT5bX1xcKn5cXGBdKikoPzxhdHRyaWJ1dGU+JHthdHRyaWJ1dGV9KSg/PGVuZFN0eWxlPltfXFwqflxcYF0qKSg/PGJlZm9yZVNlcGFyYXRvclNwYWNlcj5cXFxccyopOjooPzxhZnRlclNlcGFyYXRvclNwYWNlcj5cXFxccyopKD88dmFsdWVzPi4qKWAsICd1Jyk7IiwgImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IHsgaW5saW5lRmllbGRSZWdleCB9IGZyb20gXCJzcmMvdXRpbHMvcGFyc2VyXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWYWx1ZXMoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBhdHRyaWJ1dGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgKGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpKS5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgY29uc3QgeyBwb3NpdGlvbjogeyBzdGFydCwgZW5kIH0gfSA9IGZyb250bWF0dGVyIHx8IG51bGw7XG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnRlbnQubWFwKChsaW5lLCBpKSA9PiB7XG4gICAgICAgIGlmIChmcm9udG1hdHRlciAmJiBpID49IHN0YXJ0LmxpbmUgJiYgaSA8PSBlbmQubGluZSkge1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAke2F0dHJpYnV0ZX06KC4qKWAsICd1Jyk7XG4gICAgICAgICAgICBjb25zdCByID0gbGluZS5tYXRjaChyZWdleCk7XG4gICAgICAgICAgICBpZiAociAmJiByLmxlbmd0aCA+IDApIHJlc3VsdC5wdXNoKHJbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBpbmxpbmVGaWVsZFJlZ2V4KGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICBjb25zdCByID0gbGluZS5tYXRjaChyZWdleCk7XG4gICAgICAgICAgICBpZiAocj8uZ3JvdXBzKSByZXN1bHQucHVzaChyLmdyb3Vwcy52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcmVzdWx0O1xufSIsICJpbXBvcnQgeyBBcHAsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBmaWVsZENvbXBvbmVudHMsIGlubGluZUZpZWxkUmVnZXggfSBmcm9tIFwic3JjL3V0aWxzL3BhcnNlclwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVwbGFjZVZhbHVlcyhhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGF0dHJpYnV0ZTogc3RyaW5nLCBpbnB1dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IChhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKSkuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgIGNvbnN0IHN0YXJ0ID0gZnJvbnRtYXR0ZXIgPyBmcm9udG1hdHRlci5wb3NpdGlvbi5zdGFydCA6IG51bGxcbiAgICBjb25zdCBlbmQgPSBmcm9udG1hdHRlciA/IGZyb250bWF0dGVyLnBvc2l0aW9uLmVuZCA6IG51bGxcbiAgICBjb25zdCBuZXdDb250ZW50ID0gY29udGVudC5tYXAoKGxpbmUsIGkpID0+IHtcbiAgICAgICAgaWYgKGZyb250bWF0dGVyICYmIGkgPj0gc3RhcnQubGluZSAmJiBpIDw9IGVuZC5saW5lKSB7XG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCR7YXR0cmlidXRlfTpgLCAndScpO1xuICAgICAgICAgICAgY29uc3QgciA9IGxpbmUubWF0Y2gocmVnZXgpO1xuICAgICAgICAgICAgaWYgKHIgJiYgci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0ID8gaW5wdXQucmVwbGFjZSgvKFxcLFxccyspL2csICcsJykuc3BsaXQoJywnKSA6IFtcIlwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGlucHV0QXJyYXkubGVuZ3RoID09IDEgPyBpbnB1dEFycmF5WzBdIDogYFske2lucHV0QXJyYXkuam9pbignLCAnKX1dYDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YXR0cmlidXRlfTogJHtuZXdWYWx1ZX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gaW5saW5lRmllbGRSZWdleChhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgY29uc3QgciA9IGxpbmUubWF0Y2gocmVnZXgpO1xuICAgICAgICAgICAgaWYgKHI/Lmdyb3VwcyAmJiBPYmplY3Qua2V5cyhyLmdyb3VwcykuZXZlcnkoaSA9PiBmaWVsZENvbXBvbmVudHMuaW5jbHVkZXMoaSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGFydFN0eWxlLCBlbmRTdHlsZSwgYmVmb3JlU2VwYXJhdG9yU3BhY2VyLCBhZnRlclNlcGFyYXRvclNwYWNlciwgdmFsdWVzIH0gPSByLmdyb3Vwc1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0QXJyYXkgPSBpbnB1dCA/IGlucHV0LnJlcGxhY2UoLyhcXCxcXHMrKS9nLCAnLCcpLnNwbGl0KCcsJykgOiBbXCJcIl07XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBpbnB1dEFycmF5Lmxlbmd0aCA9PSAxID8gaW5wdXRBcnJheVswXSA6IGAke2lucHV0QXJyYXkuam9pbignLCAnKX1gO1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzdGFydFN0eWxlfSR7YXR0cmlidXRlfSR7ZW5kU3R5bGV9JHtiZWZvcmVTZXBhcmF0b3JTcGFjZXJ9Ojoke2FmdGVyU2VwYXJhdG9yU3BhY2VyfSR7bmV3VmFsdWV9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGFwcC52YXVsdC5tb2RpZnkoZmlsZSwgbmV3Q29udGVudC5qb2luKCdcXG4nKSk7XG59IiwgImltcG9ydCB7IFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCJcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwiLi9yZXBsYWNlVmFsdWVzXCJcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIlxuXG5leHBvcnQgZnVuY3Rpb24gZmllbGRXaXRoTWVudShwbHVnaW46IE1ldGFkYXRhTWVudSwgZHY6IGFueSwgcDogYW55LCBmaWVsZE5hbWU6IHN0cmluZywgYXR0cnM/OiB7IGNsczogc3RyaW5nLCBhdHRyOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0pOiBIVE1MRWxlbWVudCB7XG4gICAgLyogZmllbGRDb250YWluZXIqL1xuICAgIGNvbnN0IGZpZWxkQ29udGFpbmVyOiBIVE1MRWxlbWVudCA9IGR2LmVsKFwiZGl2XCIsIFwiXCIpXG4gICAgZmllbGRDb250YWluZXIuc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1jb250YWluZXJcIilcblxuICAgIC8qIGZpZWxkICovXG4gICAgY29uc3QgZmllbGQgPSBkdi5lbCgnc3BhbicsIHBbZmllbGROYW1lXSwgYXR0cnMpXG5cbiAgICAvKiBlbmQgc3BhY2VyICovXG4gICAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgIHNwYWNlci5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLXNwYWNlclwiKVxuXG4gICAgLyogaW5wdXQgd2l0aCBidXR0b25zICovXG4gICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcbiAgICBpbnB1dC5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWlucHV0XCIpXG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gICAgaW5wdXQudmFsdWUgPSBwW2ZpZWxkTmFtZV1cbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dClcblxuICAgIGNvbnN0IHZhbGlkYXRlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gICAgdmFsaWRhdGVJY29uLnRleHRDb250ZW50ID0gXCJcdTI3MDVcIlxuICAgIHZhbGlkYXRlSWNvbi5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKVxuICAgIHZhbGlkYXRlSWNvbi5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbXCJmaWxlXCJdW1wicGF0aFwiXSlcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBmaWxlLmV4dGVuc2lvbiA9PSBcIm1kXCIpIHtcbiAgICAgICAgICAgIHJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgZmlsZSwgZmllbGROYW1lLCBpbnB1dC52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dENvbnRhaW5lcilcbiAgICB9XG4gICAgaW5wdXRDb250YWluZXI/LmFwcGVuZENoaWxkKHZhbGlkYXRlSWNvbilcbiAgICBjb25zdCBjYW5jZWxJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcbiAgICBjYW5jZWxJY29uLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpXG4gICAgY2FuY2VsSWNvbi50ZXh0Q29udGVudCA9IFwiXHUyNzRDXCJcbiAgICBjYW5jZWxJY29uLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dENvbnRhaW5lcilcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKVxuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChmaWVsZClcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoc3BhY2VyKVxuICAgIH1cbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChjYW5jZWxJY29uKVxuICAgIGlucHV0LmZvY3VzKClcblxuICAgIC8qIGJ1dHRvbiB0byBkaXNwbGF5IGlucHV0ICovXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgIGJ1dHRvbi5zZXRUZXh0KFwiXHVEODNEXHVERDhEXCIpXG4gICAgYnV0dG9uLnNldEF0dHIoJ2NsYXNzJywgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKVxuICAgIGJ1dHRvbi5oaWRlKClcbiAgICBzcGFjZXIuc2hvdygpXG4gICAgZmllbGRDb250YWluZXIub25tb3VzZW92ZXIgPSAoKSA9PiB7XG4gICAgICAgIGJ1dHRvbi5zaG93KClcbiAgICAgICAgc3BhY2VyLmhpZGUoKVxuICAgIH1cbiAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3V0ID0gKCkgPT4ge1xuICAgICAgICBidXR0b24uaGlkZSgpXG4gICAgICAgIHNwYWNlci5zaG93KClcbiAgICB9XG5cbiAgICBpbnB1dC5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbXCJmaWxlXCJdW1wicGF0aFwiXSlcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyhwbHVnaW4uYXBwLCBmaWxlLCBmaWVsZE5hbWUsIGlucHV0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoaW5wdXRDb250YWluZXIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoaW5wdXRDb250YWluZXIpXG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmQoYnV0dG9uKVxuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kKGZpZWxkKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyogbWFuYWdlICovXG4gICAgLyogaW5pdGlhbCBzdGF0ZSAqL1xuICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbilcbiAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChmaWVsZClcbiAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzcGFjZXIpXG5cbiAgICAvKiBidXR0b24gb24gY2xpY2sgOiByZW1vdmUgYnV0dG9uIGFuZCBmaWVsZCBhbmQgZGlzcGxheSBpbnB1dCBmaWVsZCovXG4gICAgYnV0dG9uLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChmaWVsZClcbiAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoYnV0dG9uKVxuICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzcGFjZXIpXG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0Q29udGFpbmVyKVxuICAgICAgICBpbnB1dC5mb2N1cygpXG4gICAgfVxuXG5cbiAgICByZXR1cm4gZmllbGRDb250YWluZXJcbn07ICIsICJpbXBvcnQgeyBBcHAsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCJcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIlxuaW1wb3J0IHsgZ2V0VmFsdWVzIH0gZnJvbSBcIi4vY29tbWFuZHMvZ2V0VmFsdWVzXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcIi4vY29tbWFuZHMvcmVwbGFjZVZhbHVlc1wiO1xuaW1wb3J0IHsgZmllbGRXaXRoTWVudSB9IGZyb20gXCIuL2NvbW1hbmRzL2ZpZWxkV2l0aE1lbnVcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXRhZGF0YU1lbnVBcGkge1xuICAgIGdldFZhbHVlczogKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgYXR0cmlidXRlOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nW10+O1xuICAgIHJlcGxhY2VWYWx1ZXM6IChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGF0dHJpYnV0ZTogc3RyaW5nLCBpbnB1dDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGZpZWxkV2l0aE1lbnU6IChkdjogYW55LCBwOiBhbnksIGZpZWxkTmFtZTogc3RyaW5nLCBhdHRycz86IHsgY2xzOiBzdHJpbmcsIGF0dHI6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfSkgPT4gSFRNTEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBNZXRhZGF0YU1lbnVBcGkge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnUpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFrZSgpOiBJTWV0YWRhdGFNZW51QXBpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFZhbHVlczogdGhpcy5nZXRWYWx1ZXMoKSxcbiAgICAgICAgICAgIHJlcGxhY2VWYWx1ZXM6IHRoaXMucmVwbGFjZVZhbHVlcygpLFxuICAgICAgICAgICAgZmllbGRXaXRoTWVudTogdGhpcy5maWVsZFdpdGhNZW51KClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFZhbHVlcygpOiAoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBhdHRyaWJ1dGU6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgYXR0cmlidXRlOiBzdHJpbmcpID0+IGdldFZhbHVlcyhhcHAsIGZpbGUsIGF0dHJpYnV0ZSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlcGxhY2VWYWx1ZXMoKTogKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgYXR0cmlidXRlOiBzdHJpbmcsIGlucHV0OiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgYXR0cmlidXRlOiBzdHJpbmcsIGlucHV0OiBzdHJpbmcpID0+IHJlcGxhY2VWYWx1ZXMoYXBwLCBmaWxlLCBhdHRyaWJ1dGUsIGlucHV0KVxuICAgIH1cblxuICAgIHByaXZhdGUgZmllbGRXaXRoTWVudSgpOiAoZHY6IGFueSwgcDogYW55LCBmaWVsZE5hbWU6IHN0cmluZywgYXR0cnM/OiB7IGNsczogc3RyaW5nLCBhdHRyOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0pID0+IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIChkdjogYW55LCBwOiBhbnksIGZpZWxkTmFtZTogc3RyaW5nLCBhdHRycz86IHsgY2xzOiBzdHJpbmcsIGF0dHI6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfSkgPT4gZmllbGRXaXRoTWVudSh0aGlzLnBsdWdpbiwgZHYsIHAsIGZpZWxkTmFtZSwgYXR0cnMpXG4gICAgfVxufSIsICJpbXBvcnQgeyBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IE9wdGlvbnNMaXN0IGZyb20gXCJzcmMvb3B0aW9ucy9PcHRpb25zTGlzdFwiO1xuaW1wb3J0IEZpbGVDbGFzc0F0dHJpYnV0ZVNlbGVjdE1vZGFsIGZyb20gXCJzcmMvZmlsZUNsYXNzL0ZpbGVDbGFzc0F0dHJpYnV0ZVNlbGVjdE1vZGFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGxpbmtDb250ZXh0TWVudSB7XG5cdHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG5cdHByaXZhdGUgZmlsZTogVEZpbGU7XG5cdHByaXZhdGUgb3B0aW9uc0xpc3Q6IE9wdGlvbnNMaXN0O1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51KSB7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5jcmVhdGVDb250ZXh0TWVudSgpO1xuXHR9O1xuXG5cdHByaXZhdGUgY3JlYXRlQ29udGV4dE1lbnUoKTogdm9pZCB7XG5cdFx0dGhpcy5wbHVnaW4ucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtbWVudScsIChtZW51LCBhYnN0cmFjdEZpbGUsIHNvdXJjZSkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnUgJiYgKFxuXHRcdFx0XHRcdHNvdXJjZSA9PT0gXCJsaW5rLWNvbnRleHQtbWVudVwiIHx8XG5cdFx0XHRcdFx0c291cmNlID09PSBcImNhbGVuZGFyLWNvbnRleHQtbWVudVwiIHx8XG5cdFx0XHRcdFx0c291cmNlID09PSAncGFuZS1tb3JlLW9wdGlvbnMnIHx8XG5cdFx0XHRcdFx0c291cmNlID09PSAnZmlsZS1leHBsb3Jlci1jb250ZXh0LW1lbnUnKSkge1xuXHRcdFx0XHRcdGNvbnN0IGZpbGUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGFic3RyYWN0RmlsZS5wYXRoKVxuXHRcdFx0XHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcblx0XHRcdFx0XHRcdHRoaXMuZmlsZSA9IGZpbGU7XG5cdFx0XHRcdFx0XHRpZiAoZmlsZS5wYXJlbnQucGF0aCArIFwiL1wiID09IHRoaXMucGx1Z2luLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoKSB7XG5cdFx0XHRcdFx0XHRcdG1lbnUuYWRkU2VwYXJhdG9yKCk7XG5cdFx0XHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uc2V0SWNvbihcImdlYXJcIik7XG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5zZXRUaXRsZShgTWFuYWdlIDwke2ZpbGUuYmFzZW5hbWV9PiBmaWVsZHNgKTtcblx0XHRcdFx0XHRcdFx0XHRpdGVtLm9uQ2xpY2soKGV2dCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgZmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwgPSBuZXcgRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwodGhpcy5wbHVnaW4sIGZpbGUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwub3BlbigpO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMub3B0aW9uc0xpc3QgPSBuZXcgT3B0aW9uc0xpc3QodGhpcy5wbHVnaW4sIHRoaXMuZmlsZSwgbWVudSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMub3B0aW9uc0xpc3QuY3JlYXRlRXh0cmFPcHRpb25MaXN0KCk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9KVxuXHRcdCk7XG5cdH07XG59OyIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUb2dnbGVDb21wb25lbnQsIFRGaWxlLCBCdXR0b25Db21wb25lbnQsIEV4dHJhQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9GaWVsZFwiO1xuaW1wb3J0IHsgcmVwbGFjZVZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvcmVwbGFjZVZhbHVlc1wiO1xuaW1wb3J0IEZpZWxkU2V0dGluZyBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB2YWx1ZU11bHRpU2VsZWN0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgc2V0dGluZ3M6IEZpZWxkO1xuICAgIHByaXZhdGUgdmFsdWVzOiBBcnJheTxzdHJpbmc+O1xuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRvcDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgbmFtZTogc3RyaW5nLCBpbml0aWFsVmFsdWVzOiBzdHJpbmcsIHNldHRpbmdzOiBGaWVsZCwgbGluZU51bWJlcjogbnVtYmVyID0gLTEsIGluRnJvbnRNYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZSwgdG9wOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChpbml0aWFsVmFsdWVzLnRvU3RyaW5nKCkuc3RhcnRzV2l0aChcIltbXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSBpbml0aWFsVmFsdWVzLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gaW5pdGlhbFZhbHVlcy50b1N0cmluZygpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIikuc3BsaXQoXCIsXCIpLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICB9O1xuICAgICAgICAvL3RoaXMudmFsdWVzID0gaW5pdGlhbFZhbHVlcyA/IGluaXRpYWxWYWx1ZXMudG9TdHJpbmcoKS5yZXBsYWNlKC9eXFxbKC4qKVxcXSQvLCBcIiQxXCIpLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSkgOiBbXVxuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBpbkZyb250TWF0dGVyO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICB9O1xuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudVwiKTtcblxuICAgICAgICBjb25zdCB2YWx1ZUdyaWQgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtZ3JpZFwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsaXN0Tm90ZVZhbHVlcyA9IGF3YWl0IEZpZWxkU2V0dGluZy5nZXRWYWx1ZXNMaXN0RnJvbU5vdGUodGhpcy5zZXR0aW5ncy52YWx1ZXNMaXN0Tm90ZVBhdGgsIHRoaXMuYXBwKVxuICAgICAgICBhd2FpdCB0aGlzLnBvcHVsYXRlVmFsdWVzR3JpZCh2YWx1ZUdyaWQsIGxpc3ROb3RlVmFsdWVzKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhc3luYyBwb3B1bGF0ZVZhbHVlc0dyaWQodmFsdWVHcmlkOiBIVE1MRGl2RWxlbWVudCwgbGlzdE5vdGVWYWx1ZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChsaXN0Tm90ZVZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc2V0dGluZ3MudmFsdWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlc2V0VmFsdWUgPSB0aGlzLnNldHRpbmdzLnZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRWYWx1ZVRvZ2dsZXIodmFsdWVHcmlkLCBwcmVzZXRWYWx1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBsaXN0Tm90ZVZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRWYWx1ZVRvZ2dsZXIodmFsdWVHcmlkLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmb290ZXIgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1ncmlkLWZvb3RlclwiIH0pO1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChmb290ZXIpO1xuICAgICAgICBzYXZlQnV0dG9uLnNldEljb24oXCJjaGVja21hcmtcIik7XG4gICAgICAgIHNhdmVCdXR0b24ub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5saW5lTnVtYmVyID09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLm5hbWUsIHRoaXMudmFsdWVzLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmZpbGUpXG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudG9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChgJHt0aGlzLm5hbWV9JHt0aGlzLmluRnJvbnRtYXR0ZXIgPyBcIjpcIiA6IFwiOjpcIn0gJHt0aGlzLnZhbHVlcy5qb2luKFwiLFwiKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNwbGl0KFwiXFxuXCIpLmZvckVhY2goKGxpbmUsIF9saW5lTnVtYmVyKSA9PiBuZXdDb250ZW50LnB1c2gobGluZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpdChcIlxcblwiKS5mb3JFYWNoKChsaW5lLCBfbGluZU51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9saW5lTnVtYmVyID09IHRoaXMubGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChgJHt0aGlzLm5hbWV9JHt0aGlzLmluRnJvbnRtYXR0ZXIgPyBcIjpcIiA6IFwiOjpcIn0gJHt0aGlzLnZhbHVlcy5qb2luKFwiLFwiKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5tb2RpZnkodGhpcy5maWxlLCBuZXdDb250ZW50LmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoZm9vdGVyKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBidWlsZFZhbHVlVG9nZ2xlcih2YWx1ZUdyaWQ6IEhUTUxEaXZFbGVtZW50LCBwcmVzZXRWYWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlU2VsZWN0b3JDb250YWluZXIgPSB2YWx1ZUdyaWQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLXNlbGVjdG9yLWNvbnRhaW5lclwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZVRvZ2dsZXJDb250YWluZXIgPSB2YWx1ZVNlbGVjdG9yQ29udGFpbmVyLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci10b2dnbGVyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZhbHVlVG9nZ2xlciA9IG5ldyBUb2dnbGVDb21wb25lbnQodmFsdWVUb2dnbGVyQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy52YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gcHJlc2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVRvZ2dsZXIuc2V0VmFsdWUodHJ1ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZVRvZ2dsZXIub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLnZhbHVlcy5pbmNsdWRlcyhwcmVzZXRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHByZXNldFZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMucmVtb3ZlKHByZXNldFZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZUxhYmVsID0gdmFsdWVTZWxlY3RvckNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci1sYWJlbFwiIH0pO1xuICAgICAgICB2YWx1ZUxhYmVsLnNldFRleHQocHJlc2V0VmFsdWUpO1xuICAgIH07XG59OyIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUZXh0Q29tcG9uZW50LCBURmlsZSwgVG9nZ2xlQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHZhbHVlVGV4dElucHV0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB0b3A6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBwYXJzZURhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBsaW5lTnVtYmVyOiBudW1iZXIgPSAtMSwgaW5Gcm9udE1hdHRlcjogYm9vbGVhbiA9IGZhbHNlLCB0b3A6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBpbkZyb250TWF0dGVyO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICB9O1xuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCBpbnB1dERpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LW1vZGFsLXZhbHVlXCIgfSk7XG4gICAgICAgIHRoaXMuYnVpbGRJbnB1dEVsKGlucHV0RGl2KTtcbiAgICB9O1xuXG4gICAgYnVpbGREYXRlUGFyc2VUb2dnbGVyKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGlmIChhcHAucGx1Z2lucy5wbHVnaW5zLmhhc093blByb3BlcnR5KCdubGRhdGVzLW9ic2lkaWFuJykpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgbmxkYXRlcyA9IGFwcC5wbHVnaW5zLnBsdWdpbnNbJ25sZGF0ZXMtb2JzaWRpYW4nXTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVQYXJzZXJMYWJlbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgIGNsczogXCJtZXRhZGF0YS1tZW51LWRhdGUtcGFyc2VyLWxhYmVsXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGF0ZVBhcnNlckxhYmVsLnNldFRleHQoXCJcdUQ4M0RcdURDQzZcIik7XG4gICAgICAgICAgICBjb25zdCBkYXRlUGFyc2VyVG9nZ2xlciA9IG5ldyBUb2dnbGVDb21wb25lbnQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGRhdGVQYXJzZXJUb2dnbGVyLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlRGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkYXRlUGFyc2VyTGFiZWwub25jbGljayA9ICgpID0+IGRhdGVQYXJzZXJUb2dnbGVyLnNldFZhbHVlKCF0aGlzLnBhcnNlRGF0ZSk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgYnVpbGRJbnB1dEVsKGlucHV0RGl2OiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ1aWxkRGF0ZVBhcnNlVG9nZ2xlcihpbnB1dERpdik7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBpbnB1dERpdi5jcmVhdGVFbChcImZvcm1cIik7XG4gICAgICAgIGZvcm0udHlwZSA9IFwic3VibWl0XCI7XG5cbiAgICAgICAgY29uc3QgaW5wdXRFbCA9IG5ldyBUZXh0Q29tcG9uZW50KGZvcm0pO1xuICAgICAgICBpbnB1dEVsLmlucHV0RWwuZm9jdXMoKTtcbiAgICAgICAgaW5wdXRFbC5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaW5wdXRFbC5pbnB1dEVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1wcm9tcHQtaW5wdXRcIik7XG5cbiAgICAgICAgZm9ybS5vbnN1Ym1pdCA9IGFzeW5jIChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IGlucHV0VmFsdWUgPSBpbnB1dEVsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChhcHAucGx1Z2lucy5wbHVnaW5zLmhhc093blByb3BlcnR5KCdubGRhdGVzLW9ic2lkaWFuJykgJiYgdGhpcy5wYXJzZURhdGUpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBjb25zdCBubGRhdGVzID0gYXBwLnBsdWdpbnMucGx1Z2luc1snbmxkYXRlcy1vYnNpZGlhbiddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IG5sZGF0ZXMuc2V0dGluZ3MuZm9ybWF0O1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0U3RhcnQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0RW5kID0gXCJcIjtcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSBpbnB1dEVsLmlucHV0RWwuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRW5kID0gaW5wdXRFbC5pbnB1dEVsLnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uRW5kID09IHNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBubGRhdGVzLnBhcnNlRGF0ZShpbnB1dEVsLmdldFZhbHVlKCkpLm1vbWVudC5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0U3RhcnQgPSBpbnB1dEVsLmdldFZhbHVlKCkuc2xpY2UoMCwgc2VsZWN0aW9uU3RhcnQhKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5sZGF0ZXMucGFyc2VEYXRlKGlucHV0RWwuZ2V0VmFsdWUoKS5zbGljZShzZWxlY3Rpb25TdGFydCEsIHNlbGVjdGlvbkVuZCEpKS5tb21lbnQuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRFbmQgPSBpbnB1dEVsLmdldFZhbHVlKCkuc2xpY2Uoc2VsZWN0aW9uRW5kISk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdGV4dFN0YXJ0ICsgXCJbW1wiICsgZGF0ZSArIFwiXV1cIiArIHRleHRFbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saW5lTnVtYmVyID09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLm5hbWUsIGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKHRoaXMuZmlsZSlcbiAgICAgICAgICAgICAgICBsZXQgbmV3Q29udGVudDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGAke3RoaXMubmFtZX0ke3RoaXMuaW5Gcm9udG1hdHRlciA/IFwiOlwiIDogXCI6OlwifSAke2lucHV0VmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpdChcIlxcblwiKS5mb3JFYWNoKChsaW5lLCBfbGluZU51bWJlcikgPT4gbmV3Q29udGVudC5wdXNoKGxpbmUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3BsaXQoXCJcXG5cIikuZm9yRWFjaCgobGluZSwgX2xpbmVOdW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbGluZU51bWJlciA9PSB0aGlzLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250ZW50LnB1c2goYCR7dGhpcy5uYW1lfSR7dGhpcy5pbkZyb250bWF0dGVyID8gXCI6XCIgOiBcIjo6XCJ9ICR7aW5wdXRWYWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQubW9kaWZ5KHRoaXMuZmlsZSwgbmV3Q29udGVudC5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfTtcblxuICAgIH07XG59OyIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUb2dnbGVDb21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHZhbHVlVG9nZ2xlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgdmFsdWU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZmlsZTogVEZpbGUsIG5hbWU6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCBpbnB1dERpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwibWV0YWRhdGEtbWVudS10b2dnbGVyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnVpbGRJbnB1dEVsKGlucHV0RGl2KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBidWlsZElucHV0RWwoaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlucHV0RWwgPSBuZXcgVG9nZ2xlQ29tcG9uZW50KGlucHV0RGl2KTtcbiAgICAgICAgaW5wdXRFbC5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaW5wdXRFbC5vbkNoYW5nZSh2ID0+IHtcbiAgICAgICAgICAgIHJlcGxhY2VWYWx1ZXModGhpcy5hcHAsIHRoaXMuZmlsZSwgdGhpcy5uYW1lLCB2ID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTsiLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgRHJvcGRvd25Db21wb25lbnQsIFRGaWxlLCBCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL0ZpZWxkXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmllbGRTZXR0aW5nIGZyb20gXCJzcmMvc2V0dGluZ3MvRmllbGRTZXR0aW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHZhbHVlVG9nZ2xlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIHNldHRpbmdzOiBGaWVsZDtcbiAgICBwcml2YXRlIG5ld1ZhbHVlOiBzdHJpbmcgfCBudWxsO1xuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRvcDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBzZXR0aW5nczogRmllbGQsIGxpbmVOdW1iZXI6IG51bWJlciA9IC0xLCBpbkZyb250TWF0dGVyOiBib29sZWFuID0gZmFsc2UsIHRvcDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRNYXR0ZXI7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgIH07XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51XCIpO1xuICAgICAgICBjb25zdCBpbnB1dERpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LW1vZGFsLXZhbHVlXCIgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMuYnVpbGRJbnB1dEVsKGlucHV0RGl2KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhc3luYyBidWlsZElucHV0RWwoaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdEVsID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KGlucHV0RGl2KTtcbiAgICAgICAgc2VsZWN0RWwuc2VsZWN0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXNlbGVjdFwiKTtcblxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnNldHRpbmdzLnZhbHVlcztcbiAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKFwiXCIsIFwiLS1FbXB0eS0tXCIpO1xuICAgICAgICBjb25zdCBsaXN0Tm90ZVZhbHVlcyA9IGF3YWl0IEZpZWxkU2V0dGluZy5nZXRWYWx1ZXNMaXN0RnJvbU5vdGUodGhpcy5zZXR0aW5ncy52YWx1ZXNMaXN0Tm90ZVBhdGgsIHRoaXMuYXBwKVxuICAgICAgICBsaXN0Tm90ZVZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHNlbGVjdEVsLmFkZE9wdGlvbih2YWx1ZSwgdmFsdWUpKTtcbiAgICAgICAgaWYgKGxpc3ROb3RlVmFsdWVzLmluY2x1ZGVzKHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICBzZWxlY3RFbC5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxpc3ROb3RlVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKHZhbHVlc1trZXldLCB2YWx1ZXNba2V5XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKHZhbHVlcykuaW5jbHVkZXModGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RFbC5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0RWwub25DaGFuZ2UodmFsdWUgPT4gdGhpcy5uZXdWYWx1ZSA9IHZhbHVlICE9IFwiLS1FbXB0eS0tXCIgPyB2YWx1ZSA6IFwiXCIpO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGlucHV0RGl2KTtcbiAgICAgICAgc3VibWl0QnV0dG9uLnNldFRvb2x0aXAoXCJTYXZlXCIpXG4gICAgICAgICAgICAuc2V0SWNvbihcImNoZWNrbWFya1wiKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmV3VmFsdWUgfHwgdGhpcy5uZXdWYWx1ZSA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlVmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMubmFtZSwgdGhpcy5uZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmZpbGUpXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdDb250ZW50OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChgJHt0aGlzLm5hbWV9JHt0aGlzLmluRnJvbnRtYXR0ZXIgPyBcIjpcIiA6IFwiOjpcIn0gJHtzZWxlY3RFbC5nZXRWYWx1ZSgpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNwbGl0KFwiXFxuXCIpLmZvckVhY2goKGxpbmUsIF9saW5lTnVtYmVyKSA9PiBuZXdDb250ZW50LnB1c2gobGluZSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNwbGl0KFwiXFxuXCIpLmZvckVhY2goKGxpbmUsIF9saW5lTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbGluZU51bWJlciA9PSB0aGlzLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGAke3RoaXMubmFtZX0ke3RoaXMuaW5Gcm9udG1hdHRlciA/IFwiOlwiIDogXCI6OlwifSAke3NlbGVjdEVsLmdldFZhbHVlKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5tb2RpZnkodGhpcy5maWxlLCBuZXdDb250ZW50LmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbn07IiwgImltcG9ydCB7IE1vZGFsLCBEcm9wZG93bkNvbXBvbmVudCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBmaWVsZFNlbGVjdE1vZGFsIGZyb20gXCIuL2ZpZWxkU2VsZWN0TW9kYWxcIjtcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY2hvb3NlU2VjdGlvbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXG4gICAgcHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudTtcbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBNZXRhZGF0YU1lbnUsIGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9O1xuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChcIkFkZCBhIGZpZWxkIGluIHRoaXMgbm90ZSBhZnRlcjpcIik7XG4gICAgICAgIGNvbnN0IGlucHV0RGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbW9kYWwtdmFsdWVcIiB9KTtcblxuICAgICAgICBjb25zdCBzZWxlY3RFbCA9IG5ldyBEcm9wZG93bkNvbXBvbmVudChpbnB1dERpdik7XG4gICAgICAgIHNlbGVjdEVsLnNlbGVjdEVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1zZWxlY3RcIik7XG4gICAgICAgIHNlbGVjdEVsLmFkZE9wdGlvbihcIlwiLCBcIlNlbGVjdCBsaW5lXCIpO1xuICAgICAgICBzZWxlY3RFbC5hZGRPcHRpb24oXCJ0b3BfMFwiLCBcInRvcFwiKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmZpbGUpXG4gICAgICAgIGxldCBmb3JlSGVhZFRleHQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGZyb250bWF0dGVyU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGZyb250bWF0dGVyRW5kID0gZmFsc2U7XG4gICAgICAgIGxldCBpbkZyb250bWF0dGVyID0gZmFsc2U7XG4gICAgICAgIHJlc3VsdC5zcGxpdChcIlxcblwiKS5mb3JFYWNoKChsaW5lLCBsaW5lTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAobGluZSAhPSBcIi0tLVwiICYmICFmb3JlSGVhZFRleHQgJiYgIWZyb250bWF0dGVyU3RhcnQpIHtcbiAgICAgICAgICAgICAgICBmb3JlSGVhZFRleHQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChsaW5lID09IFwiLS0tXCIgJiYgIWZvcmVIZWFkVGV4dCkge1xuICAgICAgICAgICAgICAgIGlmICghZnJvbnRtYXR0ZXJTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBmcm9udG1hdHRlclN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5Gcm9udG1hdHRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZnJvbnRtYXR0ZXJFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXJFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbkZyb250bWF0dGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbkZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKGBmcm9udG1hdHRlcl8ke2xpbmVOdW1iZXJ9YCwgYCR7bGluZS5zdWJzdHJpbmcoMCwgMzApfSR7bGluZS5sZW5ndGggPiAzMCA/IFwiLi4uXCIgOiBcIlwifWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RFbC5hZGRPcHRpb24oYGJvZHlfJHtsaW5lTnVtYmVyfWAsIGAke2xpbmUuc3Vic3RyaW5nKDAsIDMwKX0ke2xpbmUubGVuZ3RoID4gMzAgPyBcIi4uLlwiIDogXCJcIn1gKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxlY3RFbC5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUFycmF5ID0gc2VsZWN0RWwuZ2V0VmFsdWUoKS5tYXRjaCgvKFxcdyspXyhcXGQrKS8pO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB2YWx1ZUFycmF5ICYmIHZhbHVlQXJyYXkubGVuZ3RoID4gMCA/IHZhbHVlQXJyYXlbMV0gOiAwO1xuICAgICAgICAgICAgY29uc3QgbGluZU51bWJlciA9IE51bWJlcih2YWx1ZUFycmF5ICYmIHZhbHVlQXJyYXkubGVuZ3RoID4gMSA/IHZhbHVlQXJyYXlbMl0gOiAwKTtcbiAgICAgICAgICAgIGNvbnN0IGluRnJvbnRtYXR0ZXIgPSBwb3NpdGlvbiA9PSBcImZyb250bWF0dGVyXCIgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSBwb3NpdGlvbiA9PSBcInRvcFwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgZmllbGRTZWxlY3RNb2RhbCh0aGlzLnBsdWdpbiwgdGhpcy5maWxlLCBsaW5lTnVtYmVyLCByZXN1bHQuc3BsaXQoJ1xcbicpW2xpbmVOdW1iZXJdLCBpbkZyb250bWF0dGVyLCB0b3ApO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTsiLCAiaW1wb3J0IHsgTW9kYWwsIERyb3Bkb3duQ29tcG9uZW50LCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IGFkZE5ld0ZpZWxkTW9kYWwgZnJvbSBcIi4vYWRkTmV3RmllbGRNb2RhbFwiO1xuaW1wb3J0IHZhbHVlVGV4dElucHV0TW9kYWwgZnJvbSBcIi4vdmFsdWVUZXh0SW5wdXRNb2RhbFwiO1xuaW1wb3J0IHZhbHVlU2VsZWN0TW9kYWwgZnJvbSBcIi4vdmFsdWVTZWxlY3RNb2RhbFwiO1xuaW1wb3J0IHZhbHVlTXVsdGlTZWxlY3RNb2RhbCBmcm9tIFwiLi92YWx1ZU11bHRpU2VsZWN0TW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZmllbGRTZWxlY3RNb2RhbCBleHRlbmRzIE1vZGFsIHtcblxuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgbGluZTogc3RyaW5nO1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB0b3A6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE1ldGFkYXRhTWVudSwgZmlsZTogVEZpbGUsIGxpbmVOdW1iZXI6IG51bWJlciwgbGluZTogc3RyaW5nLCBpbkZyb250bWF0dGVyOiBib29sZWFuLCB0b3A6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBpbkZyb250bWF0dGVyO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICB9O1xuXG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgSW5zZXJ0IGZpZWxkIGFmdGVyID4gJHt0aGlzLmxpbmUuc3Vic3RyaW5nKDAsIDIwKX0ke3RoaXMubGluZS5sZW5ndGggPiAyMCA/IFwiLi4uXCIgOiBcIlwifWApO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS1maWVsZC1zZWxlY3RcIiB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNldHRpbmdzRHJvcGRvd25Db250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzU2VsZWN0b3IgPSBuZXcgRHJvcGRvd25Db21wb25lbnQoc2V0dGluZ3NEcm9wZG93bkNvbnRhaW5lcik7XG4gICAgICAgIHNldHRpbmdzU2VsZWN0b3IuYWRkT3B0aW9uKFwiLS0tXCIsIFwiQ2hvb3NlIEZpZWxkXCIpO1xuICAgICAgICBzZXR0aW5nc1NlbGVjdG9yLmFkZE9wdGlvbihcIisrTmV3XCIsIFwiTmV3XCIpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlc2V0RmllbGRzLmZvckVhY2goc2V0dGluZyA9PiB7XG4gICAgICAgICAgICBzZXR0aW5nc1NlbGVjdG9yLmFkZE9wdGlvbihzZXR0aW5nLm5hbWUsIHNldHRpbmcubmFtZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldHRpbmdzU2VsZWN0b3Iub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiKytOZXdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0ZpZWxkTW9kYWwgPSBuZXcgYWRkTmV3RmllbGRNb2RhbCh0aGlzLnBsdWdpbiwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmZpbGUsIHRoaXMuaW5Gcm9udG1hdHRlciwgdGhpcy50b3ApO1xuICAgICAgICAgICAgICAgIG5ld0ZpZWxkTW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZmlsdGVyKF9maWVsZCA9PiBfZmllbGQubmFtZSA9PSB2YWx1ZSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCB8fCAoZmllbGQudmFsdWVzICYmIE9iamVjdC5rZXlzKGZpZWxkLnZhbHVlcykubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzTXVsdGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgdmFsdWVNdWx0aVNlbGVjdE1vZGFsKHRoaXMuYXBwLCB0aGlzLmZpbGUsIGZpZWxkLm5hbWUsIFwiXCIsIGZpZWxkLCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5Gcm9udG1hdHRlciwgdGhpcy50b3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRNb2RhbC50aXRsZUVsLnNldFRleHQoYFNlbGVjdCB2YWx1ZXMgZm9yICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgdmFsdWVTZWxlY3RNb2RhbCh0aGlzLmFwcCwgdGhpcy5maWxlLCBmaWVsZC5uYW1lLCBcIlwiLCBmaWVsZCwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluRnJvbnRtYXR0ZXIsIHRoaXMudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTW9kYWwudGl0bGVFbC5zZXRUZXh0KGBTZWxlY3QgdmFsdWUgZm9yICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZE1vZGFsID0gbmV3IHZhbHVlVGV4dElucHV0TW9kYWwodGhpcy5hcHAsIHRoaXMuZmlsZSwgdmFsdWUsIFwiXCIsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLnRvcCk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkTW9kYWwudGl0bGVFbC5zZXRUZXh0KGBFbnRlciB2YWx1ZSBmb3IgJHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRNb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xufTsiLCAiaW1wb3J0IHsgTW9kYWwsIFRleHRDb21wb25lbnQsIEJ1dHRvbkNvbXBvbmVudCwgRXh0cmFCdXR0b25Db21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGFkZE5ld0ZpZWxkTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRvcDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCBsaW5lTnVtYmVyOiBudW1iZXIsIGZpbGU6IFRGaWxlLCBpbkZyb250bWF0dGVyOiBib29sZWFuLCB0b3A6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRtYXR0ZXI7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoXCJJbnNlcnQgbmV3IGZpZWxkXCIpO1xuICAgICAgICBjb25zdCBhZGROZXdGaWVsZENvbnRhaW5lciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpO1xuICAgICAgICBjb25zdCBuYW1lSW5wdXRDb250YWluZXIgPSBhZGROZXdGaWVsZENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgbmFtZUlucHV0Q29udGFpbmVyLnNldFRleHQoXCJGaWVsZCBOYW1lOiBcIik7XG4gICAgICAgIGNvbnN0IG5hbWVJbnB1dEVsID0gbmV3IFRleHRDb21wb25lbnQobmFtZUlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgbmFtZUlucHV0RWwuc2V0UGxhY2Vob2xkZXIoXCJGaWVsZCBuYW1lXCIpO1xuICAgICAgICBjb25zdCB2YWx1ZUlucHV0Q29udGFpbmVyID0gYWRkTmV3RmllbGRDb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgIHZhbHVlSW5wdXRDb250YWluZXIuc2V0VGV4dChcIkZpZWxkIHZhbHVlOiBcIik7XG4gICAgICAgIGNvbnN0IHZhbHVlSW5wdXRFbCA9IG5ldyBUZXh0Q29tcG9uZW50KHZhbHVlSW5wdXRDb250YWluZXIpO1xuICAgICAgICB2YWx1ZUlucHV0RWwuc2V0UGxhY2Vob2xkZXIoXCJGaWVsZCB2YWx1ZVwiKTtcbiAgICAgICAgY29uc3QgZm9vdGVyQnV0dG9ucyA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6ICdtZXRhZGF0YS1tZW51LXRleHRhcmVhLWJ1dHRvbnMnXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChmb290ZXJCdXR0b25zKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpO1xuICAgICAgICBzYXZlQnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmZpbGUpXG4gICAgICAgICAgICBsZXQgbmV3Q29udGVudDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRvcCkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChgJHtuYW1lSW5wdXRFbC5nZXRWYWx1ZSgpfSR7dGhpcy5pbkZyb250bWF0dGVyID8gXCI6XCIgOiBcIjo6XCJ9ICR7dmFsdWVJbnB1dEVsLmdldFZhbHVlKCl9YCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNwbGl0KFwiXFxuXCIpLmZvckVhY2goKGxpbmUsIF9saW5lTnVtYmVyKSA9PiBuZXdDb250ZW50LnB1c2gobGluZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3BsaXQoXCJcXG5cIikuZm9yRWFjaCgobGluZSwgX2xpbmVOdW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2xpbmVOdW1iZXIgPT0gdGhpcy5saW5lTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250ZW50LnB1c2goYCR7bmFtZUlucHV0RWwuZ2V0VmFsdWUoKX0ke3RoaXMuaW5Gcm9udG1hdHRlciA/IFwiOlwiIDogXCI6OlwifSAke3ZhbHVlSW5wdXRFbC5nZXRWYWx1ZSgpfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5tb2RpZnkodGhpcy5maWxlLCBuZXdDb250ZW50LmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChmb290ZXJCdXR0b25zKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcblxuXG4gICAgfTtcbn07IiwgImltcG9ydCBGaWVsZCBmcm9tIFwic3JjL0ZpZWxkXCI7XG5pbXBvcnQgeyBnZW5lcmljRmllbGRSZWdleCB9IGZyb20gXCJzcmMvdXRpbHMvcGFyc2VyXCI7XG5cbmludGVyZmFjZSBGaWxlQ2xhc3NBdHRyaWJ1dGUge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgb3B0aW9uczogc3RyaW5nW107XG4gICAgaXNNdWx0aTogYm9vbGVhbjtcbiAgICBpc0N5Y2xlOiBib29sZWFuO1xufVxuXG5jb25zdCB0eXBlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICBcImlucHV0XCI6IFwiQWNjZXB0cyBhbnkgdmFsdWVcIixcbiAgICBcInNlbGVjdFwiOiBcIkFjY2VwdHMgYSBzaW5nbGUgdmFsdWUgZnJvbSBhIGxpc3RcIixcbiAgICBcIm11bHRpXCI6IFwiQWNjZXB0cyBtdWx0aXBsZSB2YWx1ZXMgZnJvbSBhIGxpc3RcIixcbiAgICBcImN5Y2xlXCI6IFwiQ3ljbGUgdGhyb3VnaCB2YWx1ZXMgZnJvbSBhIGxpc3RcIlxufVxuXG5jbGFzcyBGaWxlQ2xhc3NBdHRyaWJ1dGUge1xuXG4gICAgY29uc3RydWN0b3IocmF3OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY29tcGxldGVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2dlbmVyaWNGaWVsZFJlZ2V4fTo6KD88ZmllbGRTZXR0aW5ncz4uKyk/YCwgXCJ1XCIpO1xuICAgICAgICBjb25zdCBuYW1lUmVnZXggPSBuZXcgUmVnRXhwKGBeJHtnZW5lcmljRmllbGRSZWdleH0kYCwgXCJ1XCIpO1xuICAgICAgICBsZXQgZmllbGROYW1lOiBzdHJpbmdcbiAgICAgICAgbGV0IHsgYXR0cmlidXRlLCBmaWVsZFNldHRpbmdzIH0gPSByYXcubWF0Y2goY29tcGxldGVSZWdleCk/Lmdyb3VwcyB8fCB7fVxuICAgICAgICBpZiAoYXR0cmlidXRlKSB7XG4gICAgICAgICAgICBmaWVsZE5hbWUgPSBhdHRyaWJ1dGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB7IGF0dHJpYnV0ZSB9ID0gcmF3Lm1hdGNoKG5hbWVSZWdleCk/Lmdyb3VwcyB8fCB7fVxuICAgICAgICAgICAgZmllbGROYW1lID0gYXR0cmlidXRlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gYXR0cmlidXRlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChmaWVsZFNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBKU09OLnBhcnNlKGAke2ZpZWxkU2V0dGluZ3MudHJpbSgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHNldHRpbmdzWyd0eXBlJ107XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm11bHRpXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTXVsdGkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjeWNsZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0N5Y2xlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHNldHRpbmdzWydvcHRpb25zJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkltcHJvcGVyIHZhbHVlXCIpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RmllbGQoKSB7XG4gICAgICAgIGxldCB2YWx1ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2goKG9wdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBvcHRpb247XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBuZXcgRmllbGQodGhpcy5uYW1lLCB2YWx1ZXMsIHRoaXMubmFtZSwgdGhpcy5pc011bHRpLCB0aGlzLmlzQ3ljbGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRmlsZUNsYXNzQXR0cmlidXRlLCB0eXBlcyB9OyIsICJpbXBvcnQgeyBGaWxlQ2xhc3NBdHRyaWJ1dGUgfSBmcm9tIFwiLi9maWxlQ2xhc3NBdHRyaWJ1dGVcIjtcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmludGVyZmFjZSBGaWxlQ2xhc3Mge1xuICAgIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhdHRyaWJ1dGVzOiBBcnJheTxGaWxlQ2xhc3NBdHRyaWJ1dGU+O1xuICAgIG9iamVjdHM6IEZpbGVDbGFzc01hbmFnZXI7XG4gICAgZXJyb3JzOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgRmlsZUNsYXNzTWFuYWdlciB7XG4gICAgcHVibGljIGluc3RhbmNlOiBGaWxlQ2xhc3M7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnN0YW5jZTogRmlsZUNsYXNzKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWxsKCkge1xuICAgICAgICBjb25zdCBmaWxlc1dpdGhGaWxlQ2xhc3NOYW1lID0gdGhpcy5pbnN0YW5jZS5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maWx0ZXIoZmlsZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuaW5zdGFuY2UucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc0FsaWFzID0gdGhpcy5pbnN0YW5jZS5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXM7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGU/LmZyb250bWF0dGVyXG4gICAgICAgICAgICAgICAgJiYgT2JqZWN0LmtleXMoY2FjaGUuZnJvbnRtYXR0ZXIpLmluY2x1ZGVzKGZpbGVDbGFzc0FsaWFzKVxuICAgICAgICAgICAgICAgICYmIGNhY2hlLmZyb250bWF0dGVyW2ZpbGVDbGFzc0FsaWFzXSA9PSB0aGlzLmluc3RhbmNlLm5hbWU7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmaWxlc1dpdGhGaWxlQ2xhc3NOYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzV2l0aE5hbWUgPSB0aGlzLmFsbCgpLmZpbHRlcihmaWxlID0+IGZpbGUuYmFzZW5hbWUgPT0gbmFtZSk7XG4gICAgICAgIGlmIChmaWxlc1dpdGhOYW1lLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTW9yZSB0aGFuIG9uZSB2YWx1ZSBmb3VuZFwiKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlc1dpdGhOYW1lLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIk5vIGZpbGUgdmFsdWUgZm91bmRcIik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZXNXaXRoTmFtZVswXTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQYXRoKHBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmaWxlc1dpdGhOYW1lID0gdGhpcy5hbGwoKS5maWx0ZXIoZmlsZSA9PiBmaWxlLnBhdGggPT0gcGF0aCk7XG4gICAgICAgIGlmIChmaWxlc1dpdGhOYW1lLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTW9yZSB0aGFuIG9uZSB2YWx1ZSBmb3VuZFwiKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlc1dpdGhOYW1lLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIk5vIGZpbGUgdmFsdWUgZm91bmRcIik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZXNXaXRoTmFtZVswXTtcblxuICAgIH1cbn1cblxuY2xhc3MgRmlsZUNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE1ldGFkYXRhTWVudSwgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm9iamVjdHMgPSBuZXcgRmlsZUNsYXNzTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIGdldENsYXNzRmlsZSgpOiBURmlsZSB7XG4gICAgICAgIGNvbnN0IGZpbGVzQ2xhc3NQYXRoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGg7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2ZpbGVzQ2xhc3NQYXRofSR7dGhpcy5uYW1lfS5tZGApO1xuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIm5vIHN1Y2ggZmlsZUNsYXNzIGluIGZpbGVDbGFzcyBmb2xkZXJcIik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRBdHRyaWJ1dGVzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0Q2xhc3NGaWxlKCk7XG4gICAgICAgICAgICBsZXQgYXR0cmlidXRlczogQXJyYXk8RmlsZUNsYXNzQXR0cmlidXRlPiA9IFtdO1xuICAgICAgICAgICAgbGV0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpXG4gICAgICAgICAgICByZXN1bHQuc3BsaXQoJ1xcbicpLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gbmV3IEZpbGVDbGFzc0F0dHJpYnV0ZShsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZUF0dHJpYnV0ZShuZXdUeXBlOiBzdHJpbmcsIG5ld09wdGlvbnM6IHN0cmluZ1tdLCBuZXdOYW1lOiBzdHJpbmcsIGF0dHI/OiBGaWxlQ2xhc3NBdHRyaWJ1dGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0Q2xhc3NGaWxlKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZChmaWxlKVxuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgbGV0IG5ld0NvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICByZXN1bHQuc3BsaXQoJ1xcbicpLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdUeXBlID09IFwiaW5wdXRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNldHRpbmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc1tcInR5cGVcIl0gPSBuZXdUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NbXCJvcHRpb25zXCJdID0gbmV3T3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChgJHtuZXdOYW1lfTo6ICR7SlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQuam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNldHRpbmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgICAgICAgICBzZXR0aW5nc1tcInR5cGVcIl0gPSBuZXdUeXBlO1xuICAgICAgICAgICAgc2V0dGluZ3NbXCJvcHRpb25zXCJdID0gbmV3T3B0aW9ucztcbiAgICAgICAgICAgIHJlc3VsdCArPSAoYFxcbiR7bmV3TmFtZX06OiAke0pTT04uc3RyaW5naWZ5KHNldHRpbmdzKX1gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZW1vdmVBdHRyaWJ1dGUoYXR0cjogRmlsZUNsYXNzQXR0cmlidXRlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldENsYXNzRmlsZSgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZChmaWxlKVxuICAgICAgICBsZXQgbmV3Q29udGVudDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgcmVzdWx0LnNwbGl0KCdcXG4nKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgaWYgKCFsaW5lLnN0YXJ0c1dpdGgoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdDb250ZW50LmpvaW4oJ1xcbicpKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUZpbGVDbGFzcyhwbHVnaW46IE1ldGFkYXRhTWVudSwgbmFtZTogc3RyaW5nKTogUHJvbWlzZTxGaWxlQ2xhc3M+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlQ2xhc3MgPSBuZXcgRmlsZUNsYXNzKHBsdWdpbiwgbmFtZSk7XG4gICAgICAgIGZpbGVDbGFzcy5nZXRBdHRyaWJ1dGVzKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGZpbGVDbGFzcyk7XG4gICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgeyBjcmVhdGVGaWxlQ2xhc3MsIEZpbGVDbGFzcyB9OyIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBEcm9wZG93bkNvbXBvbmVudCwgTW9kYWwsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBjcmVhdGVGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCB7IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzQXR0cmlidXRlTW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwbHVnaW46IE1ldGFkYXRhTWVudTtcbiAgICBmaWxlOiBURmlsZTtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCBmaWxlOiBURmlsZSkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgU2VsZWN0IHRoZSBmaWVsZCB0byB1cGRhdGVgKTtcbiAgICAgICAgY29uc3QgZmlsZUNsYXNzID0gYXdhaXQgY3JlYXRlRmlsZUNsYXNzKHRoaXMucGx1Z2luLCB0aGlzLmZpbGUuYmFzZW5hbWUpXG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KGBTZWxlY3QgdGhlIGZpZWxkIHRvIHVwZGF0ZSBpbiAke2ZpbGVDbGFzcy5uYW1lfWApO1xuICAgICAgICBjb25zdCBzZWxlY3RDb250YWluZXIgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KHNlbGVjdENvbnRhaW5lcik7XG4gICAgICAgIHNlbGVjdC5hZGRPcHRpb24oXCJzZWxlY3QgYW4gYXR0cmlidXRlXCIsIFwiLS1zZWxlY3QgYW4gYXR0cmlidXRlLS1cIik7XG4gICAgICAgIGZpbGVDbGFzcy5hdHRyaWJ1dGVzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgICAgICBzZWxlY3QuYWRkT3B0aW9uKGF0dHIubmFtZSwgYXR0ci5uYW1lKTtcbiAgICAgICAgfSlcblxuICAgICAgICBzZWxlY3QuYWRkT3B0aW9uKFwiKytuZXdBdHRyKytcIiwgXCIrK0FkZCBhIG5ldyBhdHRyaWJ1dGUrK1wiKTtcbiAgICAgICAgc2VsZWN0Lm9uQ2hhbmdlKChhdHRyTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09IFwiKytuZXdBdHRyXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBGaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCh0aGlzLnBsdWdpbi5hcHAsIGZpbGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRmlsZUNsYXNzQXR0cmlidXRlTW9kYWwodGhpcy5wbHVnaW4uYXBwLCBmaWxlQ2xhc3MsIGZpbGVDbGFzcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyID0+IGF0dHIubmFtZSA9PSBhdHRyTmFtZSlbMF0pO1xuICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIERyb3Bkb3duQ29tcG9uZW50LCBNb2RhbCwgVGV4dENvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50LCBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgVGV4dEFyZWFDb21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IEZpbGVDbGFzc0F0dHJpYnV0ZSwgdHlwZXMgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NBdHRyaWJ1dGVcIjtcbmltcG9ydCB7IEZpbGVDbGFzcyB9IGZyb20gXCJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzc1wiO1xuXG5cbmludGVyZmFjZSBGaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCB7XG4gICAgYXR0cj86IEZpbGVDbGFzc0F0dHJpYnV0ZTtcbiAgICBmaWxlQ2xhc3M6IEZpbGVDbGFzcztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgb3B0aW9uczogc3RyaW5nW107XG4gICAgbmFtZTogc3RyaW5nO1xufVxuXG5jbGFzcyBGaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlQ2xhc3M6IEZpbGVDbGFzcywgYXR0cj86IEZpbGVDbGFzc0F0dHJpYnV0ZSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmF0dHIgPSBhdHRyO1xuICAgICAgICB0aGlzLmZpbGVDbGFzcyA9IGZpbGVDbGFzcztcbiAgICAgICAgaWYgKHRoaXMuYXR0cikge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5hdHRyLnR5cGUgfHwgXCJpbnB1dFwiO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5hdHRyLm9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmF0dHIubmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgLy90aXRsZVxuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dCh0aGlzLmF0dHIgPyBgTWFuYWdlICR7dGhpcy5hdHRyLm5hbWV9YCA6IGBDcmVhdGUgYSBuZXcgYXR0cmlidXRlIGZvciAke3RoaXMuZmlsZUNsYXNzLm5hbWV9YCk7XG5cbiAgICAgICAgLy9uYW1lIGlucHV0XG4gICAgICAgIGNvbnN0IG5hbWVJbnB1dENvbnRhaW5lciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpO1xuICAgICAgICBuYW1lSW5wdXRDb250YWluZXIuc2V0VGV4dChcIm5hbWVcIik7XG4gICAgICAgIGNvbnN0IG5hbWVJbnB1dCA9IG5ldyBUZXh0Q29tcG9uZW50KG5hbWVJbnB1dENvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuYXR0ciA/IG5hbWVJbnB1dC5zZXRWYWx1ZSh0aGlzLmF0dHIubmFtZSkgOiBuYW1lSW5wdXQuc2V0UGxhY2Vob2xkZXIoXCJUeXBlIGEgbmFtZSBmb3IgdGhpcyBhdHRyaWJ1dGVcIik7XG5cbiAgICAgICAgLy9oZWFkZXIgZm9yIHNlbGVjdFxuICAgICAgICBjb25zdCB0eXBlU2VsZWN0SGVhZGVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGNvbnN0IGF0dHJMaW5lID0gdHlwZVNlbGVjdEhlYWRlci5jcmVhdGVFbChcImRpdlwiKTtcbiAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyTGluZS5jcmVhdGVFbChcInN0cm9uZ1wiKTtcbiAgICAgICAgYXR0ck5hbWUuc2V0VGV4dChgPCR7dGhpcy5uYW1lfT5gKTtcbiAgICAgICAgYXR0ckxpbmUuYXBwZW5kKFwiIGZpZWxkcyBpbiBmaWxlcyB3aXRoOlwiKTtcbiAgICAgICAgU3RyaW5nKGAtLS1cXG5maWxlQ2xhc3M6ICR7dGhpcy5maWxlQ2xhc3MubmFtZX1cXG4uLi5cXG4tLS1gKS5zcGxpdCgnXFxuJykuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgICAgIHR5cGVTZWxlY3RIZWFkZXIuY3JlYXRlRWwoXCJkaXZcIiwgXCJ5YW1sLW1ldGFkYXRhLW1lbnUtcmVkXCIpLnNldFRleHQobGluZSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gdHlwZSBzZWxlY3RcbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdENvbnRhaW5lciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0b3ItY29udGFpbmVyJyB9KTtcbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdExhYmVsID0gdHlwZVNlbGVjdENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdtZXRhZGF0YS1tZW51LXZhbHVlLXNlbGVjdG9yLWlubGluZS1sYWJlbCcgfSk7XG4gICAgICAgIHR5cGVTZWxlY3RMYWJlbC5zZXRUZXh0KFwid2lsbDogXCIpO1xuICAgICAgICBjb25zdCB0eXBlU2VsZWN0RHJvcERvd24gPSB0eXBlU2VsZWN0Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0b3ItdG9nZ2xlcicgfSk7XG4gICAgICAgIGNvbnN0IHR5cGVTZWxlY3QgPSBuZXcgRHJvcGRvd25Db21wb25lbnQodHlwZVNlbGVjdERyb3BEb3duKTtcbiAgICAgICAgT2JqZWN0LmtleXModHlwZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHR5cGVTZWxlY3QuYWRkT3B0aW9uKGtleSwgdHlwZXNba2V5XSk7XG4gICAgICAgIH0pXG4gICAgICAgIGlmICh0aGlzLmF0dHIpIHtcbiAgICAgICAgICAgIHR5cGVTZWxlY3Quc2V0VmFsdWUodGhpcy50eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9wdGlvbnMgaW5wdXRcbiAgICAgICAgY29uc3Qgb3B0aW9uc0lucHV0Q29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci1jb250YWluZXInIH0pO1xuICAgICAgICBjb25zdCBvcHRpb25zSW5wdXRMYWJlbCA9IG9wdGlvbnNJbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdtZXRhZGF0YS1tZW51LXZhbHVlLXNlbGVjdG9yLWlubGluZS1sYWJlbC10b3AnIH0pO1xuICAgICAgICBvcHRpb25zSW5wdXRMYWJlbC5zZXRUZXh0KFwiVmFsdWVzXCIpO1xuICAgICAgICBjb25zdCBvcHRpb25zSW5wdXQgPSBuZXcgVGV4dEFyZWFDb21wb25lbnQob3B0aW9uc0lucHV0Q29udGFpbmVyKTtcbiAgICAgICAgb3B0aW9uc0lucHV0LmlucHV0RWwucm93cyA9IDM7XG4gICAgICAgIG9wdGlvbnNJbnB1dC5pbnB1dEVsLmNvbHMgPSAyNjtcbiAgICAgICAgdGhpcy5hdHRyID8gb3B0aW9uc0lucHV0LnNldFZhbHVlKHRoaXMudHlwZSA9PSBcImlucHV0XCIgPyBcIlwiIDogdGhpcy5vcHRpb25zLmpvaW4oXCIsIFwiKSkgOiBvcHRpb25zSW5wdXQuc2V0UGxhY2Vob2xkZXIoXCJpbnNlcnQgdmFsdWVzLCBjb21tYSBzZXBhcmF0ZWRcIik7XG4gICAgICAgICF0aGlzLmF0dHIgfHwgdGhpcy50eXBlID09IFwiaW5wdXRcIiA/IG9wdGlvbnNJbnB1dENvbnRhaW5lci5oaWRlKCkgOiBvcHRpb25zSW5wdXRDb250YWluZXIuc2hvdygpO1xuXG4gICAgICAgIC8vIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHR5cGVTZWxlY3Qub25DaGFuZ2UodHlwZSA9PiB7XG4gICAgICAgICAgICB0eXBlID09IFwiaW5wdXRcIiA/IG9wdGlvbnNJbnB1dENvbnRhaW5lci5oaWRlKCkgOiBvcHRpb25zSW5wdXRDb250YWluZXIuc2hvdygpO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgfSlcbiAgICAgICAgb3B0aW9uc0lucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHRoaXMub3B0aW9ucyA9IHZhbHVlLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSkpO1xuICAgICAgICBuYW1lSW5wdXQub25DaGFuZ2UodmFsdWUgPT4geyB0aGlzLm5hbWUgPSB2YWx1ZTsgYXR0ck5hbWUuc2V0VGV4dChgPCR7dmFsdWV9PmApIH0pO1xuXG4gICAgICAgIC8vIGZvb3RlciBidXR0b25zXG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLWdyaWQtZm9vdGVyXCIgfSk7XG4gICAgICAgIGNvbnN0IHNhdmVCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGZvb3Rlcik7XG4gICAgICAgIHNhdmVCdXR0b24uc2V0SWNvbihcImNoZWNrbWFya1wiKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzLnVwZGF0ZUF0dHJpYnV0ZSh0aGlzLnR5cGUsIHRoaXMub3B0aW9ucywgdGhpcy5uYW1lLCB0aGlzLmF0dHIpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KVxuICAgICAgICBpZiAodGhpcy5hdHRyKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGZvb3Rlcik7XG4gICAgICAgICAgICByZW1vdmVCdXR0b24uc2V0SWNvbihcInRyYXNoXCIpO1xuICAgICAgICAgICAgcmVtb3ZlQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1Nb2RhbCA9IG5ldyBNb2RhbCh0aGlzLmFwcCk7XG4gICAgICAgICAgICAgICAgY29uZmlybU1vZGFsLnRpdGxlRWwuc2V0VGV4dChcIlBsZWFzZSBjb25maXJtXCIpO1xuICAgICAgICAgICAgICAgIGNvbmZpcm1Nb2RhbC5jb250ZW50RWwuY3JlYXRlRGl2KCkuc2V0VGV4dChgRG8geW91IHJlYWxseSB3YW50IHRvIHJlbW92ZSAke3RoaXMuYXR0cj8ubmFtZX0gYXR0cmlidXRlIGZyb20gJHt0aGlzLmZpbGVDbGFzcy5uYW1lfT9gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maXJtRm9vdGVyID0gY29uZmlybU1vZGFsLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1ncmlkLWZvb3RlclwiIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbmZpcm1Gb290ZXIpO1xuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b24uc2V0SWNvbihcImNoZWNrbWFya1wiKTtcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdHRyKSB0aGlzLmZpbGVDbGFzcy5yZW1vdmVBdHRyaWJ1dGUodGhpcy5hdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybU1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc21pc3NCdXR0b24gPSBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoY29uZmlybUZvb3Rlcik7XG4gICAgICAgICAgICAgICAgZGlzbWlzc0J1dHRvbi5zZXRJY29uKFwiY3Jvc3NcIik7XG4gICAgICAgICAgICAgICAgZGlzbWlzc0J1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgICAgICAgICAgICAgY29uZmlybU1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KGZvb3Rlcik7XG4gICAgICAgIGNhbmNlbEJ1dHRvbi5zZXRJY29uKFwiY3Jvc3NcIik7XG4gICAgICAgIGNhbmNlbEJ1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBGaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCB9IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgVEZpbGUsIE1lbnUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB2YWx1ZU11bHRpU2VsZWN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvdmFsdWVNdWx0aVNlbGVjdE1vZGFsXCI7XG5pbXBvcnQgdmFsdWVUZXh0SW5wdXRNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy92YWx1ZVRleHRJbnB1dE1vZGFsXCI7XG5pbXBvcnQgdmFsdWVUb2dnbGVNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy92YWx1ZVRvZ2dsZU1vZGFsXCI7XG5pbXBvcnQgdmFsdWVTZWxlY3RNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy92YWx1ZVNlbGVjdE1vZGFsXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9GaWVsZFwiO1xuaW1wb3J0IGNob29zZVNlY3Rpb25Nb2RhbCBmcm9tIFwiLi4vb3B0aW9uTW9kYWxzL2Nob29zZVNlY3Rpb25Nb2RhbFwiO1xuaW1wb3J0IFNlbGVjdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL1NlbGVjdE1vZGFsXCI7XG5pbXBvcnQgeyBjcmVhdGVGaWxlQ2xhc3MsIEZpbGVDbGFzcyB9IGZyb20gXCJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzc1wiO1xuaW1wb3J0IHsgcmVwbGFjZVZhbHVlcyB9IGZyb20gXCIuLi9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwgZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWxcIjtcbmltcG9ydCB7IGdlbmVyaWNGaWVsZFJlZ2V4IH0gZnJvbSBcIi4uL3V0aWxzL3BhcnNlclwiO1xuXG5mdW5jdGlvbiBpc01lbnUoY2F0ZWdvcnk6IE1lbnUgfCBTZWxlY3RNb2RhbCk6IGNhdGVnb3J5IGlzIE1lbnUge1xuXHRyZXR1cm4gKGNhdGVnb3J5IGFzIE1lbnUpLmFkZEl0ZW0gIT09IHVuZGVmaW5lZDtcbn07XG5cbmZ1bmN0aW9uIGlzU2VsZWN0KGNhdGVnb3J5OiBNZW51IHwgU2VsZWN0TW9kYWwpOiBjYXRlZ29yeSBpcyBTZWxlY3RNb2RhbCB7XG5cdHJldHVybiAoY2F0ZWdvcnkgYXMgU2VsZWN0TW9kYWwpLm1vZGFscyAhPT0gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3B0aW9uc0xpc3Qge1xuXHRhcHA6IEFwcDtcblx0ZmlsZTogVEZpbGU7XG5cdHBsdWdpbjogTWV0YWRhdGFNZW51O1xuXHRwYXRoOiBzdHJpbmc7XG5cdGNhdGVnb3J5OiBNZW51IHwgU2VsZWN0TW9kYWw7XG5cdGZpbGVDbGFzczogRmlsZUNsYXNzO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCBmaWxlOiBURmlsZSwgY2F0ZWdvcnk6IE1lbnUgfCBTZWxlY3RNb2RhbCkge1xuXHRcdHRoaXMuZmlsZSA9IGZpbGU7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuXHR9O1xuXG5cdHB1YmxpYyBhc3luYyBjcmVhdGVFeHRyYU9wdGlvbkxpc3QoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZSh0aGlzLmZpbGUucGF0aCk/LmZyb250bWF0dGVyO1xuXHRcdGlmIChmcm9udG1hdHRlcikge1xuXHRcdFx0Y29uc3QgeyBwb3NpdGlvbiwgLi4uYXR0cmlidXRlcyB9ID0gZnJvbnRtYXR0ZXI7XG5cdFx0XHRPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5nbG9iYWxseUlnbm9yZWRGaWVsZHMuaW5jbHVkZXMoa2V5KSkge1xuXHRcdFx0XHRcdGRlbGV0ZSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdGlmIChpc01lbnUodGhpcy5jYXRlZ29yeSkpIHsgdGhpcy5jYXRlZ29yeS5hZGRTZXBhcmF0b3IoKTsgfTtcblx0XHRcdGxldCBmaWxlQ2xhc3NGb3JGaWVsZHMgPSBmYWxzZTtcblx0XHRcdGxldCBmaWxlQ2xhc3NGaWVsZHM6IHN0cmluZ1tdID0gW107XG5cdFx0XHRjb25zdCBmaWxlQ2xhc3NBbGlhcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzO1xuXHRcdFx0aWYgKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmluY2x1ZGVzKGZpbGVDbGFzc0FsaWFzKSkge1xuXHRcdFx0XHRjb25zdCBmaWxlQ2xhc3MgPSBhdHRyaWJ1dGVzW2ZpbGVDbGFzc0FsaWFzXTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRjb25zdCBfZmlsZUNsYXNzID0gYXdhaXQgY3JlYXRlRmlsZUNsYXNzKHRoaXMucGx1Z2luLCBmaWxlQ2xhc3MpXG5cdFx0XHRcdFx0dGhpcy5maWxlQ2xhc3MgPSBfZmlsZUNsYXNzO1xuXHRcdFx0XHRcdGZpbGVDbGFzc0ZpZWxkcyA9IF9maWxlQ2xhc3MuYXR0cmlidXRlcy5tYXAoYXR0ciA9PiBhdHRyLm5hbWUpO1xuXHRcdFx0XHRcdGZpbGVDbGFzc0ZvckZpZWxkcyA9IHRydWU7XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCFmaWxlQ2xhc3NGaWVsZHMuaW5jbHVkZXMoa2V5KSAmJiBrZXkgIT0gZmlsZUNsYXNzQWxpYXMpIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGF0dHJpYnV0ZXNba2V5XTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwgPSBuZXcgRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwodGhpcy5wbHVnaW4sIHRoaXMuZmlsZUNsYXNzLmdldENsYXNzRmlsZSgpKTtcblx0XHRcdFx0XHRpZiAoaXNNZW51KHRoaXMuY2F0ZWdvcnkpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNhdGVnb3J5LmFkZFNlcGFyYXRvcigpO1xuXHRcdFx0XHRcdFx0dGhpcy5jYXRlZ29yeS5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uc2V0SWNvbihcImdlYXJcIik7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uc2V0VGl0bGUoYE1hbmFnZSA8JHt0aGlzLmZpbGVDbGFzcy5uYW1lfT4gZmllbGRzYCk7XG5cdFx0XHRcdFx0XHRcdGl0ZW0ub25DbGljaygoZXZ0KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwub3BlbigpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNhdGVnb3J5LmFkZE9wdGlvbihcIm1hbmFnZV9maWxlQ2xhc3NfYXR0cmlidXRlc1wiLCBcIk1hbmFnZSBmaWxlQ2xhc3MgYXR0cmlidXRlc1wiKTtcblx0XHRcdFx0XHRcdHRoaXMuY2F0ZWdvcnkubW9kYWxzW1wiYWRkX2ZpZWxkX2F0X3NlY3Rpb25cIl0gPSAoKSA9PiBmaWxlQ2xhc3NBdHRyaWJ1dGVTZWxlY3RNb2RhbC5vcGVuKCk7XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvckZyb250bWF0dGVyKGF0dHJpYnV0ZXMsKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvcklubGluZUZpZWxkcyh0aGlzLmZpbGUsIGZpbGVDbGFzc0ZvckZpZWxkcywgZmlsZUNsYXNzRmllbGRzKVxuXHRcdFx0XHRcdGlmIChpc01lbnUodGhpcy5jYXRlZ29yeSkpIHsgdGhpcy5jYXRlZ29yeS5hZGRTZXBhcmF0b3IoKSB9O1xuXHRcdFx0XHRcdHRoaXMuYWRkU2VjdGlvblNlbGVjdE1vZGFsT3B0aW9uKHRoaXMucGx1Z2luKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmNyZWF0ZUV4dHJhT3B0aW9uc0xpc3RGb3JGcm9udG1hdHRlcihhdHRyaWJ1dGVzKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvcklubGluZUZpZWxkcyh0aGlzLmZpbGUpXG5cdFx0XHRcdFx0aWYgKGlzTWVudSh0aGlzLmNhdGVnb3J5KSkgeyB0aGlzLmNhdGVnb3J5LmFkZFNlcGFyYXRvcigpOyB9O1xuXHRcdFx0XHRcdHRoaXMuYWRkU2VjdGlvblNlbGVjdE1vZGFsT3B0aW9uKHRoaXMucGx1Z2luKTtcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvckZyb250bWF0dGVyKGF0dHJpYnV0ZXMpXG5cdFx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvcklubGluZUZpZWxkcyh0aGlzLmZpbGUpXG5cdFx0XHRcdGlmIChpc01lbnUodGhpcy5jYXRlZ29yeSkpIHsgdGhpcy5jYXRlZ29yeS5hZGRTZXBhcmF0b3IoKTsgfTtcblx0XHRcdFx0dGhpcy5hZGRTZWN0aW9uU2VsZWN0TW9kYWxPcHRpb24odGhpcy5wbHVnaW4pO1xuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXdhaXQgdGhpcy5jcmVhdGVFeHRyYU9wdGlvbnNMaXN0Rm9ySW5saW5lRmllbGRzKHRoaXMuZmlsZSlcblx0XHRcdGlmIChpc01lbnUodGhpcy5jYXRlZ29yeSkpIHsgdGhpcy5jYXRlZ29yeS5hZGRTZXBhcmF0b3IoKTsgfTtcblx0XHRcdHRoaXMuYWRkU2VjdGlvblNlbGVjdE1vZGFsT3B0aW9uKHRoaXMucGx1Z2luKTtcblx0XHR9O1xuXG5cdH07XG5cblx0cHJpdmF0ZSBhc3luYyBjcmVhdGVFeHRyYU9wdGlvbnNMaXN0Rm9ySW5saW5lRmllbGRzKGZpbGU6IFRGaWxlLCBmaWxlQ2xhc3NGb3JGaWVsZHM6IGJvb2xlYW4gPSBmYWxzZSwgZmlsZUNsYXNzRmllbGRzOiBzdHJpbmdbXSA9IFtdKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0bGV0IGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblx0XHRjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2dlbmVyaWNGaWVsZFJlZ2V4fTo6XFxzKig/PHZhbHVlcz4uKyk/YCwgXCJ1XCIpO1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5yZWFkKGZpbGUpXG5cdFx0cmVzdWx0LnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiB7XG5cdFx0XHRjb25zdCByZWdleFJlc3VsdCA9IGxpbmUubWF0Y2gocmVnZXgpO1xuXHRcdFx0Y29uc3QgeyBhdHRyaWJ1dGUsIHZhbHVlcyB9ID0gcmVnZXhSZXN1bHQ/Lmdyb3VwcyB8fCB7fVxuXHRcdFx0aWYgKGF0dHJpYnV0ZSAmJiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2xvYmFsbHlJZ25vcmVkRmllbGRzLmluY2x1ZGVzKGF0dHJpYnV0ZS50cmltKCkpKSB7XG5cdFx0XHRcdGlmIChmaWxlQ2xhc3NGb3JGaWVsZHMpIHtcblx0XHRcdFx0XHRpZiAoZmlsZUNsYXNzRmllbGRzLmluY2x1ZGVzKGF0dHJpYnV0ZS50cmltKCkpKSB7XG5cdFx0XHRcdFx0XHRhdHRyaWJ1dGVzW2F0dHJpYnV0ZS50cmltKCldID0gdmFsdWVzID8gdmFsdWVzLnRyaW0oKSA6IFwiXCI7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhdHRyaWJ1dGVzW2F0dHJpYnV0ZS50cmltKCldID0gdmFsdWVzID8gdmFsdWVzLnRyaW0oKSA6IFwiXCI7XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAoaXNNZW51KHRoaXMuY2F0ZWdvcnkpKSB7IHRoaXMuY2F0ZWdvcnkuYWRkU2VwYXJhdG9yKCk7IH07XG5cdFx0XHR0aGlzLmJ1aWxkRXh0cmFPcHRpb25zTGlzdChhdHRyaWJ1dGVzKTtcblx0XHR9O1xuXHR9O1xuXG5cdHByaXZhdGUgYXN5bmMgY3JlYXRlRXh0cmFPcHRpb25zTGlzdEZvckZyb250bWF0dGVyKGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcblx0XHR0aGlzLmJ1aWxkRXh0cmFPcHRpb25zTGlzdChhdHRyaWJ1dGVzLCk7XG5cdH07XG5cblx0YnVpbGRFeHRyYU9wdGlvbnNMaXN0KGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcblx0XHRPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHRjb25zdCBwcm9wZXJ0eVNldHRpbmdzID0gdGhpcy5nZXRQcm9wZXJ0eVNldHRpbmdzKGtleSk7XG5cdFx0XHRpZiAocHJvcGVydHlTZXR0aW5ncz8udmFsdWVzKSB7XG5cdFx0XHRcdGlmIChwcm9wZXJ0eVNldHRpbmdzLmlzQ3ljbGUpIHtcblx0XHRcdFx0XHR0aGlzLmFkZEN5Y2xlTWVudU9wdGlvbihrZXksIHZhbHVlLCBwcm9wZXJ0eVNldHRpbmdzKTtcblx0XHRcdFx0fSBlbHNlIGlmIChwcm9wZXJ0eVNldHRpbmdzLmlzTXVsdGkpIHtcblx0XHRcdFx0XHR0aGlzLmFkZE11bHRpTWVudU9wdGlvbihrZXksIHZhbHVlLCBwcm9wZXJ0eVNldHRpbmdzKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmFkZFNlbGVjdE1lbnVPcHRpb24oa2V5LCB2YWx1ZSwgcHJvcGVydHlTZXR0aW5ncyk7XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2UgaWYgKGlzQm9vbGVhbih2YWx1ZSkgfHwgL3RydWUvaS50ZXN0KHZhbHVlKSB8fCAvZmFsc2UvaS50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHRsZXQgdG9Cb29sZWFuVmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcblx0XHRcdFx0aWYgKGlzQm9vbGVhbih2YWx1ZSkpIHtcblx0XHRcdFx0XHR0b0Jvb2xlYW5WYWx1ZSA9IHZhbHVlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKC90cnVlL2kudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0XHR0b0Jvb2xlYW5WYWx1ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoL2ZhbHNlL2kudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0XHR0b0Jvb2xlYW5WYWx1ZSA9IGZhbHNlO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLmFkZFRvZ2dsZU1lbnVPcHRpb24oa2V5LCB0b0Jvb2xlYW5WYWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFkZFRleHRJbnB1dE1lbnVPcHRpb24oa2V5LCB2YWx1ZSA/IHZhbHVlLnRvU3RyaW5nKCkgOiBcIlwiKTtcblx0XHRcdH07XG5cdFx0fSk7XG5cdH07XG5cblx0cHJpdmF0ZSBhZGRTZWN0aW9uU2VsZWN0TW9kYWxPcHRpb24ocGx1Z2luOiBNZXRhZGF0YU1lbnUpOiB2b2lkIHtcblx0XHRjb25zdCBtb2RhbCA9IG5ldyBjaG9vc2VTZWN0aW9uTW9kYWwodGhpcy5wbHVnaW4sIHRoaXMuZmlsZSk7XG5cdFx0aWYgKGlzTWVudSh0aGlzLmNhdGVnb3J5KSkge1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0uc2V0SWNvbihcInBlbmNpbFwiKTtcblx0XHRcdFx0aXRlbS5zZXRUaXRsZShcIkFkZCBmaWVsZCBhdCBzZWN0aW9uLi4uXCIpO1xuXHRcdFx0XHRpdGVtLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHRcdG1vZGFsLm9wZW4oKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcInRhcmdldC1tZXRhZGF0YVwiKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXNTZWxlY3QodGhpcy5jYXRlZ29yeSkpIHtcblx0XHRcdHRoaXMuY2F0ZWdvcnkuYWRkT3B0aW9uKFwiYWRkX2ZpZWxkX2F0X3NlY3Rpb25cIiwgXCJBZGQgZmllbGQgYXQgc2VjdGlvbi4uLlwiKTtcblx0XHRcdHRoaXMuY2F0ZWdvcnkubW9kYWxzW1wiYWRkX2ZpZWxkX2F0X3NlY3Rpb25cIl0gPSAoKSA9PiBtb2RhbC5vcGVuKCk7XG5cdFx0fTtcblx0fTtcblxuXHRwcml2YXRlIGFkZEN5Y2xlTWVudU9wdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHByb3BlcnR5U2V0dGluZ3M6IEZpZWxkKTogdm9pZCB7XG5cdFx0Y29uc3QgdmFsdWVzID0gcHJvcGVydHlTZXR0aW5ncy52YWx1ZXM7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG5cdFx0Y29uc3Qga2V5Rm9yVmFsdWUgPSBrZXlzLmZpbmQoa2V5ID0+IHZhbHVlc1trZXldID09PSB2YWx1ZSk7XG5cdFx0bGV0IG5leHRWYWx1ZTogc3RyaW5nO1xuXHRcdGlmIChrZXlGb3JWYWx1ZSkge1xuXHRcdFx0Y29uc3QgbmV4dEtleSA9IGtleXNbKGtleXMuaW5kZXhPZihrZXlGb3JWYWx1ZSkgKyAxKSAlIGtleXMubGVuZ3RoXTtcblx0XHRcdG5leHRWYWx1ZSA9IHZhbHVlc1tuZXh0S2V5XTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV4dFZhbHVlID0gdmFsdWVzW09iamVjdC5rZXlzKHZhbHVlcylbMF1dO1xuXHRcdH07XG5cdFx0aWYgKGlzTWVudSh0aGlzLmNhdGVnb3J5KSkge1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0uc2V0VGl0bGUoYCR7bmFtZX0gOiAke3ZhbHVlfSBcdTI1QjcgJHtuZXh0VmFsdWV9YCk7XG5cdFx0XHRcdGl0ZW0uc2V0SWNvbignc3dpdGNoJyk7XG5cdFx0XHRcdGl0ZW0ub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0cmVwbGFjZVZhbHVlcyh0aGlzLnBsdWdpbi5hcHAsIHRoaXMuZmlsZSwgbmFtZSwgbmV4dFZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcInRhcmdldC1tZXRhZGF0YVwiKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXNTZWxlY3QodGhpcy5jYXRlZ29yeSkpIHtcblx0XHRcdHRoaXMuY2F0ZWdvcnkuYWRkT3B0aW9uKGAke25hbWV9XyR7dmFsdWV9XyR7bmV4dFZhbHVlfWAsIGAke25hbWV9IDogJHt2YWx1ZX0gXHUyNUI3ICR7bmV4dFZhbHVlfWApO1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5tb2RhbHNbYCR7bmFtZX1fJHt2YWx1ZX1fJHtuZXh0VmFsdWV9YF0gPSAoKSA9PlxuXHRcdFx0XHRyZXBsYWNlVmFsdWVzKHRoaXMucGx1Z2luLmFwcCwgdGhpcy5maWxlLCBuYW1lLCBuZXh0VmFsdWUpO1xuXHRcdH07XG5cdH07XG5cblx0cHJpdmF0ZSBhZGRNdWx0aU1lbnVPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBwcm9wZXJ0eVNldHRpbmdzOiBGaWVsZCk6IHZvaWQge1xuXHRcdGNvbnN0IG1vZGFsID0gbmV3IHZhbHVlTXVsdGlTZWxlY3RNb2RhbCh0aGlzLnBsdWdpbi5hcHAsIHRoaXMuZmlsZSwgbmFtZSwgdmFsdWUsIHByb3BlcnR5U2V0dGluZ3MpO1xuXHRcdG1vZGFsLnRpdGxlRWwuc2V0VGV4dChcIlNlbGVjdCB2YWx1ZXNcIik7XG5cdFx0aWYgKGlzTWVudSh0aGlzLmNhdGVnb3J5KSkge1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSA8JHtuYW1lfT5gKTtcblx0XHRcdFx0aXRlbS5zZXRJY29uKCdidWxsZXQtbGlzdCcpO1xuXHRcdFx0XHRpdGVtLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHRcdG1vZGFsLm9wZW4oKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcInRhcmdldC1tZXRhZGF0YVwiKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXNTZWxlY3QodGhpcy5jYXRlZ29yeSkpIHtcblx0XHRcdHRoaXMuY2F0ZWdvcnkuYWRkT3B0aW9uKGB1cGRhdGVfJHtuYW1lfWAsIGBVcGRhdGUgPCR7bmFtZX0+YCk7XG5cdFx0XHR0aGlzLmNhdGVnb3J5Lm1vZGFsc1tgdXBkYXRlXyR7bmFtZX1gXSA9ICgpID0+IG1vZGFsLm9wZW4oKTtcblx0XHR9O1xuXHR9O1xuXG5cdHByaXZhdGUgYWRkU2VsZWN0TWVudU9wdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHByb3BlcnR5U2V0dGluZ3M6IEZpZWxkKTogdm9pZCB7XG5cdFx0Y29uc3QgbW9kYWwgPSBuZXcgdmFsdWVTZWxlY3RNb2RhbCh0aGlzLnBsdWdpbi5hcHAsIHRoaXMuZmlsZSwgbmFtZSwgdmFsdWUsIHByb3BlcnR5U2V0dGluZ3MpO1xuXHRcdG1vZGFsLnRpdGxlRWwuc2V0VGV4dChcIlNlbGVjdCB2YWx1ZVwiKTtcblx0XHRpZiAoaXNNZW51KHRoaXMuY2F0ZWdvcnkpKSB7XG5cdFx0XHR0aGlzLmNhdGVnb3J5LmFkZEl0ZW0oKGl0ZW0pID0+IHtcblx0XHRcdFx0aXRlbS5zZXRUaXRsZShgVXBkYXRlICR7bmFtZX1gKTtcblx0XHRcdFx0aXRlbS5zZXRJY29uKCdyaWdodC10cmlhbmdsZScpO1xuXHRcdFx0XHRpdGVtLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4gbW9kYWwub3BlbigpKTtcblx0XHRcdFx0aXRlbS5zZXRTZWN0aW9uKFwidGFyZ2V0LW1ldGFkYXRhXCIpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmIChpc1NlbGVjdCh0aGlzLmNhdGVnb3J5KSkge1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5hZGRPcHRpb24oYHVwZGF0ZV8ke25hbWV9YCwgYFVwZGF0ZSA8JHtuYW1lfT5gKTtcblx0XHRcdHRoaXMuY2F0ZWdvcnkubW9kYWxzW2B1cGRhdGVfJHtuYW1lfWBdID0gKCkgPT4gbW9kYWwub3BlbigpO1xuXHRcdH07XG5cdH07XG5cblx0cHJpdmF0ZSBhZGRUb2dnbGVNZW51T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcblx0XHRjb25zdCBtb2RhbCA9IG5ldyB2YWx1ZVRvZ2dsZU1vZGFsKHRoaXMucGx1Z2luLmFwcCwgdGhpcy5maWxlLCBuYW1lLCB2YWx1ZSk7XG5cdFx0bW9kYWwudGl0bGVFbC5zZXRUZXh0KGBDaGFuZ2UgVmFsdWUgZm9yIDwke25hbWV9PmApO1xuXHRcdGlmIChpc01lbnUodGhpcy5jYXRlZ29yeSkpIHtcblx0XHRcdHRoaXMuY2F0ZWdvcnkuYWRkSXRlbSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRpdGVtLnNldFRpdGxlKGBVcGRhdGUgPCR7bmFtZX0+YCk7XG5cdFx0XHRcdGl0ZW0uc2V0SWNvbignY2hlY2ttYXJrJyk7XG5cdFx0XHRcdGl0ZW0ub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7IG1vZGFsLm9wZW4oKSB9KTtcblx0XHRcdFx0aXRlbS5zZXRTZWN0aW9uKFwidGFyZ2V0LW1ldGFkYXRhXCIpO1xuXHRcdFx0fSlcblx0XHR9IGVsc2UgaWYgKGlzU2VsZWN0KHRoaXMuY2F0ZWdvcnkpKSB7XG5cdFx0XHR0aGlzLmNhdGVnb3J5LmFkZE9wdGlvbihgdXBkYXRlXyR7bmFtZX1gLCBgVXBkYXRlIDwke25hbWV9PmApO1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5tb2RhbHNbYHVwZGF0ZV8ke25hbWV9YF0gPSAoKSA9PiBtb2RhbC5vcGVuKCk7XG5cdFx0fTtcblx0fTtcblxuXHRwcml2YXRlIGFkZFRleHRJbnB1dE1lbnVPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0Y29uc3QgbW9kYWwgPSBuZXcgdmFsdWVUZXh0SW5wdXRNb2RhbCh0aGlzLnBsdWdpbi5hcHAsIHRoaXMuZmlsZSwgbmFtZSwgdmFsdWUpO1xuXHRcdG1vZGFsLnRpdGxlRWwuc2V0VGV4dChgQ2hhbmdlIFZhbHVlIGZvciA8JHtuYW1lfT5gKTtcblx0XHRpZiAoaXNNZW51KHRoaXMuY2F0ZWdvcnkpKSB7XG5cdFx0XHR0aGlzLmNhdGVnb3J5LmFkZEl0ZW0oKGl0ZW0pID0+IHtcblx0XHRcdFx0aXRlbS5zZXRUaXRsZShgVXBkYXRlIDwke25hbWV9PmApO1xuXHRcdFx0XHRpdGVtLnNldEljb24oJ3BlbmNpbCcpO1xuXHRcdFx0XHRpdGVtLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4gbW9kYWwub3BlbigpKTtcblx0XHRcdFx0aXRlbS5zZXRTZWN0aW9uKFwidGFyZ2V0LW1ldGFkYXRhXCIpO1xuXHRcdFx0fSlcblx0XHR9IGVsc2UgaWYgKGlzU2VsZWN0KHRoaXMuY2F0ZWdvcnkpKSB7XG5cdFx0XHR0aGlzLmNhdGVnb3J5LmFkZE9wdGlvbihgdXBkYXRlXyR7bmFtZX1gLCBgVXBkYXRlIDwke25hbWV9PmApO1xuXHRcdFx0dGhpcy5jYXRlZ29yeS5tb2RhbHNbYHVwZGF0ZV8ke25hbWV9YF0gPSAoKSA9PiBtb2RhbC5vcGVuKCk7XG5cdFx0fTtcblx0fTtcblxuXHRwcml2YXRlIGdldFByb3BlcnR5U2V0dGluZ3MocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBGaWVsZCB8IHVuZGVmaW5lZCB7XG5cdFx0Y29uc3QgbWF0Y2hpbmdTZXR0aW5ncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByZXNldEZpZWxkcy5maWx0ZXIocCA9PiBwLm5hbWUgPT0gcHJvcGVydHlOYW1lKTtcblx0XHRpZiAodGhpcy5maWxlQ2xhc3MpIHtcblx0XHRcdGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZSA9IHRoaXMuZmlsZUNsYXNzLmF0dHJpYnV0ZXMuZmlsdGVyKGF0dHIgPT4gYXR0ci5uYW1lID09IHByb3BlcnR5TmFtZSk7XG5cdFx0XHRpZiAoZmlsZUNsYXNzQXR0cmlidXRlc1dpdGhOYW1lLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Y29uc3QgZmlsZUNsYXNzQXR0cmlidXRlID0gZmlsZUNsYXNzQXR0cmlidXRlc1dpdGhOYW1lWzBdO1xuXHRcdFx0XHRpZiAoZmlsZUNsYXNzQXR0cmlidXRlLm9wdGlvbnMpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmlsZUNsYXNzQXR0cmlidXRlLmdldEZpZWxkKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobWF0Y2hpbmdTZXR0aW5ncy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoaW5nU2V0dGluZ3NbMF07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChtYXRjaGluZ1NldHRpbmdzLmxlbmd0aCA+IDApIHtcblx0XHRcdHJldHVybiBtYXRjaGluZ1NldHRpbmdzWzBdO1xuXHRcdH07XG5cdH07XG59O1xuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgT3B0aW9uc0xpc3QgZnJvbSBcInNyYy9vcHRpb25zL09wdGlvbnNMaXN0XCI7XG5pbXBvcnQgU2VsZWN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvU2VsZWN0TW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90ZUZpZWxkc0NvbW1hbmRzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHVibGljIGFwcDogQXBwO1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIHNlbGVjdDogU2VsZWN0TW9kYWw7XG4gICAgcHJpdmF0ZSBvcHRpb25zTGlzdDogT3B0aW9uc0xpc3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICB9O1xuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgU2VsZWN0IHRoZSBmaWVsZCB0byBtYW5hZ2VgKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnVcIik7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNMaXN0Q29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcImZpZWxkLW9wdGlvbnNcIn0pO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ID0gbmV3IFNlbGVjdE1vZGFsKG9wdGlvbnNMaXN0Q29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3QuYWRkT3B0aW9uKFwiLS0tXCIsIFwiQ2hvb3NlIEZpZWxkXCIpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5vcHRpb25zTGlzdCA9IG5ldyBPcHRpb25zTGlzdCh0aGlzLnBsdWdpbiwgdGhpcy5maWxlLCB0aGlzLnNlbGVjdCk7XG4gICAgICAgIGF3YWl0IHRoaXMub3B0aW9uc0xpc3QuY3JlYXRlRXh0cmFPcHRpb25MaXN0KCk7XG4gICAgICAgIHRoaXMuc2VsZWN0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QubW9kYWxzW3ZhbHVlXSgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3Quc2VsZWN0RWwuZm9jdXMoKTtcbiAgICB9O1xufTsiLCAiaW1wb3J0IHsgRHJvcGRvd25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0TW9kYWwgZXh0ZW5kcyBEcm9wZG93bkNvbXBvbmVudCB7XG4gICAgcHVibGljIG1vZGFsczogUmVjb3JkPHN0cmluZywgYW55PjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcihjb250YWluZXJFbCk7XG4gICAgICAgIHRoaXMubW9kYWxzID0ge307XG4gICAgfTtcbn07IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7XG4gICAgQXBwLFxuICAgIEVkaXRvcixcbiAgICBFZGl0b3JQb3NpdGlvbixcbiAgICBFZGl0b3JTdWdnZXN0LFxuICAgIEVkaXRvclN1Z2dlc3RDb250ZXh0LFxuICAgIEVkaXRvclN1Z2dlc3RUcmlnZ2VySW5mbyxcbiAgICBNYXJrZG93blZpZXcsXG4gICAgVEZpbGUsXG4gICAgcGFyc2VZYW1sLFxuICAgIE5vdGljZVxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IGNyZWF0ZUZpbGVDbGFzcywgRmlsZUNsYXNzIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzXCI7XG5pbXBvcnQgeyBnZW5lcmljRmllbGRSZWdleCB9IGZyb20gXCIuLi91dGlscy9wYXJzZXJcIjtcblxuaW50ZXJmYWNlIElWYWx1ZUNvbXBsZXRpb24ge1xuICAgIHZhbHVlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZVN1Z2dlc3QgZXh0ZW5kcyBFZGl0b3JTdWdnZXN0PElWYWx1ZUNvbXBsZXRpb24+IHtcbiAgICBwcml2YXRlIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIHByaXZhdGUgYXBwOiBBcHA7XG4gICAgcHJpdmF0ZSBmaWxlQ2xhc3M6IEZpbGVDbGFzcztcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGRpZFNlbGVjdDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnNldEluc3RydWN0aW9ucyhbeyBjb21tYW5kOiBcIlNoaWZ0XCIsIHB1cnBvc2U6IFwicHV0IGEgc3BhY2UgYWZ0ZXI6OlwiIH1dKTtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuc2NvcGUucmVnaXN0ZXIoW1wiU2hpZnRcIl0sIFwiRW50ZXJcIiwgKGV2dDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5zdWdnZXN0aW9ucy51c2VTZWxlY3RlZEl0ZW0oZXZ0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIG9uVHJpZ2dlcihcbiAgICAgICAgY3Vyc29yOiBFZGl0b3JQb3NpdGlvbixcbiAgICAgICAgZWRpdG9yOiBFZGl0b3IsXG4gICAgICAgIGZpbGU6IFRGaWxlXG4gICAgKTogRWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvIHwgbnVsbCB7XG4gICAgICAgIGlmICh0aGlzLmRpZFNlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5kaWRTZWxlY3QgPSBmYWxzZVxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmlzQXV0b3N1Z2dlc3RFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUubWV0YWRhdGFDYWNoZVthcHAubWV0YWRhdGFDYWNoZS5maWxlQ2FjaGVbZmlsZS5wYXRoXS5oYXNoXS5mcm9udG1hdHRlcjtcblxuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBmcm9udG1hdHRlciAmJiBmcm9udG1hdHRlci5wb3NpdGlvbi5zdGFydC5saW5lIDwgY3Vyc29yLmxpbmUgJiYgY3Vyc29yLmxpbmUgPCBmcm9udG1hdHRlci5wb3NpdGlvbi5lbmQubGluZVxuICAgICAgICBjb25zdCByZWdleCA9IHRoaXMuaW5Gcm9udG1hdHRlciA/IG5ldyBSZWdFeHAoYF4ke2dlbmVyaWNGaWVsZFJlZ2V4fTooPzx2YWx1ZXM+LiopYCwgXCJ1XCIpIDogbmV3IFJlZ0V4cChgXiR7Z2VuZXJpY0ZpZWxkUmVnZXh9OjooPzx2YWx1ZXM+LiopYCwgXCJ1XCIpXG4gICAgICAgIGNvbnN0IGZ1bGxMaW5lID0gZWRpdG9yLmdldExpbmUoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUpXG4gICAgICAgIGlmICghcmVnZXgudGVzdChmdWxsTGluZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBjdXJzb3IsXG4gICAgICAgICAgICBlbmQ6IGN1cnNvcixcbiAgICAgICAgICAgIHF1ZXJ5OiBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSksXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgZmlsdGVyT3B0aW9uID0gKGZpcnN0VmFsdWVzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCwgbGFzdFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQsIG9wdGlvbjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiAhZmlyc3RWYWx1ZXMgfHwgIWZpcnN0VmFsdWVzPy5jb250YWlucyhvcHRpb24pICYmICghbGFzdFZhbHVlIHx8ICEhbGFzdFZhbHVlICYmIG9wdGlvbi5jb250YWlucyhsYXN0VmFsdWUpKVxuICAgIH1cblxuICAgIGFzeW5jIGdldFN1Z2dlc3Rpb25zKGNvbnRleHQ6IEVkaXRvclN1Z2dlc3RDb250ZXh0KTogUHJvbWlzZTxJVmFsdWVDb21wbGV0aW9uW10+IHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCB0aGlzLmdldFZhbHVlU3VnZ2VzdGlvbnMoY29udGV4dCk7XG4gICAgICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWdnZXN0aW9ucztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcblxuICAgIGFzeW5jIGdldFZhbHVlU3VnZ2VzdGlvbnMoY29udGV4dDogRWRpdG9yU3VnZ2VzdENvbnRleHQpOiBQcm9taXNlPElWYWx1ZUNvbXBsZXRpb25bXT4ge1xuICAgICAgICBjb25zdCBsaW5lID0gY29udGV4dC5zdGFydC5saW5lO1xuICAgICAgICBsZXQgcmVnZXg7XG4gICAgICAgIGlmICghdGhpcy5pbkZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2dlbmVyaWNGaWVsZFJlZ2V4fTo6KD88dmFsdWVzPi4rKT9gLCBcInVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2dlbmVyaWNGaWVsZFJlZ2V4fTooPzx2YWx1ZXM+LispP2AsIFwidVwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVnZXhSZXN1bHQgPSBjb250ZXh0LmVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IGxpbmUsIGNoOiAwIH0sIGNvbnRleHQuZW5kKS5tYXRjaChyZWdleCk7XG5cbiAgICAgICAgaWYgKHJlZ2V4UmVzdWx0ICYmIHJlZ2V4UmVzdWx0Lmdyb3Vwcz8uYXR0cmlidXRlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSByZWdleFJlc3VsdC5ncm91cHMuYXR0cmlidXRlO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzTGlzdCA9IHJlZ2V4UmVzdWx0Lmdyb3Vwcy52YWx1ZXM/LnJlcGxhY2UoL15cXFt8Xlxcc1xcWy8sICcnKS5yZXBsYWNlKC9cXF0kLywgJycpLnNwbGl0KFwiLFwiKS5tYXAobyA9PiBvLnRyaW0oKSlcbiAgICAgICAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IHZhbHVlc0xpc3Q/Lmxhc3QoKVxuICAgICAgICAgICAgY29uc3QgZmlyc3RWYWx1ZXMgPSB2YWx1ZXNMaXN0Py5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgIC8vdGFncyBzcGVjaWZpYyBjYXNcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09IFwidGFnc1wiICYmIHRoaXMuaW5Gcm9udG1hdHRlcikge1xuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldFRhZ3MoKSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcih0ID0+IGxhc3RWYWx1ZSA/IHQuY29udGFpbnMobGFzdFZhbHVlKSA6IHQpXG4gICAgICAgICAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgICAgICAgICAgLm1hcCh0YWcgPT4gT2JqZWN0KHsgdmFsdWU6IHRhZy5yZXBsYWNlKC9eIy8sIFwiXCIpIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiB0aGlzIG5vdGUgaGFzIGEgZmlsZUNsYXNzLCBjaGVjayBpZiBmaWVsZCB2YWx1ZXMgYXJlIGRlZmluZWQgaW4gdGhlIEZpbGVDbGFzc1xuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZShjb250ZXh0LmZpbGUucGF0aCk7XG4gICAgICAgICAgICBsZXQgdHJ5V2l0aFByZXNldEZpZWxkID0gIWNhY2hlPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChjYWNoZT8uZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBvc2l0aW9uLCAuLi5hdHRyaWJ1dGVzIH0gPSBjYWNoZS5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBbGlhcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5jb250YWlucyhmaWxlQ2xhc3NBbGlhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUNsYXNzVmFsdWUgPSBhdHRyaWJ1dGVzW2ZpbGVDbGFzc0FsaWFzXTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzcyA9IGF3YWl0IGNyZWF0ZUZpbGVDbGFzcyh0aGlzLnBsdWdpbiwgZmlsZUNsYXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBmaWxlQ2xhc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBdHRyaWJ1dGVzID0gdGhpcy5maWxlQ2xhc3MuYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ2xhc3NBdHRyaWJ1dGVzLm1hcChhdHRyID0+IGF0dHIubmFtZSkuY29udGFpbnMoZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBmaWxlQ2xhc3NBdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoYXR0ciA9PiBhdHRyLm5hbWUgPT0gZmllbGROYW1lKVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG9wdGlvbiA9PiB0aGlzLmZpbHRlck9wdGlvbihmaXJzdFZhbHVlcywgbGFzdFZhbHVlLCBvcHRpb24pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAob3B0aW9uID0+IE9iamVjdCh7IHZhbHVlOiBvcHRpb24gfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5V2l0aFByZXNldEZpZWxkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnlXaXRoUHJlc2V0RmllbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRyeVdpdGhQcmVzZXRGaWVsZCkge1xuICAgICAgICAgICAgICAgIC8vZWxzZSBjaGVjayBpZiB0aGVyZSBhcmUgZ2xvYmFsIHByZXNldCB2YWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVzZXRGaWVsZE1hdGNoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlc2V0RmllbGRzLmZpbHRlcihmaWVsZCA9PiBmaWVsZC5uYW1lID09IGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXNldEZpZWxkTWF0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVzZXRGaWVsZCA9IHByZXNldEZpZWxkTWF0Y2hbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNldEZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9vdmVycmlkZSBwcmVzZXRWYWx1ZXMgaWYgdGhlcmUgaXMgYSB2YWx1ZXNMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXNGaWxlID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwcmVzZXRGaWVsZC52YWx1ZXNMaXN0Tm90ZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc0ZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiB2YWx1ZXNGaWxlLmV4dGVuc2lvbiA9PSBcIm1kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXM6IHsgdmFsdWU6IHN0cmluZyB9W10gPSBhd2FpdCAoYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LnJlYWQodmFsdWVzRmlsZSkpLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIob3B0aW9uID0+IHRoaXMuZmlsdGVyT3B0aW9uKGZpcnN0VmFsdWVzLCBsYXN0VmFsdWUsIG9wdGlvbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoX3ZhbHVlID0+IE9iamVjdCh7IHZhbHVlOiBfdmFsdWUgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC5lbnRyaWVzKHByZXNldEZpZWxkTWF0Y2hbMF0udmFsdWVzKS5tYXAob3B0aW9uID0+IG9wdGlvblsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIob3B0aW9uID0+IHRoaXMuZmlsdGVyT3B0aW9uKGZpcnN0VmFsdWVzLCBsYXN0VmFsdWUsIG9wdGlvbikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoX3ZhbHVlID0+IE9iamVjdCh7IHZhbHVlOiBfdmFsdWUgfSkpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihzdWdnZXN0aW9uOiBJVmFsdWVDb21wbGV0aW9uLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgZWwuc2V0VGV4dChzdWdnZXN0aW9uLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgc2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uOiBJVmFsdWVDb21wbGV0aW9uLCBldmVudDogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgIGlmICghYWN0aXZlVmlldykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcbiAgICAgICAgY29uc3QgYWN0aXZlTGluZSA9IGVkaXRvci5nZXRMaW5lKHRoaXMuY29udGV4dCEuc3RhcnQubGluZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5Gcm9udG1hdHRlcikge1xuICAgICAgICAgICAgLy9mb3JtYXQgbGlzdCBpZiBpbiBmcm9udG1hdHRlclxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VkRmllbGQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdIHwgbnVsbD4gPSBwYXJzZVlhbWwoYWN0aXZlTGluZSlcbiAgICAgICAgICAgICAgICBsZXQgW2F0dHIsIHBhc3RWYWx1ZXNdID0gT2JqZWN0LmVudHJpZXMocGFyc2VkRmllbGQpWzBdXG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZpZWxkOiBzdHJpbmdcbiAgICAgICAgICAgICAgICBpZiAoIXBhc3RWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBhdHRyICsgXCI6IFwiICsgc3VnZ2VzdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXN0VmFsdWVzID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzdFZhbHVlcy5jb250YWlucyhcIixcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpZWxkID0gYXR0ciArIFwiOiBcIiArIHN1Z2dlc3Rpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IGF0dHIgKyBcIjogW1wiICsgcGFzdFZhbHVlcy5zcGxpdChcIixcIikubWFwKG8gPT4gby50cmltKCkpLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpICsgXCIsIFwiICsgc3VnZ2VzdGlvbi52YWx1ZSArIFwiXVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVMaW5lLmVuZHNXaXRoKFwiLF1cIikgfHwgYWN0aXZlTGluZS5lbmRzV2l0aChcIiwgXVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YWx1ZSBjYW4gYmUgZGlyZWN0bHkgYWRkZWQgc2luY2UgcGFyc2VZYW1sIHdvbnQgY3JlYXRlIGFuIGVtcHR5IGxhc3QgaXRlbSBpbiBwYXN0VmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IGF0dHIgKyBcIjogW1wiICsgWy4uLnBhc3RWYWx1ZXMsIHN1Z2dlc3Rpb24udmFsdWVdLmpvaW4oXCIsIFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy93ZSBoYXZlIHR5cGVkIHNvbWV0aGluZyB0aGF0IHdlIGFodmUgdG8gcmVtb3ZlIHRvIHJlcGxhY2Ugd2l0aCBzZWxlY3RlZCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBhdHRyICsgXCI6IFtcIiArIFsuLi5wYXN0VmFsdWVzLnNsaWNlKDAsIC0xKSwgc3VnZ2VzdGlvbi52YWx1ZV0uam9pbihcIiwgXCIpICsgXCJdXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpZWxkID0gYXR0ciArIFwiOiBbXCIgKyBbLi4ucGFzdFZhbHVlc10uam9pbihcIiwgXCIpICsgXCJdXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UobmV3RmllbGQsIHsgbGluZTogdGhpcy5jb250ZXh0IS5zdGFydC5saW5lLCBjaDogMCB9LCB7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IGFjdGl2ZUxpbmUubGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhc3RWYWx1ZXMpIHx8IHR5cGVvZiBwYXN0VmFsdWVzID09PSAnc3RyaW5nJyAmJiBwYXN0VmFsdWVzLmNvbnRhaW5zKFwiLFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogdGhpcy5jb250ZXh0IS5zdGFydC5saW5lLCBjaDogbmV3RmllbGQubGVuZ3RoIC0gMSB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiB0aGlzLmNvbnRleHQhLnN0YXJ0LmxpbmUsIGNoOiBuZXdGaWVsZC5sZW5ndGggfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJGcm9udG1hdHRlciB3cm9uZ2x5IGZvcm1hdHRlZFwiLCAyMDAwKVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9jbGVhbiBsaW5lIGJ5IHJlbW92aW5nIGV2ZXJ5dGhpbmcgYWZ0ZXIgLCBvciA6OlxuICAgICAgICAgICAgbGV0IGNsZWFuZWRMaW5lID0gYWN0aXZlTGluZVxuICAgICAgICAgICAgd2hpbGUgKCFbJywnLCAnOiddLmNvbnRhaW5zKGNsZWFuZWRMaW5lLmNoYXJBdChjbGVhbmVkTGluZS5sZW5ndGggLSAxKSkpIHtcbiAgICAgICAgICAgICAgICBjbGVhbmVkTGluZSA9IGNsZWFuZWRMaW5lLnNsaWNlKDAsIC0xKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShgJHtjbGVhbmVkTGluZX0ke2V2ZW50LnNoaWZ0S2V5ID8gXCIgXCIgOiBcIlwifWAgKyBzdWdnZXN0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHsgbGluZTogdGhpcy5jb250ZXh0IS5zdGFydC5saW5lLCBjaDogMCB9LCB0aGlzLmNvbnRleHQhLmVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWRTZWxlY3QgPSB0cnVlXG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH07XG59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
