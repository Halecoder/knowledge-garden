/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian29 = require("obsidian");

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian16 = require("obsidian");

// src/settings/FieldSettingsModal.ts
var import_obsidian14 = require("obsidian");

// src/fields/FieldManager.ts
var import_obsidian2 = require("obsidian");

// src/commands/replaceValues.ts
var import_obsidian = require("obsidian");

// src/utils/parser.ts
var fieldComponents = ["inList", "startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<inList>- )?(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => `(?<inList>- )?(?<startStyle>[_\\*~\`]*)(?<attribute>${attribute})(?<endStyle>[_\\*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)(?<values>[^\\]]+)`;
var fullLineRegex = new RegExp(`^${genericFieldRegex}::s*(?<values>.+)?`, "u");
var inSentenceRegexBrackets = new RegExp(`\\[${genericFieldRegex}::s*(?<values>[^\\]]+)?\\]`, "gu");
var inSentenceRegexPar = new RegExp(`\\(${genericFieldRegex}::s*(?<values>[^\\]]+)?\\)`, "gu");
var encodeLink = (value) => {
  return value ? value.replace(/\[\[/g, "\u{1F527}\u{1F400}").replace(/\]\]/g, "\u{1F413}\u{1F54C}") : value;
};
var decodeLink = (value) => {
  return value ? value.replace(/🔧🐀/gu, "[[").replace(/🐓🕌/gu, "]]") : value;
};
var getLineFields = (line) => {
  const fields = [];
  const fR = line.match(fullLineRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    fields.push({ attribute, values, index: 0, length: line.length });
  } else {
    const sRBk = encodeLink(line).matchAll(inSentenceRegexBrackets);
    let next = sRBk.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBk.next();
    }
    const sRBc = encodeLink(line).matchAll(inSentenceRegexPar);
    next = sRBc.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBc.next();
    }
  }
  fields.sort((a, b) => {
    if (a.index < b.index)
      return -1;
    if (a.index > b.index)
      return 1;
    return 0;
  });
  return fields;
};

// src/commands/replaceValues.ts
var LocationWrapper = {
  "fullLine": { start: "", end: "" },
  "brackets": { start: "[", end: "]" },
  "parenthesis": { start: "(", end: ")" }
};
var matchInlineFields = (regex, line, attribute, input, location = "fullLine") => {
  const sR = line.matchAll(regex);
  let next = sR.next();
  const newFields = [];
  while (!next.done) {
    const match = next.value;
    if (match.groups && Object.keys(match.groups).every((j) => fieldComponents.includes(j))) {
      const { inList, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = match.groups;
      const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
      const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
      const start2 = LocationWrapper[location].start;
      const end2 = LocationWrapper[location].end;
      newFields.push({
        oldField: match[0],
        newField: `${start2}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}${end2}`
      });
    }
    next = sR.next();
  }
  return newFields;
};
function replaceValues(app2, fileOrFilePath, attribute, input) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrFilePath instanceof import_obsidian.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const newContent = content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const encodedInput = encodeLink(input);
        let encodedLine = encodeLink(line);
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = encodedLine.match(fullLineRegex2);
        if ((fR == null ? void 0 : fR.groups) && Object.keys(fR.groups).every((j) => fieldComponents.includes(j))) {
          const { inList, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = fR.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          return `${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}`;
        } else {
          const newFields = [];
          const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
          const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
          newFields.push(...matchInlineFields(inSentenceRegexBrackets2, encodedLine, attribute, encodedInput, "brackets" /* brackets */));
          newFields.push(...matchInlineFields(inSentenceRegexPar2, encodedLine, attribute, encodedInput, "parenthesis" /* parenthesis */));
          newFields.forEach((field) => {
            const fieldRegex = new RegExp(field.oldField.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "u");
            encodedLine = encodedLine.replace(fieldRegex, field.newField);
          });
          return decodeLink(encodedLine);
        }
      }
    });
    app2.vault.modify(file, newContent.join("\n"));
  });
}

// src/fields/FieldManager.ts
var FieldManager2 = class {
  constructor(field, type) {
    if (field.type !== type)
      throw Error(`This field is not of type ${type}`);
    this.field = field;
  }
  validateName(textInput, insertAfter) {
    let error = false;
    if (/^[#>-]/.test(this.field.name)) {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name cannot start with #, >, -");
      error = true;
    }
    ;
    if (this.field.name == "") {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name can not be Empty");
      error = true;
    }
    ;
    return !error;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      return true;
    });
  }
  static replaceValues(app2, path, fieldName, value) {
    const file = app2.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian2.TFile && file.extension == "md") {
      replaceValues(app2, file, fieldName, value);
    }
  }
  static isMenu(category) {
    return category.addItem !== void 0;
  }
  static isSelect(category) {
    return category.modals !== void 0;
  }
  static createDefault(name) {
    const field = Field_default.createDefault(name);
    return new FieldManager[field.type](field);
  }
};

// src/optionModals/valueTextInputModal.ts
var import_obsidian3 = require("obsidian");
var valueTextInputModal = class extends import_obsidian3.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.parseDate = false;
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildInputEl(inputDiv);
  }
  buildDateParseToggler(container) {
    const nldates = app.plugins.plugins["nldates-obsidian"];
    const dateParserLabel = container.createDiv({
      cls: "metadata-menu-date-parser-label"
    });
    dateParserLabel.setText("\u{1F4C6}");
    const dateParserToggler = new import_obsidian3.ToggleComponent(container);
    dateParserToggler.setValue(this.parseDate);
    dateParserToggler.onChange((value) => {
      this.parseDate = value;
    });
    dateParserLabel.onclick = () => dateParserToggler.setValue(!this.parseDate);
  }
  buildInputEl(inputDiv) {
    if (app.plugins.plugins.hasOwnProperty("nldates-obsidian") && this.field.type === "Input" /* Input */) {
      this.buildDateParseToggler(inputDiv);
    }
    ;
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const inputEl = new import_obsidian3.TextComponent(form);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (app.plugins.plugins.hasOwnProperty("nldates-obsidian") && this.parseDate && this.field.type === "Input" /* Input */) {
        const nldates = app.plugins.plugins["nldates-obsidian"];
        const format2 = nldates.settings.format;
        let textStart = "";
        let textEnd = "";
        let date = "";
        const selectionStart = inputEl.inputEl.selectionStart;
        const selectionEnd = inputEl.inputEl.selectionEnd;
        if (selectionEnd == selectionStart) {
          date = nldates.parseDate(inputEl.getValue()).moment.format(format2);
        } else {
          textStart = inputEl.getValue().slice(0, selectionStart);
          date = nldates.parseDate(inputEl.getValue().slice(selectionStart, selectionEnd)).moment.format(format2);
          textEnd = inputEl.getValue().slice(selectionEnd);
        }
        ;
        inputValue = textStart + "[[" + date + "]]" + textEnd;
      }
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.field.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.field.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    });
  }
};

// src/fields/fieldManagers/InputField.ts
var InputField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Input" /* Input */);
  }
  getOptionsStr() {
    return "";
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new valueTextInputModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (InputField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (InputField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueTextInputModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      button.setText("\u{1F58D}");
      button.setAttr("class", "metadata-menu-dv-field-button");
      button.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        button.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        button.hide();
        spacer.show();
      };
      const validateIcon = document.createElement("button");
      validateIcon.textContent = "\u2705";
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = (e) => {
        InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
        fieldContainer.removeChild(inputContainer);
      };
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("button");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      cancelIcon.textContent = "\u274C";
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(button);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(spacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeydown = (e) => {
        if (e.key === "Enter") {
          InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
          fieldContainer.removeChild(inputContainer);
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(button);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(spacer);
        }
      };
      button.onclick = (e) => {
        fieldContainer.removeChild(fieldValue);
        fieldContainer.removeChild(button);
        fieldContainer.removeChild(spacer);
        fieldContainer.appendChild(inputContainer);
        input.focus();
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/optionModals/valueToggleModal.ts
var import_obsidian4 = require("obsidian");
var valueToggleModal = class extends import_obsidian4.Modal {
  constructor(app2, file, name, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({
      cls: "metadata-menu-toggler"
    });
    this.buildToggleEl(inputDiv);
  }
  buildToggleEl(inputDiv) {
    const toggleEl = new import_obsidian4.ToggleComponent(inputDiv);
    toggleEl.setValue(this.value);
    toggleEl.onChange((value) => {
      this.value = value;
    });
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian4.ButtonComponent(footer);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const value = this.value.toString();
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.name, value);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${value}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${value}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    }));
  }
};

// src/fields/fieldManagers/BooleanField.ts
var BooleanField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Boolean" /* Boolean */);
  }
  stringToBoolean(value) {
    let toBooleanValue = false;
    if (isBoolean(value)) {
      toBooleanValue = value;
    } else if (/true/i.test(value)) {
      toBooleanValue = true;
    } else if (/false/i.test(value)) {
      toBooleanValue = false;
    } else {
      throw Error("this value is not a boolean");
    }
    ;
    return toBooleanValue;
  }
  addMenuOption(name, value, app2, file, category) {
    const bValue = this.stringToBoolean(value);
    if (BooleanField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
        item.setIcon("checkmark");
        item.onClick(() => replaceValues(app2, file, name, (!bValue).toString()));
        item.setSection("target-metadata");
      });
    } else if (BooleanField.isSelect(category)) {
      category.addOption(`update_${name}`, `<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
      category.modals[`update_${name}`] = () => replaceValues(app2, file, name, (!bValue).toString());
    }
    ;
  }
  getOptionsStr() {
    return "";
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateValue(value) {
    return __async(this, null, function* () {
      try {
        const bValue = this.stringToBoolean(value);
        return isBoolean(bValue);
      } catch (error) {
        return false;
      }
    });
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueToggleModal(app2, file, this.field.name, false, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Set value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const checkbox = dv.el("input", "", __spreadProps(__spreadValues({}, attrs), { "type": "checkbox" }));
      checkbox.checked = p[this.field.name];
      fieldContainer.appendChild(checkbox);
      checkbox.onchange = (value) => {
        BooleanField.replaceValues(plugin.app, p["file"]["path"], this.field.name, checkbox.checked.toString());
      };
    });
  }
};

// src/optionModals/numberModal.ts
var import_obsidian5 = require("obsidian");
var numbertModal = class extends import_obsidian5.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv();
    this.buildInputEl(inputDiv);
  }
  decrement(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) - fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) - 1).toString());
    }
  }
  increment(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) + fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) + 1).toString());
    }
  }
  toggleButtonsState(minusBtn, plusBtn, inputEl) {
    minusBtn.setDisabled(!this.fieldManager.canDecrement(inputEl.getValue()));
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    if (this.fieldManager.canDecrement(inputEl.getValue())) {
      minusBtn.setCta();
    } else {
      minusBtn.removeCta();
    }
    if (this.fieldManager.canIncrement(inputEl.getValue())) {
      plusBtn.setCta();
    } else {
      plusBtn.removeCta();
    }
  }
  validateValue(value) {
    const { min: min2, max: max2 } = this.field.options;
    const fMin = parseFloat(min2);
    const fMax = parseFloat(max2);
    const fValue = parseFloat(value);
    return !isNaN(fValue) && (isNaN(fMin) || fValue >= fMin) && (isNaN(fMax) || fValue <= fMax);
  }
  buildInputEl(inputDiv) {
    const { step } = this.field.options;
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const fieldContainer = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn" });
    const inputEl = new import_obsidian5.TextComponent(fieldContainer);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    const minusBtn = new import_obsidian5.ButtonComponent(fieldContainer);
    minusBtn.setButtonText(`- ${!!step ? step : 1}`);
    const plusBtn = new import_obsidian5.ButtonComponent(fieldContainer);
    plusBtn.setButtonText(`+ ${!!step ? step : 1}`);
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    const errorField = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn-error-field" });
    errorField.hide();
    const footer = form.createEl("div", { cls: "metadata-menu-value-grid-footer" });
    const validateBtn = new import_obsidian5.ButtonComponent(footer);
    validateBtn.setIcon("checkmark");
    const cancelBtn = new import_obsidian5.ButtonComponent(footer);
    cancelBtn.setIcon("cross");
    this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    inputEl.onChange(() => {
      inputEl.inputEl.removeClass("is-invalid");
      errorField.hide();
      errorField.setText("");
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    plusBtn.onClick((e) => {
      e.preventDefault();
      this.increment(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    minusBtn.onClick((e) => {
      e.preventDefault();
      this.decrement(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    cancelBtn.onClick((e) => {
      e.preventDefault();
      this.close();
    });
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (!this.fieldManager.validateValue(inputValue)) {
        const { min: min2, max: max2 } = this.field.options;
        errorField.show();
        errorField.setText(`value must be numeric${min2 ? " and >= " + min2 : ""} ${max2 ? " and <= " + max2 : ""}`);
        inputEl.inputEl.setAttr("class", "is-invalid");
        return;
      }
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.field.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.field.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    });
  }
};

// src/fields/fieldManagers/NumberField.ts
var import_obsidian6 = require("obsidian");
var NumberField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Number" /* Number */);
  }
  getOptionsStr() {
    const options = [];
    Object.keys(this.field.options).forEach((k) => {
      if (this.field.options[k])
        options.push(`${k}: ${this.field.options[k]}`);
    });
    return options.join(" | ");
  }
  canDecrement(value) {
    const { step, min: min2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMin = parseFloat(min2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMin) && (!isNaN(fStep) && (parseFloat(value) - fStep < fMin || parseFloat(value) - 1 < fMin)));
  }
  canIncrement(value) {
    const { step, max: max2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMax = parseFloat(max2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMax) && (!isNaN(fStep) && (parseFloat(value) + fStep > fMax || parseFloat(value) + 1 > fMax)));
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const { min: min2, max: max2 } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fValue = parseFloat(value);
      return !isNaN(fValue) && (isNaN(fMin) || fValue >= fMin) && (isNaN(fMax) || fValue <= fMax);
    });
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new numbertModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (NumberField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
      const { min: min2, max: max2, step } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fStep = parseFloat(step);
      const fValue = parseFloat(value);
      if (fStep) {
        if (isNaN(fMin) || fMin && fValue - fStep > fMin)
          category.addItem((item) => {
            item.setIcon("pencil");
            item.setTitle(`<${name}> \u27A1\uFE0F ${fValue - fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue - fStep).toString()));
            item.setSection("target-metadata");
          });
        if (isNaN(fMax) || fMax && fValue + fStep < fMax)
          category.addItem((item) => {
            item.setIcon("pencil");
            item.setTitle(`<${name}> \u27A1\uFE0F ${fValue + fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue + fStep).toString()));
            item.setSection("target-metadata");
          });
      }
    } else if (NumberField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createNumberContainer(parentContainer) {
    const numberStepValueContainer = parentContainer.createDiv();
    numberStepValueContainer.createEl("span", { text: "Step (optional)", cls: "metadata-menu-field-option" });
    this.numberStepValue = new import_obsidian6.TextComponent(numberStepValueContainer);
    this.numberStepValue.setValue(this.field.options.step || "");
    const numberMinValueContainer = parentContainer.createDiv();
    numberMinValueContainer.createEl("span", { text: "Min value (optional)", cls: "metadata-menu-field-option" });
    this.numberMinValue = new import_obsidian6.TextComponent(numberMinValueContainer);
    this.numberMinValue.setValue(this.field.options.min || "");
    const numberMaxValueContainer = parentContainer.createDiv();
    numberMaxValueContainer.createEl("span", { text: "Max value (optional)", cls: "metadata-menu-field-option" });
    this.numberMaxValue = new import_obsidian6.TextComponent(numberMaxValueContainer);
    this.numberMaxValue.setValue(this.field.options.max || "");
    this.numberStepValue.onChange((value) => {
      this.field.options.step = value;
      FieldSettingsModal.removeValidationError(this.numberStepValue);
    });
    this.numberMinValue.onChange((value) => {
      this.field.options.min = value;
      FieldSettingsModal.removeValidationError(this.numberMinValue);
    });
    this.numberMaxValue.onChange((value) => {
      this.field.options.max = value;
      FieldSettingsModal.removeValidationError(this.numberMaxValue);
    });
  }
  createSettingContainer(parentContainer, plugin) {
    this.numberValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createNumberContainer(this.numberValidatorField);
    this.numberValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  validateOptions() {
    let error = false;
    if (this.field.options.step && isNaN(parseFloat(this.field.options.step))) {
      FieldSettingsModal.setValidationError(this.numberStepValue, this.numberStepValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.min && isNaN(parseFloat(this.field.options.min))) {
      FieldSettingsModal.setValidationError(this.numberMinValue, this.numberMinValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.max && isNaN(parseFloat(this.field.options.max))) {
      FieldSettingsModal.setValidationError(this.numberMaxValue, this.numberMaxValue.inputEl, "Values must be numeric.");
      error = true;
    }
    return !error;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new numbertModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  toggleDvButtons(decrementBtn, incrementBtn, value) {
    if (this.canDecrement(value)) {
      decrementBtn.removeClass("disabled");
    } else {
      decrementBtn.addClass("disabled");
    }
    if (this.canIncrement(value)) {
      incrementBtn.removeClass("disabled");
    } else {
      incrementBtn.addClass("disabled");
      ;
    }
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const tripleSpacer = document.createElement("div");
      tripleSpacer.setAttr("class", "metadata-menu-dv-field-triple-spacer");
      const editButton = document.createElement("button");
      editButton.setText("\u{1F58D}");
      editButton.setAttr("class", "metadata-menu-dv-field-button");
      editButton.hide();
      const decrementButton = document.createElement("button");
      decrementButton.setText("\u25C0\uFE0F");
      decrementButton.setAttr("class", "metadata-menu-dv-field-button");
      decrementButton.hide();
      const incrementButton = document.createElement("button");
      incrementButton.setText("\u25B6\uFE0F");
      incrementButton.setAttr("class", "metadata-menu-dv-field-button");
      incrementButton.hide();
      tripleSpacer.show();
      fieldContainer.onmouseover = () => {
        editButton.show();
        decrementButton.show();
        incrementButton.show();
        tripleSpacer.hide();
      };
      fieldContainer.onmouseout = () => {
        editButton.hide();
        decrementButton.hide();
        incrementButton.hide();
        tripleSpacer.show();
      };
      const validateIcon = document.createElement("a");
      validateIcon.textContent = "\u2705";
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = () => __async(this, null, function* () {
        if (yield this.validateValue(input.value)) {
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian6.TFile && file.extension == "md") {
            yield replaceValues(plugin.app, file, this.field.name, input.value);
            this.toggleDvButtons(decrementButton, incrementButton, input.value);
          }
          fieldContainer.removeChild(inputContainer);
        }
      });
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("a");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      cancelIcon.textContent = "\u274C";
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(decrementButton);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(editButton);
        fieldContainer.appendChild(incrementButton);
        fieldContainer.appendChild(tripleSpacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeyup = (e) => {
        if (!this.validateValue(input.value)) {
          input.addClass("is-invalid");
          validateIcon.addClass("disabled");
        } else {
          input.removeClass("is-invalid");
          validateIcon.removeClass("disabled");
        }
      };
      input.onkeydown = (e) => __async(this, null, function* () {
        if (e.key === "Enter") {
          if (yield this.validateValue(input.value)) {
            const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
            if (file instanceof import_obsidian6.TFile && file.extension == "md") {
              yield replaceValues(plugin.app, file, this.field.name, input.value);
              this.toggleDvButtons(decrementButton, incrementButton, input.value);
            }
            fieldContainer.removeChild(inputContainer);
          }
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(decrementButton);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(editButton);
          fieldContainer.appendChild(incrementButton);
          fieldContainer.appendChild(tripleSpacer);
        }
      });
      editButton.onclick = () => {
        fieldContainer.removeChild(fieldValue);
        fieldContainer.removeChild(editButton);
        fieldContainer.removeChild(decrementButton);
        fieldContainer.removeChild(incrementButton);
        fieldContainer.removeChild(tripleSpacer);
        fieldContainer.appendChild(inputContainer);
        input.focus();
      };
      decrementButton.onclick = () => __async(this, null, function* () {
        if (this.canDecrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian6.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] - fStep : p[this.field.name] - 1).toString();
            yield replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      });
      incrementButton.onclick = () => {
        if (this.canIncrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian6.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] + fStep : p[this.field.name] + 1).toString();
            replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      };
      fieldContainer.appendChild(decrementButton);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(editButton);
      fieldContainer.appendChild(incrementButton);
      fieldContainer.appendChild(tripleSpacer);
      this.toggleDvButtons(decrementButton, incrementButton, p[this.field.name]);
    });
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var import_obsidian11 = require("obsidian");

// src/settings/FieldSetting.ts
var import_obsidian7 = require("obsidian");
var FieldSetting = class extends import_obsidian7.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.field = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
  }
  setTextContentWithname() {
    const manager = new FieldManager[this.field.type](this.field);
    this.infoEl.textContent = "";
    this.infoEl.addClass("metadata-menu-setting-item");
    this.fieldNameContainer = this.infoEl.createEl("div", "metadata-menu-setting-item-name");
    this.fieldNameContainer.setText(this.field.name);
    this.typeContainer = this.infoEl.createEl("div");
    this.typeContainer.setAttr("class", `metadata-menu-setting-item-info-type ${FieldTypeTagClass[this.field.type]}`);
    this.typeContainer.setText(this.field.type);
    this.fieldOptionsContainer = this.infoEl.createEl("div");
    this.fieldOptionsContainer.setText(`${manager.getOptionsStr()}`);
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.field);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(notePath, app2) {
    return __async(this, null, function* () {
      let values = [];
      const file = app2.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian7.TFile && file.extension == "md") {
        const result = yield app2.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/suggester/FileSuggester.ts
var import_obsidian10 = require("obsidian");

// src/suggester/suggest.ts
var import_obsidian8 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app2, inputEl) {
    this.app = app2;
    this.inputEl = inputEl;
    this.scope = new import_obsidian8.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/utils/fileUtils.ts
var import_obsidian9 = require("obsidian");
function resolve_tfolder(app2, folder_str) {
  folder_str = (0, import_obsidian9.normalizePath)(folder_str);
  const folder = app2.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new Error(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian9.TFolder)) {
    throw new Error(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function get_tfiles_from_folder(app2, folder_str) {
  const folder = resolve_tfolder(app2, folder_str);
  const files = [];
  import_obsidian9.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian9.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.basename.localeCompare(b.basename);
  });
  return files;
}

// src/suggester/FileSuggester.ts
var FileSuggest = class extends TextInputSuggest {
  constructor(app2, inputEl, plugin, folder) {
    super(app2, inputEl);
    this.app = app2;
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.folder = folder;
  }
  getSuggestions(input_str) {
    const all_files = [];
    try {
      all_files.push(...get_tfiles_from_folder(this.app, this.folder));
    } catch (error) {
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian10.TFile && file.extension === "md" && file.path.toLowerCase().contains(lower_input_str)) {
        files.push(file);
      }
    });
    return files;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var AbstractListBasedField = class extends FieldManager2 {
  constructor(field, type) {
    super(field, type);
  }
  setValueListText(header) {
    header.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
  }
  createListNoteContainer(parentNode, plugin) {
    const listNoteContainerLabel = parentNode.createDiv({ cls: "metadata-menu-setting-fileClass-search" });
    listNoteContainerLabel.setText(`Path of the note containing the values:`);
    const input = new import_obsidian11.TextComponent(listNoteContainerLabel);
    new FileSuggest(plugin.app, input.inputEl, plugin, "/");
    const listNotePath = this.field.valuesListNotePath;
    input.setValue(listNotePath);
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.field.valuesListNotePath = value);
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.field.options) {
      if (key !== _key) {
        newValues[_key] = this.field.options[_key];
      }
      ;
    }
    ;
    this.field.options = newValues;
  }
  createValueContainer(parentNode, header, key) {
    const options = this.field.options;
    const presetValue = options[key];
    const valueContainer = parentNode.createDiv({
      cls: "metadata-menu-prompt-container"
    });
    const input = new import_obsidian11.TextComponent(valueContainer);
    this.valuesPromptComponents.push(input);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.field.options[key] = value;
      this.setValueListText(header);
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian11.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      this.setValueListText(header);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.field.options)[0]) {
      const valueUpgradeButton = new import_obsidian11.ButtonComponent(valueContainer);
      valueUpgradeButton.setButtonText("\u25B2");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = options[key];
        const inputIndex = this.valuesPromptComponents.indexOf(input);
        const upperComponent = inputIndex !== -1 ? this.valuesPromptComponents[inputIndex - 1] : this.valuesPromptComponents.last();
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(options).filter((k) => options[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            options[upperKey] = thisValue;
            input.setValue(upperValue);
            options[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      if (this.field.options && Object.values(this.field.options).length > 0) {
        return Object.values(this.field.options).includes(value.trim());
      } else if (this.field.valuesListNotePath) {
        const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, app);
        return listNoteValues.contains(value.trim());
      } else {
        return false;
      }
    });
  }
  getOptionsStr() {
    if (this.field.valuesListNotePath)
      return this.field.valuesListNotePath;
    else if (Object.values(this.field.options).length)
      return Object.values(this.field.options).join(", ");
    else
      return "";
  }
  validateOptions() {
    let error = false;
    this.valuesPromptComponents.forEach((input) => {
      var _a, _b, _c;
      if (/^[#>-]/.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
        error = true;
      }
      ;
      if (/[,]/gu.test(input.inputEl.value) && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
        error = true;
      }
      ;
      if (input.inputEl.value == "" && ((_c = input.inputEl.parentElement) == null ? void 0 : _c.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
        error = true;
      }
      ;
    });
    return !error;
  }
  createAddButton(valuesList, valuesListBody, valuesListHeader) {
    const valuesListFooter = valuesList.createDiv();
    const addValue = valuesListFooter.createEl("button");
    addValue.type = "button";
    addValue.textContent = "Add";
    addValue.onClickEvent((evt) => __async(this, null, function* () {
      evt.preventDefault;
      const newKey = yield this.field.insertNewValue("");
      this.createValueContainer(valuesListBody, valuesListHeader, newKey);
    }));
    valuesList.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  createSettingContainer(parentContainer, plugin, location) {
    if (location === 0 /* PluginSettings */)
      this.createListNoteContainer(parentContainer, plugin);
    this.presetValuesFields = parentContainer.createDiv();
    this.presetValuesFields.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
    const valuesList = this.presetValuesFields.createDiv();
    const valuesListHeader = valuesList.createDiv();
    valuesListHeader.createEl("h2");
    valuesListHeader.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
    const valuesListBody = valuesList.createDiv();
    Object.keys(this.field.options).forEach((key) => {
      this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
    });
    this.createAddButton(valuesList, valuesListBody, valuesListHeader);
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const fieldValue = dv.el("span", p[this.field.name]);
      fieldContainer.appendChild(fieldValue);
    });
  }
};

// src/optionModals/valueSelectModal.ts
var import_obsidian12 = require("obsidian");
var valueSelectModal = class extends import_obsidian12.Modal {
  constructor(app2, file, name, option, settings, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.option = option;
    this.settings = settings;
    this.newValue = null;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      yield this.buildInputEl(inputDiv);
    });
  }
  buildInputEl(inputDiv) {
    return __async(this, null, function* () {
      const selectEl = new import_obsidian12.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      const options = this.settings.options;
      selectEl.addOption("", "--Empty--");
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      listNoteValues.forEach((value) => selectEl.addOption(value, value));
      if (listNoteValues.includes(this.option)) {
        selectEl.setValue(this.option);
      }
      ;
      if (listNoteValues.length === 0) {
        Object.keys(options).forEach((key) => {
          selectEl.addOption(options[key], options[key]);
        });
        if (Object.values(options).includes(this.option)) {
          selectEl.setValue(this.option);
        }
        ;
      }
      selectEl.onChange((value) => this.newValue = value != "--Empty--" ? value : "");
      const submitButton = new import_obsidian12.ButtonComponent(inputDiv);
      submitButton.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          if (this.newValue || this.newValue == "") {
            replaceValues(this.app, this.file, this.name, this.newValue);
          }
          ;
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
    });
  }
};

// src/fields/fieldManagers/SelectField.ts
var SelectField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Select" /* Select */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new valueSelectModal(app2, file, this.field.name, value, this.field);
    modal.titleEl.setText("Select value");
    if (SelectField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon("right-triangle");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (SelectField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueSelectModal(app2, file, this.field.name, "", this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const valueContainer = document.createElement("div");
      ;
      const valueLabel = dv.el("span", p[this.field.name] || "");
      valueContainer.appendChild(valueLabel);
      const dropDownButton = document.createElement("button");
      dropDownButton.setText("\u{1F53D}");
      dropDownButton.addClass("metadata-menu-dv-field-button");
      valueContainer.appendChild(dropDownButton);
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const dismissBtn = document.createElement("button");
      dismissBtn.setText("\u274C");
      dismissBtn.addClass("metadata-menu-dv-field-button");
      selectContainer.appendChild(dismissBtn);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      Object.keys(this.field.options).forEach((o) => {
        const option = new Option(this.field.options[o], o);
        if (p[this.field.name] === this.field.options[o] || p[this.field.name] && Object.keys(p[this.field.name]).includes("path") && `[[${p[this.field.name].path.replace(".md", "")}]]` === this.field.options[o]) {
          option.selected = true;
        }
        select.add(option);
      });
      select.onchange = () => {
        let newValue = "";
        if (select.value !== void 0) {
          newValue = this.field.options[select.value];
        }
        fieldContainer.removeChild(selectContainer);
        fieldContainer.appendChild(valueContainer);
        SelectField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValue);
      };
      dropDownButton.onclick = () => {
        fieldContainer.removeChild(valueContainer);
        fieldContainer.appendChild(selectContainer);
      };
      dismissBtn.onclick = () => {
        fieldContainer.removeChild(selectContainer);
        fieldContainer.appendChild(valueContainer);
      };
      fieldContainer.appendChild(valueContainer);
    });
  }
};

// src/fields/fieldManagers/CycleField.ts
var CycleField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Cycle" /* Cycle */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const options = this.field.options;
    const keys = Object.keys(options);
    const keyForValue = keys.find((key) => options[key] === value);
    let nextOption;
    if (keyForValue) {
      const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
      nextOption = options[nextKey];
    } else {
      nextOption = options[Object.keys(options)[0]];
    }
    ;
    if (CycleField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`${name} : ${value} \u25B7 ${nextOption}`);
        item.setIcon("switch");
        item.onClick(() => replaceValues(app2, file, name, nextOption));
        item.setSection("target-metadata");
      });
    } else if (CycleField.isSelect(category)) {
      category.addOption(`${name}_${value}_${nextOption}`, `${name} : ${value} \u25B7 ${nextOption}`);
      category.modals[`${name}_${value}_${nextOption}`] = () => replaceValues(app2, file, name, nextOption);
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueSelectModal(app2, file, this.field.name, "", this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const options = this.field.options;
      const keys = Object.keys(options);
      const keyForValue = keys.find((key) => options[key] === p[this.field.name]);
      let nextOption;
      if (keyForValue) {
        const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
        nextOption = options[nextKey];
      } else {
        nextOption = options[Object.keys(options)[0]];
      }
      ;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      button.setText("\u25B6\uFE0F");
      button.setAttr("class", "metadata-menu-dv-field-button");
      button.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        button.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        button.hide();
        spacer.show();
      };
      button.onclick = (e) => {
        CycleField.replaceValues(plugin.app, p["file"]["path"], this.field.name, nextOption);
        button.hide();
        spacer.show();
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/optionModals/valueMultiSelectModal.ts
var import_obsidian13 = require("obsidian");
var valueMultiSelectModal = class extends import_obsidian13.Modal {
  constructor(app2, file, name, initialOptions, settings, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.settings = settings;
    if (initialOptions) {
      if (initialOptions.toString().startsWith("[[")) {
        this.options = initialOptions.split(",").map((item) => item.trim());
      } else {
        this.options = initialOptions.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
      }
      ;
    } else {
      this.options = [];
    }
    ;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const valueGrid = this.contentEl.createDiv({
        cls: "metadata-menu-value-grid"
      });
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      yield this.populateValuesGrid(valueGrid, listNoteValues);
    });
  }
  populateValuesGrid(valueGrid, listNoteValues) {
    return __async(this, null, function* () {
      if (listNoteValues.length === 0) {
        Object.keys(this.settings.options).forEach((key) => {
          const presetValue = this.settings.options[key];
          this.buildValueToggler(valueGrid, presetValue);
        });
      }
      ;
      listNoteValues.forEach((value) => {
        this.buildValueToggler(valueGrid, value);
      });
      const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const saveButton = new import_obsidian13.ButtonComponent(footer);
      saveButton.setIcon("checkmark");
      saveButton.onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          replaceValues(this.app, this.file, this.name, this.options.join(","));
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          const renderedValues = !this.inFrontmatter ? this.options.join(",") : this.options.length > 1 ? `[${this.options.join(",")}]` : this.options;
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${renderedValues}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${renderedValues}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
      const cancelButton = new import_obsidian13.ExtraButtonComponent(footer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => this.close());
    });
  }
  buildValueToggler(valueGrid, presetOption) {
    const valueSelectorContainer = valueGrid.createDiv({
      cls: "metadata-menu-value-selector-container"
    });
    const valueTogglerContainer = valueSelectorContainer.createDiv({
      cls: "metadata-menu-value-selector-toggler"
    });
    const valueToggler = new import_obsidian13.ToggleComponent(valueTogglerContainer);
    this.options.forEach((options) => {
      if (options == presetOption) {
        valueToggler.setValue(true);
      }
      ;
    });
    valueToggler.onChange((value) => {
      if (value && !this.options.includes(presetOption)) {
        this.options.push(presetOption);
      }
      ;
      if (!value) {
        this.options.remove(presetOption);
      }
      ;
    });
    const valueLabel = valueSelectorContainer.createDiv({ cls: "metadata-menu-value-selector-label" });
    valueLabel.setText(presetOption);
  }
};

// src/fields/fieldManagers/MultiField.ts
var MultiField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Multi" /* Multi */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new valueMultiSelectModal(app2, file, name, value, this.field);
    modal.titleEl.setText("Select values");
    if (MultiField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("bullet-list");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (MultiField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueMultiSelectModal(app2, file, this.field.name, "", this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select options for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      let valueHovered = false;
      let currentValues = [];
      if (p[this.field.name]) {
        if (Object.keys(p[this.field.name]).includes("path")) {
          currentValues = [`[[${p[this.field.name].path.replace(".md", "")}]]`];
        } else if (Array.isArray(p[this.field.name])) {
          currentValues.push(...p[this.field.name].last().split(",").map((v) => v.trim()));
        } else {
          currentValues = p[this.field.name].split(",").map((v) => v.trim());
        }
      }
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      Object.keys(this.field.options).filter((o) => !currentValues.contains(this.field.options[o])).forEach((o) => {
        const option = new Option(this.field.options[o], o);
        if (p[this.field.name] === this.field.options[o]) {
          option.selected = true;
        }
        select.add(option);
      });
      select.onchange = () => {
        const newValues = [...currentValues, this.field.options[select.value]].join(", ");
        MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValues);
        singleSpacer.hide();
        doubleSpacer.show();
        addBtn.hide();
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      select.onkeydown = (e) => {
        if (e.key === "Escape") {
          fieldContainer.appendChild(valuesContainer);
          fieldContainer.appendChild(singleSpacer);
          fieldContainer.appendChild(doubleSpacer);
          fieldContainer.removeChild(selectContainer);
        }
      };
      const closeSelect = document.createElement("button");
      closeSelect.setText("\u274C");
      closeSelect.addClass("metadata-menu-dv-field-button");
      closeSelect.addClass("multi");
      closeSelect.onclick = () => {
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      selectContainer.appendChild(closeSelect);
      const valuesContainer = document.createElement("div");
      valuesContainer.addClass("metadata-menu-dv-multi-values-container");
      currentValues.forEach((v) => {
        const valueContainer = document.createElement("div");
        valueContainer.addClass("metadata-menu-dv-multi-values-container");
        const valueRemoveBtn = document.createElement("button");
        valueRemoveBtn.setText("\u274C");
        valueRemoveBtn.addClass("metadata-menu-dv-field-button");
        valueRemoveBtn.addClass("multi");
        valueRemoveBtn.hide();
        valueRemoveBtn.onclick = () => {
          const remainingValues = currentValues.filter((cV) => cV !== v).join(", ");
          MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, remainingValues);
        };
        valueContainer.appendChild(valueRemoveBtn);
        const valueLabel = document.createElement("div");
        valueLabel.setText(v);
        valueLabel.addClass("metadata-menu-dv-multi-value-label");
        valueContainer.appendChild(valueLabel);
        valueContainer.onmouseover = () => {
          valueHovered = true;
          doubleSpacer.hide();
          singleSpacer.hide();
          valueRemoveBtn.show();
          valueLabel.addClass("hovered");
        };
        valueContainer.onmouseout = () => {
          valueHovered = false;
          valueRemoveBtn.hide();
          singleSpacer.show();
          doubleSpacer.hide();
          valueLabel.removeClass("hovered");
        };
        valuesContainer.appendChild(valueContainer);
      });
      const addBtn = document.createElement("button");
      addBtn.setText("\u2795");
      addBtn.setAttr("class", "metadata-menu-dv-field-button");
      addBtn.hide();
      valuesContainer.appendChild(addBtn);
      addBtn.onclick = () => {
        fieldContainer.removeChild(valuesContainer);
        fieldContainer.removeChild(singleSpacer);
        fieldContainer.removeChild(doubleSpacer);
        fieldContainer.appendChild(selectContainer);
      };
      const singleSpacer = document.createElement("div");
      singleSpacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const doubleSpacer = document.createElement("div");
      doubleSpacer.setAttr("class", "metadata-menu-dv-field-double-spacer");
      fieldContainer.onmouseover = () => {
        addBtn.show();
        doubleSpacer.hide();
        if (!valueHovered)
          singleSpacer.show();
      };
      fieldContainer.onmouseout = () => {
        addBtn.hide();
        singleSpacer.hide();
        doubleSpacer.show();
      };
      singleSpacer.hide();
      doubleSpacer.show();
      addBtn.hide();
      fieldContainer.appendChild(valuesContainer);
      fieldContainer.appendChild(singleSpacer);
      fieldContainer.appendChild(doubleSpacer);
    });
  }
};

// src/fields/fieldManagers/Managers.ts
var Managers = {
  Input: InputField,
  Boolean: BooleanField,
  Number: NumberField,
  Select: SelectField,
  Cycle: CycleField,
  Multi: MultiField
};
var Managers_default = Managers;

// src/types/fieldTypes.ts
var FieldTypeLabelMapping = {
  "Input": "Input" /* Input */,
  "Select": "Select" /* Select */,
  "Multi": "Multi" /* Multi */,
  "Cycle": "Cycle" /* Cycle */,
  "Boolean": "Boolean" /* Boolean */,
  "Number": "Number" /* Number */
};
var FieldTypeTagClass = {
  "Input": "single",
  "Select": "select",
  "Multi": "multi",
  "Cycle": "cycle",
  "Boolean": "boolean",
  "Number": "number"
};
var FieldTypeTooltip = {
  "Input": "Accept any value",
  "Select": "Accept a single value from a list",
  "Multi": "Accept multiple values from a list",
  "Cycle": "Cycle through values from a list",
  "Boolean": "Accept true of false",
  "Number": "Accept a number"
};
var FieldManager = {
  "Input": Managers_default.Input,
  "Select": Managers_default.Select,
  "Multi": Managers_default.Multi,
  "Cycle": Managers_default.Cycle,
  "Boolean": Managers_default.Boolean,
  "Number": Managers_default.Number
};

// src/fields/Field.ts
var Field = class {
  constructor(name = "", options = {}, id = "", valuesListNotePath = "", type = "Input" /* Input */) {
    this.name = name;
    this.options = options;
    this.id = id;
    this.valuesListNotePath = valuesListNotePath;
    this.type = type;
    this.insertNewValue.bind(this);
  }
  insertNewValue(value) {
    return __async(this, null, function* () {
      let newKey = 1;
      Object.keys(this.options).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKey) {
          newKey = parseInt(key) + 1;
        }
        ;
      });
      this.options[newKey.toString()] = value;
      return newKey.toString();
    });
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.valuesListNotePath = source.valuesListNotePath;
    target.type = source.type;
    Object.keys(source.options).forEach((k) => {
      target.options[k] = source.options[k];
    });
    Object.keys(target.options).forEach((k) => {
      if (!Object.keys(source.options).includes(k)) {
        delete target.options[k];
      }
      ;
    });
  }
  static createDefault(name) {
    const field = new Field();
    field.type = "Input" /* Input */;
    field.name = name;
    return field;
  }
};
var Field_default = Field;

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian14.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, field) {
    super(app2);
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialField = new Field_default();
    this.parentSettingContainer = parentSettingContainer;
    if (field) {
      this.new = false;
      this.field = field;
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.field = new Field_default();
      this.field.id = newId.toString();
      this.initialField.id = newId.toString();
    }
    ;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.field.name == "") {
        this.titleEl.setText(`Add a field and define options`);
      } else {
        this.titleEl.setText(`Manage settings options for ${this.field.name}`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.field, this.initialField);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.field, this.app, this.plugin);
    }
    ;
  }
  createnameInputContainer(parentNode) {
    const fieldNameContainerLabel = parentNode.createDiv();
    fieldNameContainerLabel.setText(`Field Name:`);
    const input = new import_obsidian14.TextComponent(parentNode);
    const name = this.field.name;
    input.setValue(name);
    input.setPlaceholder("Name of the field");
    input.onChange((value) => {
      this.field.name = value;
      this.titleEl.setText(`Manage predefined options for ${this.field.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    return input;
  }
  createTypeSelectorContainer(parentNode) {
    const typeSelectorContainerLabel = parentNode.createDiv();
    typeSelectorContainerLabel.setText(`Field type:`);
    const select = new import_obsidian14.DropdownComponent(parentNode);
    Object.keys(FieldTypeLabelMapping).forEach((f) => select.addOption(f, FieldTypeTooltip[f]));
    if (this.field.type) {
      select.setValue(this.field.type);
    }
    select.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.namePromptComponent.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({ cls: "metadata-menu-prompt-div" });
      const mainDiv = div.createDiv({ cls: "metadata-menu-prompt-form" });
      const nameContainer = mainDiv.createDiv();
      this.namePromptComponent = this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const typeSelectContainer = mainDiv.createDiv();
      this.fieldOptionsContainer = mainDiv.createDiv();
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian14.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
      this.createTypeSelectorContainer(typeSelectContainer);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.namePromptComponent, this.namePromptComponent.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveButton(b) {
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      let error = !this.validateFields();
      if (error) {
        new import_obsidian14.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.saved = true;
      const currentExistingField = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
      if (currentExistingField) {
        Field_default.copyProperty(currentExistingField, this.field);
      } else {
        this.plugin.initialProperties.push(this.field);
      }
      ;
      Field_default.copyProperty(this.initialField, this.field);
      if (this.parentSetting)
        Field_default.copyProperty(this.parentSetting.field, this.field);
      (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
      this.plugin.saveSettings();
      this.close();
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialField.name != "") {
        Object.assign(this.field, this.initialField);
      }
      ;
      this.close();
    });
    return b;
  }
  static setValidationError(textInput, insertAfter, message) {
    var _a;
    textInput.inputEl.addClass("is-invalid");
    if (message && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
      if (!mDiv) {
        mDiv = createDiv({ cls: "invalid-feedback" });
      }
      mDiv.innerText = message;
      mDiv.insertAfter(insertAfter);
    }
  }
  static removeValidationError(textInput) {
    var _a;
    if (textInput.inputEl.hasClass("is-invalid") && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      textInput.inputEl.removeClass("is-invalid");
      textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
    }
    ;
  }
};

// src/suggester/FolderSuggester.ts
var import_obsidian15 = require("obsidian");
var FolderSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian15.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings/MetadataMenuSettingTab.ts
var SettingsMigrationConfirmModal = class extends import_obsidian16.Modal {
  constructor(plugin, tab) {
    super(plugin.app);
    this.plugin = plugin;
    this.tab = tab;
  }
  onOpen() {
    this.titleEl.setText("Confirm");
    const body = this.contentEl.createDiv({
      cls: "modal-text-danger"
    });
    body.setText("This will erase current settings. Are you sure?");
    const confirmButton = new import_obsidian16.ButtonComponent(this.contentEl);
    confirmButton.setIcon("check");
    confirmButton.onClick(() => {
      if (this.app.plugins.plugins.hasOwnProperty("supercharged-links-obsidian")) {
        let settings = this.app.plugins.plugins["supercharged-links-obsidian"].settings;
        this.plugin.initialProperties = [];
        settings.presetFields.forEach((prop) => {
          const field = new Field_default();
          Object.assign(field, prop);
          this.plugin.initialProperties.push(field);
        });
        this.plugin.saveSettings();
        this.close();
      }
      ;
    });
  }
  onClose() {
    this.tab.display();
  }
};
var MetadataMenuSettingTab = class extends import_obsidian16.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const globalSettings = containerEl.createEl("div");
    globalSettings.createEl("h4", { text: "Global settings", cls: "metadata-menu-setting-section-header" });
    globalSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Global settings to apply to your whole vault"
    });
    new import_obsidian16.Setting(globalSettings).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian16.Setting(globalSettings).setName("Globally ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, "").split(",");
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    const presetFieldsSettings = containerEl.createEl("div");
    presetFieldsSettings.createEl("h4", { text: "Preset Fields settings", cls: "metadata-menu-setting-section-header" });
    presetFieldsSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage globally predefined type and options for a field throughout your whole vault"
    });
    new import_obsidian16.Setting(presetFieldsSettings).setName("Add New Field Setting").setDesc("Add a new Frontmatter property for which you want preset options.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.app, this.plugin, presetFieldsSettings);
        modal.open();
      }));
    });
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(presetFieldsSettings, property, this.app, this.plugin);
    });
    const classFilesSettings = containerEl.createEl("div");
    classFilesSettings.createEl("h4", { text: "FileClass settings", cls: "metadata-menu-setting-section-header" });
    classFilesSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage fileClass folder and alias. When a note has a fielClass defined, fileClass field properties will override global preset fields settings for the same field name"
    });
    new import_obsidian16.Setting(classFilesSettings).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addSearch((cfs) => {
      new FolderSuggest(this.app, cfs.inputEl);
      cfs.setPlaceholder("Folder").setValue(this.plugin.settings.classFilesPath).onChange((new_folder) => {
        const newPath = new_folder.endsWith("/") ? new_folder : new_folder + "/";
        this.plugin.settings.classFilesPath = newPath;
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    new import_obsidian16.Setting(classFilesSettings).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian16.Setting(classFilesSettings).setName("global fileClass").setDesc("Choose one fileClass to be applicable to all files (even it is not present as a fileClass attribute in their frontmatter). This will override the preset Fields defined above").addSearch((cfs) => {
      new FileSuggest(this.app, cfs.inputEl, this.plugin, this.plugin.settings.classFilesPath);
      cfs.setPlaceholder("Global fileClass");
      cfs.setValue(this.plugin.settings.globalFileClass ? this.plugin.settings.classFilesPath + this.plugin.settings.globalFileClass + ".md" : "").onChange((newPath) => {
        var _a;
        this.plugin.settings.globalFileClass = newPath ? (_a = newPath.split("\\").pop().split("/").pop()) == null ? void 0 : _a.replace(".md", "") : "";
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    const migrateSettings = containerEl.createEl("div");
    migrateSettings.createEl("h4", { text: "Migrate" });
    new import_obsidian16.Setting(migrateSettings).setName("Copy settings from supercharged links plugin").setDesc("Copy settings from supercharged links plugin").addButton((button) => {
      return button.setTooltip("Get settings from supercharged links").setButtonText("Copy").onClick(() => __async(this, null, function* () {
        let modal = new SettingsMigrationConfirmModal(this.plugin, this);
        modal.open();
      }));
    });
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: "",
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass",
  settingsVersion: void 0,
  globalFileClass: void 0
};

// src/commands/getValues.ts
var import_obsidian17 = require("obsidian");
function getValues(app2, fileOrfilePath, attribute) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian17.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian17.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const result = [];
    content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = line.match(fullLineRegex2);
        if (fR == null ? void 0 : fR.groups) {
          result.push(fR.groups.values);
        }
        ;
        const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
        const sRB = encodeLink(line).matchAll(inSentenceRegexBrackets2);
        let next = sRB.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRB.next();
        }
        const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
        const sRP = encodeLink(line).matchAll(inSentenceRegexPar2);
        next = sRP.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRP.next();
        }
      }
    });
    return result;
  });
}

// src/commands/getField.ts
function getField(plugin, propertyName, fileClass) {
  const matchingSettings = plugin.settings.presetFields.filter((p) => p.name == propertyName);
  if (fileClass) {
    const fileClassAttributesWithName = fileClass.attributes.filter((attr) => attr.name == propertyName);
    if (fileClassAttributesWithName.length > 0) {
      const fileClassAttribute = fileClassAttributesWithName[0];
      if (fileClassAttribute.type) {
        return fileClassAttribute.getField();
      } else if (matchingSettings.length > 0) {
        return matchingSettings[0];
      }
      ;
    }
  } else if (matchingSettings.length > 0) {
    return matchingSettings[0];
  }
  ;
}

// src/utils/textUtils.ts
var capitalize = (s) => {
  return s && s[0].toUpperCase() + s.slice(1);
};

// src/fileClass/fileClassAttribute.ts
var FileClassAttribute = class {
  constructor(raw, origin) {
    var _a, _b;
    this.origin = origin;
    const completeRegex = new RegExp(`^${genericFieldRegex}::(?<fieldSettings>.+)?`, "u");
    const nameRegex = new RegExp(`^${genericFieldRegex}$`, "u");
    let fieldName;
    let { attribute, fieldSettings } = ((_a = raw.match(completeRegex)) == null ? void 0 : _a.groups) || {};
    if (attribute) {
      fieldName = attribute;
    } else {
      let { attribute: attribute2 } = ((_b = raw.match(nameRegex)) == null ? void 0 : _b.groups) || {};
      fieldName = attribute2;
    }
    if (fieldName) {
      this.name = fieldName.trim();
      if (fieldSettings) {
        const settings = JSON.parse(`${fieldSettings.trim()}`);
        this.type = FieldTypeLabelMapping[capitalize(settings["type"])];
        this.options = settings["options"];
      } else {
        this.type = "Input" /* Input */;
      }
    } else {
      const error = new Error("Improper value");
      throw error;
    }
  }
  getField() {
    var _a;
    let options = {};
    if (Array.isArray(this.options)) {
      (_a = this.options) == null ? void 0 : _a.forEach((option, index) => {
        options[index] = option;
      });
    } else {
      options = this.options;
    }
    return new Field_default(this.name, options, this.name, void 0, this.type);
  }
};

// src/fileClass/fileClass.ts
var import_obsidian18 = require("obsidian");
var FileClassManager = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.basename == name);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassManager(this);
    this.attributes = [];
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian18.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error("no such fileClass in fileClass folder");
      throw error;
    }
  }
  getParentClass() {
    return;
  }
  getAttributes(excludeParents = false) {
    return __async(this, null, function* () {
      var _a, _b, _c, _d;
      try {
        const file = this.getClassFile();
        let attributes = [];
        let errors = [];
        const result = yield this.plugin.app.vault.cachedRead(file);
        const parent = (_b = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.extends;
        const excludedFields = (_d = (_c = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.excludes;
        if (parent && !excludeParents) {
          try {
            const parentFileClass = yield createFileClass(this.plugin, parent);
            yield parentFileClass.getAttributes();
            attributes = [...parentFileClass.attributes];
          } catch (error) {
            errors.push(error);
          }
        }
        result.split("\n").forEach((line) => {
          try {
            const attribute = new FileClassAttribute(line, this.name);
            attributes.push(attribute);
          } catch (error) {
            errors.push(error);
          }
        });
        this.attributes = Array.isArray(excludedFields) ? attributes.filter((attr) => !excludedFields.includes(attr.name)) : attributes;
        this.errors = errors;
      } catch (error) {
        throw error;
      }
    });
  }
  updateAttribute(newType, newName, newOptions, attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            if (newType == "Input") {
              newContent.push(`${newName}:: {"type": "Input"}`);
            } else {
              let settings = {};
              settings["type"] = newType;
              if (newOptions)
                settings["options"] = newOptions;
              newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
            }
          } else {
            newContent.push(line);
          }
        });
        this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        if (newOptions)
          settings["options"] = newOptions;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
};
function createFileClass(plugin, name, excludeParent = false) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      const fileClass = new FileClass(plugin, name);
      fileClass.getAttributes(excludeParent).then(() => {
        resolve(fileClass);
      }).catch((error) => {
        reject(error);
      });
    });
  });
}

// src/commands/fieldModifier.ts
function fieldModifier(plugin, dv, p, fieldName, attrs) {
  return __async(this, null, function* () {
    const fieldContainer = dv.el("div", "");
    fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
    if (p[fieldName] === void 0) {
      const emptyField = dv.el("span", null, attrs);
      fieldContainer.appendChild(emptyField);
    } else {
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (p[fileClassAlias] || plugin.settings.globalFileClass) {
        const fileClassName = p[fileClassAlias] || plugin.settings.globalFileClass;
        const fileClass = yield createFileClass(plugin, fileClassName);
        const field = getField(plugin, fieldName, fileClass);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
        const field = getField(plugin, fieldName);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else {
        const fieldManager = FieldManager2.createDefault(fieldName);
        yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
      }
    }
    return fieldContainer;
  });
}

// src/commands/fileFields.ts
var import_obsidian19 = require("obsidian");
var FieldInfo = class {
  constructor() {
    this.type = void 0;
    this.sourceType = void 0;
    this.fileClass = void 0;
    this.options = void 0;
    this.isValid = void 0;
    this.value = "";
    this.valuesListNotePath = void 0;
    this.unique = true;
  }
  setInfos(plugin, fieldName, value, fileClass) {
    return __async(this, null, function* () {
      this.value = value;
      this.ignoreInMenu = plugin.settings.globallyIgnoredFields.includes(fieldName);
      if (fileClass) {
        const fileClassFields = fileClass.attributes.map((attr) => attr.name);
        if (fileClassFields.includes(fieldName)) {
          const field = getField(plugin, fieldName, fileClass);
          if (field) {
            const fieldManager = new FieldManager[field.type](field);
            this.isValid = yield fieldManager.validateValue(value);
            this.sourceType = "fileClass";
            const attribute = fileClass.attributes.filter((a) => a.name === fieldName)[0];
            this.fileClass = attribute.origin;
            this.type = attribute.type;
            this.options = attribute.options;
          }
        }
      } else if (plugin.settings.presetFields.map((f) => f.name).includes(fieldName)) {
        const field = getField(plugin, fieldName);
        if (field) {
          const fieldManager = new FieldManager[field.type](field);
          this.isValid = yield fieldManager.validateValue(value);
          this.type = field.type;
          this.options = field.options;
          this.valuesListNotePath = field.valuesListNotePath;
          this.sourceType = "settings";
        }
      }
    });
  }
};
function fileFields(plugin, fileOrfilePath) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian19.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian19.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const frontmatter = (_a = plugin.app.metadataCache.getCache(file.path)) == null ? void 0 : _a.frontmatter;
    const fields = {};
    let fileClass;
    if (plugin.settings.globalFileClass) {
      try {
        fileClass = yield createFileClass(plugin, plugin.settings.globalFileClass);
      } catch (error) {
        fileClass = void 0;
      }
    }
    if (frontmatter) {
      const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (Object.keys(attributes).includes(fileClassAlias)) {
        const fileClassName = attributes[fileClassAlias];
        try {
          fileClass = yield createFileClass(plugin, fileClassName);
        } catch (error) {
          fileClass = void 0;
        }
      }
      Object.keys(attributes).forEach((key) => __async(this, null, function* () {
        const fieldInfo = new FieldInfo();
        fieldInfo.unique = !Object.keys(fields).includes(key);
        fields[key] = fieldInfo;
        yield fieldInfo.setInfos(plugin, key, attributes[key], fileClass);
      }));
    }
    const result = yield plugin.app.vault.read(file);
    result.split("\n").map((line) => __async(this, null, function* () {
      const lineFields = getLineFields(line);
      lineFields.forEach((_0) => __async(this, [_0], function* ({ attribute, values }) {
        const fieldName = attribute.trim();
        const fieldInfo = new FieldInfo();
        fieldInfo.unique = !Object.keys(fields).includes(fieldName);
        fields[fieldName] = fieldInfo;
        yield fieldInfo.setInfos(plugin, fieldName, values, fileClass);
      }));
    }));
    return fields;
  });
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      fieldModifier: this.fieldModifier(),
      fileFields: this.fileFields()
    };
  }
  getValues() {
    return (fileOrFilePath, attribute) => __async(this, null, function* () {
      return getValues(this.plugin.app, fileOrFilePath, attribute);
    });
  }
  replaceValues() {
    return (fileOrFilePath, attribute, input) => __async(this, null, function* () {
      return replaceValues(this.plugin.app, fileOrFilePath, attribute, input);
    });
  }
  fieldModifier() {
    return (dv, p, fieldName, attrs) => fieldModifier(this.plugin, dv, p, fieldName, attrs);
  }
  fileFields() {
    return (fileOrFilePath) => __async(this, null, function* () {
      return fileFields(this.plugin, fileOrFilePath);
    });
  }
};

// src/options/linkContextMenu.ts
var import_obsidian27 = require("obsidian");

// src/optionModals/chooseSectionModal.ts
var import_obsidian22 = require("obsidian");

// src/optionModals/fieldSelectModal.ts
var import_obsidian21 = require("obsidian");

// src/optionModals/addNewFieldModal.ts
var import_obsidian20 = require("obsidian");
var addNewFieldModal = class extends import_obsidian20.Modal {
  constructor(plugin, lineNumber, file, inFrontmatter, top2) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontmatter;
    this.file = file;
    this.top = top2;
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const addNewFieldContainer = this.contentEl.createDiv();
    const nameInputContainer = addNewFieldContainer.createDiv();
    nameInputContainer.setText("Field Name: ");
    const nameInputEl = new import_obsidian20.TextComponent(nameInputContainer);
    nameInputEl.setPlaceholder("Field name");
    const valueInputContainer = addNewFieldContainer.createDiv();
    valueInputContainer.setText("Field value: ");
    const valueInputEl = new import_obsidian20.TextComponent(valueInputContainer);
    valueInputEl.setPlaceholder("Field value");
    const footerButtons = this.contentEl.createDiv({
      cls: "metadata-menu-textarea-buttons"
    });
    const saveButton = new import_obsidian20.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const result = yield this.app.vault.read(this.file);
      let newContent = [];
      if (this.top) {
        newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
      } else {
        result.split("\n").forEach((line, _lineNumber) => {
          newContent.push(line);
          if (_lineNumber == this.lineNumber) {
            newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
          }
        });
      }
      this.app.vault.modify(this.file, newContent.join("\n"));
      this.close();
    }));
    const cancelButton = new import_obsidian20.ExtraButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/optionModals/fieldSelectModal.ts
var fieldSelectModal = class extends import_obsidian21.Modal {
  constructor(plugin, file, lineNumber, line, inFrontmatter, top2, fileClass) {
    super(plugin.app);
    this.line = line;
    this.lineNumber = lineNumber;
    this.plugin = plugin;
    this.file = file;
    this.inFrontmatter = inFrontmatter;
    this.top = top2;
    this.fileClass = fileClass;
  }
  onOpen() {
    this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
    const container = this.contentEl.createDiv({ cls: "metadata-menu-field-select" });
    const settingsDropdownContainer = container.createDiv();
    const settingsSelector = new import_obsidian21.DropdownComponent(settingsDropdownContainer);
    settingsSelector.addOption("---", "Choose Field");
    settingsSelector.addOption("++New", "New");
    if (this.fileClass) {
      this.fileClass.attributes.forEach((attr) => {
        settingsSelector.addOption(attr.name, attr.name);
      });
    } else {
      this.plugin.settings.presetFields.forEach((setting) => {
        settingsSelector.addOption(setting.name, setting.name);
      });
    }
    ;
    settingsSelector.onChange((selectedFieldName) => {
      if (selectedFieldName == "++New") {
        const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
        newFieldModal.open();
        this.close();
      } else if (this.fileClass) {
        const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == selectedFieldName);
        let field;
        let type;
        if (fileClassAttributesWithName.length > 0) {
          const fileClassAttribute = fileClassAttributesWithName[0];
          field = fileClassAttribute.getField();
          type = fileClassAttribute.type;
        }
        if (field) {
          const fieldManager = new FieldManager[field.type](field);
          fieldManager.createAndOpenFieldModal(this.app, this.file, selectedFieldName, this.lineNumber, this.inFrontmatter, this.top);
        }
        this.close();
      } else {
        const field = this.plugin.settings.presetFields.filter((_field) => _field.name == selectedFieldName)[0];
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.createAndOpenFieldModal(this.app, this.file, selectedFieldName, this.lineNumber, this.inFrontmatter, this.top);
        this.close();
      }
      ;
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var chooseSectionModal = class extends import_obsidian22.Modal {
  constructor(plugin, file, fileClass) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
    this.fileClass = fileClass;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText("Add a field in this note after:");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      const selectEl = new import_obsidian22.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      selectEl.addOption("", "Select line");
      selectEl.addOption("top_0", "top");
      const result = yield this.app.vault.read(this.file);
      let foreHeadText = false;
      let frontmatterStart = false;
      let frontmatterEnd = false;
      let inFrontmatter = false;
      result.split("\n").forEach((line, lineNumber) => {
        if (line != "---" && !foreHeadText && !frontmatterStart) {
          foreHeadText = true;
        }
        ;
        if (line == "---" && !foreHeadText) {
          if (!frontmatterStart) {
            frontmatterStart = true;
            inFrontmatter = true;
          } else if (!frontmatterEnd) {
            frontmatterEnd = true;
            inFrontmatter = false;
          }
          ;
        }
        if (inFrontmatter) {
          selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        } else {
          selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        }
        ;
      });
      selectEl.onChange(() => {
        const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
        const position = valueArray && valueArray.length > 0 ? valueArray[1] : 0;
        const lineNumber = Number(valueArray && valueArray.length > 1 ? valueArray[2] : 0);
        const inFrontmatter2 = position == "frontmatter" ? true : false;
        const top2 = position == "top" ? true : false;
        const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split("\n")[lineNumber], inFrontmatter2, top2, this.fileClass);
        this.close();
        modal.open();
      });
    });
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var import_obsidian24 = require("obsidian");

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian23 = require("obsidian");
var FileClassAttributeModal = class extends import_obsidian23.Modal {
  constructor(plugin, fileClass, attr) {
    super(plugin.app);
    this.plugin = plugin;
    this.attr = attr;
    this.fileClass = fileClass;
    this.initialField = new Field_default();
    if (this.attr) {
      this.field = attr.getField();
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      this.field = new Field_default();
    }
    this.fieldManager = new FieldManager[this.field.type](this.field);
    this.nameInputContainer = this.contentEl.createDiv();
    this.typeSelectContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    this.fieldOptionsContainer = this.contentEl.createDiv();
  }
  buildNameInputContainer() {
    this.nameInputContainer.setText("Name: ");
    this.nameInput = new import_obsidian23.TextComponent(this.nameInputContainer);
    this.attr ? this.nameInput.setValue(this.field.name) : this.nameInput.setPlaceholder("Type a name for this attribute");
    this.nameInput.onChange((value) => {
      this.field.name = value;
      this.attrName.setText(`<${value}>`);
    });
    this.typeSelectContainer.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  buildTypeSelectContainer() {
    const typeSelectHeader = this.typeSelectContainer.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    this.attrName = attrLine.createEl("strong");
    this.attrName.setText(`<${this.field.name}>`);
    attrLine.append(" fields in files with:");
    String(`---
${this.plugin.settings.fileClassAlias}: ${this.fileClass.name}
...
---`).split("\n").forEach((line) => {
      typeSelectHeader.createEl("div", "yaml-metadata-menu-red").setText(line);
    });
    const typeSelectLabel = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label" });
    typeSelectLabel.setText("will: ");
    const typeSelectDropDown = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-toggler" });
    const typeSelect = new import_obsidian23.DropdownComponent(typeSelectDropDown);
    Object.keys(FieldTypeTooltip).forEach((key) => typeSelect.addOption(key, FieldTypeTooltip[key]));
    typeSelect.setValue(this.field.type);
    typeSelect.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.nameInput.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.nameInput, this.nameInput.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveBtn(container) {
    const saveButton = new import_obsidian23.ButtonComponent(container);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => {
      let error = !this.validateFields();
      if (error) {
        new import_obsidian23.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.fileClass.updateAttribute(this.field.type, this.field.name, this.field.options, this.attr);
      this.close();
    });
  }
  createRemovelBtn(container) {
    const removeButton = new import_obsidian23.ButtonComponent(container);
    removeButton.setIcon("trash");
    removeButton.onClick(() => {
      var _a;
      const confirmModal = new import_obsidian23.Modal(this.plugin.app);
      confirmModal.titleEl.setText("Please confirm");
      confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
      const confirmFooter = confirmModal.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const confirmButton = new import_obsidian23.ButtonComponent(confirmFooter);
      confirmButton.setIcon("checkmark");
      confirmButton.onClick(() => {
        if (this.attr)
          this.fileClass.removeAttribute(this.attr);
        confirmModal.close();
        this.close();
      });
      const dismissButton = new import_obsidian23.ExtraButtonComponent(confirmFooter);
      dismissButton.setIcon("cross");
      dismissButton.onClick(() => this.close());
      confirmModal.open();
    });
  }
  createCancelBtn(container) {
    const cancelButton = new import_obsidian23.ExtraButtonComponent(container);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
  onOpen() {
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    this.buildNameInputContainer();
    this.buildTypeSelectContainer();
    this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    this.createSaveBtn(footer);
    if (this.attr)
      this.createRemovelBtn(footer);
    this.createCancelBtn(footer);
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var FileClassAttributeSelectModal = class extends import_obsidian24.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to update`);
      const fileClass = yield createFileClass(this.plugin, this.file.basename, true);
      this.titleEl.setText(`Select the field to update in ${fileClass.name}`);
      const selectContainer = this.contentEl.createDiv();
      const select = new import_obsidian24.DropdownComponent(selectContainer);
      select.addOption("select an attribute", "--select an attribute--");
      fileClass.attributes.forEach((attr) => {
        select.addOption(attr.name, attr.name);
      });
      select.addOption("++newAttr++", "++Add a new attribute++");
      select.onChange((attrName) => {
        if (attrName == "++newAttr") {
          const modal = new FileClassAttributeModal(this.plugin, fileClass);
          modal.open();
          this.close();
        } else {
          const modal = new FileClassAttributeModal(this.plugin, fileClass, fileClass.attributes.filter((attr) => attr.name == attrName)[0]);
          modal.open();
          this.close();
        }
      });
    });
  }
};

// src/options/OptionsList.ts
function isMenu(category) {
  return category.addItem !== void 0;
}
function isSelect(category) {
  return category.modals !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, category) {
    this.file = file;
    this.plugin = plugin;
    this.category = category;
    this.attributes = {};
    this.fileClassFields = [];
    this.fileClassForFields = false;
  }
  fetchFrontmatterFields() {
    return __async(this, null, function* () {
      var _a;
      const frontmatter = (_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter;
      if (frontmatter) {
        const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
        Object.keys(attributes).forEach((key) => {
          if (!this.plugin.settings.globallyIgnoredFields.includes(key)) {
            this.attributes[key] = attributes[key];
          }
          ;
        });
        const fileClassAlias = this.plugin.settings.fileClassAlias;
        if (Object.keys(this.attributes).includes(fileClassAlias) || this.plugin.settings.globalFileClass) {
          const fileClass = this.attributes[fileClassAlias] || this.plugin.settings.globalFileClass;
          try {
            const _fileClass = yield createFileClass(this.plugin, fileClass);
            this.fileClass = _fileClass;
            this.fileClassFields = _fileClass.attributes.map((attr) => attr.name);
            this.fileClassForFields = true;
            Object.keys(attributes).forEach((key) => {
              if (!this.fileClassFields.includes(key) && key != fileClassAlias) {
                delete this.attributes[key];
              }
              ;
            });
          } catch (error) {
          }
        }
      }
    });
  }
  fetchInlineFields() {
    return __async(this, null, function* () {
      const result = yield this.plugin.app.vault.read(this.file);
      result.split("\n").map((line) => {
        const lineFields = getLineFields(line);
        lineFields.forEach(({ attribute, values }) => {
          if (attribute && !this.plugin.settings.globallyIgnoredFields.includes(attribute.trim())) {
            if (this.fileClassForFields) {
              if (this.fileClassFields.includes(attribute.trim())) {
                this.attributes[attribute.trim()] = values ? values.trim() : "";
              }
              ;
            } else {
              this.attributes[attribute.trim()] = values ? values.trim() : "";
            }
            ;
          }
          ;
        });
      });
    });
  }
  createExtraOptionList() {
    return __async(this, null, function* () {
      yield this.fetchFrontmatterFields();
      yield this.fetchInlineFields();
      if (this.fileClass) {
        const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, this.fileClass.getClassFile());
        if (isMenu(this.category)) {
          this.category.addSeparator();
          this.category.addItem((item) => {
            item.setIcon("gear");
            item.setTitle(`Manage <${this.fileClass.name}> fields`);
            item.onClick(() => fileClassAttributeSelectModal.open());
          });
        } else {
          this.category.addOption("manage_fileClass_attributes", `Manage <${this.fileClass.name}> fields`);
          this.category.modals["manage_fileClass_attributes"] = () => fileClassAttributeSelectModal.open();
        }
        ;
      }
      if (isMenu(this.category)) {
        this.category.addSeparator();
      }
      ;
      this.buildFieldOptions();
      this.addSectionSelectModalOption();
    });
  }
  buildFieldOptions() {
    Object.keys(this.attributes).forEach((key) => {
      const value = this.attributes[key];
      const field = getField(this.plugin, key, this.fileClass);
      if (field) {
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.addMenuOption(key, value, this.plugin.app, this.file, this.category);
      } else {
        const defaultField = new Field_default(key);
        defaultField.type = "Input" /* Input */;
        const fieldManager = new Managers_default.Input(defaultField);
        fieldManager.addMenuOption(key, value, this.plugin.app, this.file, this.category);
      }
    });
  }
  addSectionSelectModalOption() {
    const modal = new chooseSectionModal(this.plugin, this.file, this.fileClass);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setIcon("pencil");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption("add_field_at_section", "Add field at section...");
      this.category.modals["add_field_at_section"] = () => modal.open();
    }
    ;
  }
};

// src/options/NoteFieldsCommandsModal.ts
var import_obsidian26 = require("obsidian");

// src/optionModals/SelectModal.ts
var import_obsidian25 = require("obsidian");
var SelectModal = class extends import_obsidian25.DropdownComponent {
  constructor(containerEl) {
    super(containerEl);
    this.modals = {};
  }
};

// src/options/NoteFieldsCommandsModal.ts
var NoteFieldsCommandsModal = class extends import_obsidian26.Modal {
  constructor(app2, plugin, file) {
    super(app2);
    this.app = app2;
    this.plugin = plugin;
    this.file = file;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to manage`);
      this.containerEl.addClass("metadata-menu");
      const optionsListContainer = this.contentEl.createDiv({ cls: "field-options" });
      this.select = new SelectModal(optionsListContainer);
      this.select.addOption("---", "Choose Field");
      this.optionsList = new OptionsList(this.plugin, this.file, this.select);
      yield this.optionsList.createExtraOptionList();
      this.select.onChange((value) => {
        this.select.modals[value]();
        this.close();
      });
      this.select.selectEl.focus();
    });
  }
};

// src/options/linkContextMenu.ts
var linkContextMenu = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.createContextMenu();
  }
  createContextMenu() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
      if (file instanceof import_obsidian27.TFile && file.extension === "md") {
        this.file = file;
        if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
          menu.addSeparator();
          menu.addItem((item) => {
            item.setIcon("gear");
            item.setTitle(`Manage <${file.basename}> fields`);
            item.onClick((evt) => {
              const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, file);
              fileClassAttributeSelectModal.open();
            });
          });
        } else {
          if (this.plugin.settings.displayFieldsInContextMenu) {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            this.optionsList.createExtraOptionList();
          } else {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            menu.addItem((item) => {
              item.setIcon("bullet-list"), item.setTitle(`Field Options`), item.onClick((evt) => {
                const fieldOptions = new NoteFieldsCommandsModal(app, this.plugin, file);
                fieldOptions.open();
              });
              item.setSection("target-metadata");
            });
          }
        }
        ;
      }
      ;
    }));
  }
};

// src/suggester/metadataSuggester.ts
var import_obsidian28 = require("obsidian");
var ValueSuggest = class extends import_obsidian28.EditorSuggest {
  constructor(app2, plugin) {
    super(app2);
    this.inFrontmatter = false;
    this.inFullLine = false;
    this.inSentence = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(encodeLink(option))) && (!lastValue || !!lastValue && encodeLink(option).contains(lastValue));
    };
    this.app = app2;
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    const frontmatter = this.plugin.app.metadataCache.getFileCache(file).frontmatter;
    const fullLine = editor.getLine(editor.getCursor().line);
    this.inFrontmatter = frontmatter !== void 0 && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    if (this.inFrontmatter) {
      const regex = new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u");
      if (!regex.test(fullLine))
        return null;
    } else if (getLineFields(fullLine).length === 0) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a;
      const lineNumber = context.start.line;
      const matchField = { attribute: void 0, values: "" };
      if (!this.inFrontmatter) {
        const lineFields = getLineFields(encodeLink(context.editor.getLine(lineNumber)));
        const position = context.editor.getCursor().ch;
        const activeLineField = lineFields.find((lineField) => lineField.index <= position && lineField.index + lineField.length >= position);
        if (activeLineField) {
          this.inSentence = activeLineField.index > 0;
          this.inFullLine = activeLineField.index === 0;
          matchField.attribute = activeLineField.attribute;
          matchField.values = activeLineField.values;
        }
      } else {
        const regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
        const regexResult = context.editor.getRange({ line: lineNumber, ch: 0 }, context.end).match(regex);
        if (regexResult == null ? void 0 : regexResult.groups) {
          matchField.attribute = regexResult.groups.attribute;
          matchField.values = regexResult.groups.values;
        }
      }
      ;
      if (matchField.attribute) {
        const fieldName = matchField.attribute;
        const valuesList = (_a = matchField.values) == null ? void 0 : _a.replace(/^\[|^\s\[|^\(|^\s\(/, "").replace(/\]$|\)$/, "").split(",").map((o) => encodeLink(o.trim()));
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        const cache = this.plugin.app.metadataCache.getCache(context.file.path);
        let tryWithPresetField = !(cache == null ? void 0 : cache.frontmatter);
        if (cache == null ? void 0 : cache.frontmatter) {
          const _b = cache.frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
          const fileClassAlias = this.plugin.settings.fileClassAlias;
          if (Object.keys(attributes).contains(fileClassAlias)) {
            const fileClassValue = attributes[fileClassAlias];
            try {
              const fileClass = yield createFileClass(this.plugin, fileClassValue);
              this.fileClass = fileClass;
              const fileClassAttributes = this.fileClass.attributes;
              if (fileClassAttributes.map((attr) => attr.name).contains(fieldName)) {
                const field = fileClassAttributes.find((attr) => attr.name == fieldName).getField();
                if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(field.type)) {
                  const filteredOptions = Array.isArray(field.options) ? field.options.filter((option) => this.filterOption(firstValues, lastValue, option)) : Object.keys(field.options).map((k) => field.options[k]).filter((option) => this.filterOption(firstValues, lastValue, option));
                  return filteredOptions.map((option) => Object({ value: option }));
                } else {
                  return [];
                }
              }
            } catch (error) {
              tryWithPresetField = true;
            }
            ;
          } else {
            tryWithPresetField = true;
          }
          ;
        }
        ;
        if (tryWithPresetField) {
          const presetField = this.plugin.settings.presetFields.find((field) => field.name == fieldName);
          if (presetField) {
            if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(presetField.type)) {
              if (presetField.valuesListNotePath) {
                const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.valuesListNotePath);
                if (valuesFile instanceof import_obsidian28.TFile && valuesFile.extension == "md") {
                  const values2 = yield (yield this.plugin.app.vault.read(valuesFile)).split("\n").filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
                  return values2;
                }
                ;
              }
              ;
              const values = Object.entries(presetField.options).map((option) => option[1]).filter((option) => this.filterOption(firstValues, lastValue, option));
              return values.map((_value) => Object({ value: _value }));
            } else {
              return [];
            }
          }
          ;
        }
        ;
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.value);
  }
  selectSuggestion(suggestion, event) {
    var _a;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian28.MarkdownView);
    if (!activeView) {
      return;
    }
    ;
    const editor = activeView.editor;
    const activeLine = editor.getLine(this.context.start.line);
    if (this.inFrontmatter) {
      try {
        let parsedField = (0, import_obsidian28.parseYaml)(activeLine);
        let [attr, pastValues] = Object.entries(parsedField)[0];
        let newField;
        if (!pastValues) {
          newField = attr + ": " + suggestion.value;
        } else if (typeof pastValues == "string") {
          if (!pastValues.contains(",")) {
            newField = attr + ": " + suggestion.value;
          } else {
            newField = attr + ": [" + pastValues.split(",").map((o) => o.trim()).slice(0, -1).join(", ") + ", " + suggestion.value + "]";
          }
        } else if (Array.isArray(pastValues)) {
          if (activeLine.endsWith(",]") || activeLine.endsWith(", ]")) {
            newField = attr + ": [" + [...pastValues, suggestion.value].join(", ") + "]";
          } else {
            newField = attr + ": [" + [...pastValues.slice(0, -1), suggestion.value].join(", ") + "]";
          }
        } else {
          newField = attr + ": [" + [...pastValues].join(", ") + "]";
        }
        editor.replaceRange(newField, { line: this.context.start.line, ch: 0 }, { line: this.context.start.line, ch: activeLine.length });
        if (Array.isArray(pastValues) || typeof pastValues === "string" && pastValues.contains(",")) {
          editor.setCursor({ line: this.context.start.line, ch: newField.length - 1 });
        } else {
          editor.setCursor({ line: this.context.start.line, ch: newField.length });
        }
      } catch (error) {
        new import_obsidian28.Notice("Frontmatter wrongly formatted", 2e3);
        this.close();
        return;
      }
    } else if (this.inFullLine) {
      let cleanedLine = activeLine;
      while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
        cleanedLine = cleanedLine.slice(0, -1);
      }
      editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
    } else if (this.inSentence) {
      const position = ((_a = this.context) == null ? void 0 : _a.editor.getCursor().ch) || 0;
      let beforeCursor = activeLine.slice(0, position);
      let afterCursor = activeLine.slice(position);
      let separatorPos = position;
      let currentValueLength = 0;
      while (!beforeCursor.endsWith("::") && !beforeCursor.endsWith(",") && beforeCursor.length) {
        separatorPos = separatorPos - 1;
        currentValueLength = currentValueLength + 1;
        beforeCursor = beforeCursor.slice(0, -1);
      }
      let nextBracketPos = position;
      while (!encodeLink(afterCursor).match("(\\]|\\)).*") && afterCursor.length) {
        nextBracketPos = nextBracketPos + 1;
        afterCursor = afterCursor.slice(nextBracketPos - position);
      }
      editor.replaceRange(suggestion.value, { line: this.context.start.line, ch: separatorPos }, { line: this.context.start.line, ch: nextBracketPos });
      editor.setCursor({ line: this.context.start.line, ch: nextBracketPos - currentValueLength + suggestion.value.length });
    }
    this.didSelect = true;
    this.close();
  }
};

// src/settings/migrateSettingV1toV2.ts
var migrateSettingsV1toV2 = (plugin) => __async(void 0, null, function* () {
  const presetFields = plugin.settings.presetFields;
  presetFields.forEach((p) => {
    if (!Object.keys(p).contains("type")) {
      if (p.isMulti)
        p.type = "Multi" /* Multi */;
      else if (p.isCycle)
        p.type = "Cycle" /* Cycle */;
      else if (p.isBoolean)
        p.type = "Boolean" /* Boolean */;
      else if (p.options && Object.keys(p.options).length > 0)
        p.type = "Select" /* Select */;
      else
        p.type = "Input" /* Input */;
    }
    delete p.isMulti;
    delete p.isCycle;
    delete p.isBoolean;
    if (Object.getOwnPropertyDescriptor(p, "values") !== void 0) {
      Object.defineProperty(p, "options", Object.getOwnPropertyDescriptor(p, "values"));
      delete p["values"];
    }
  });
  plugin.settings.settingsVersion = 2;
  yield plugin.saveData(plugin.settings);
  console.log("Metadata menu settings migrated");
});

// main.ts
var MetadataMenu = class extends import_obsidian29.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      if (this.settings.settingsVersion === void 0) {
        yield migrateSettingsV1toV2(this);
      }
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this.app, this));
      this.registerEditorSuggest(new ValueSuggest(this.app, this));
      this.api = new MetadataMenuApi(this).make();
      this.addCommand({
        id: "field_options",
        name: "field options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian29.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file);
          }
          const fieldsOptionsModal = new NoteFieldsCommandsModal(this.app, this, view.file);
          fieldsOptionsModal.open();
        }
      });
      this.addCommand({
        id: "fileClassAttr_options",
        name: "fileClass attributes options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian29.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
          }
          const modal = new FileClassAttributeSelectModal(this, view.file);
          modal.open();
        }
      });
      new linkContextMenu(this);
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
