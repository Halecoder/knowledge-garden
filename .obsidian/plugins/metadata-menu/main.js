/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian3 = require("obsidian");

// src/settings/FieldSettingsModal.ts
var import_obsidian2 = require("obsidian");

// src/Field.ts
var Field = class {
  constructor(name = "", values = {}, id = "", isMulti = false, isCycle = false, isBoolean2 = false, valuesListNotePath = "") {
    this.name = name;
    this.values = values;
    this.id = id;
    this.isBoolean = isBoolean2;
    this.isCycle = isCycle;
    this.isMulti = isMulti;
    this.valuesListNotePath = valuesListNotePath;
    this.insertNewValue.bind(this);
  }
  insertNewValue(value) {
    return __async(this, null, function* () {
      let newKey = 1;
      Object.keys(this.values).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKey) {
          newKey = parseInt(key) + 1;
        }
        ;
      });
      this.values[newKey.toString()] = value;
      return newKey.toString();
    });
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.isBoolean = source.isBoolean;
    target.isCycle = source.isCycle;
    target.isMulti = source.isMulti;
    target.valuesListNotePath = source.valuesListNotePath;
    Object.keys(source.values).forEach((k) => {
      target.values[k] = source.values[k];
    });
    Object.keys(target.values).forEach((k) => {
      if (!Object.keys(source.values).includes(k)) {
        delete target.values[k];
      }
      ;
    });
  }
};
var Field_default = Field;

// src/settings/FieldSetting.ts
var import_obsidian = require("obsidian");
var FieldSetting = class extends import_obsidian.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.property = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
  }
  setTextContentWithname() {
    const values = !this.property.isBoolean ? `[${Object.keys(this.property.values).map((k) => this.property.values[k]).join(", ")}]` : "";
    let type = "single";
    if (this.property.isBoolean)
      type = "boolean";
    if (this.property.isMulti)
      type = "multi";
    if (this.property.isCycle)
      type = "cycle";
    this.infoEl.textContent = `${this.property.name}: ${values}`;
    const typeContainer = this.infoEl.createEl("span", `metadata-menu-setting-item-info-type ${type}`);
    typeContainer.setText(type);
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.property);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.property.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(notePath, app2) {
    return __async(this, null, function* () {
      let values = [];
      const file = app2.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian.TFile && file.extension == "md") {
        const result = yield app2.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian2.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, property) {
    super(app2);
    this.valuesPromptComponents = [];
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialProperty = new Field_default();
    this.parentSettingContainer = parentSettingContainer;
    if (property) {
      this.new = false;
      this.property = property;
      this.initialProperty.name = property.name;
      this.initialProperty.id = property.id;
      Object.keys(property.values).forEach((k) => {
        this.initialProperty.values[k] = property.values[k];
      });
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.property = new Field_default();
      this.property.id = newId.toString();
      this.initialProperty.id = newId.toString();
    }
    ;
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.property.name == "") {
        this.titleEl.setText(`Add a property and set predefined`);
      } else {
        this.titleEl.setText(`Manage settings values for ${this.property.name}`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.property, this.initialProperty);
    if (!this.new && this.parentSetting) {
      this.parentSetting.infoEl.textContent = `${this.property.name}: [${Object.keys(this.property.values).map((k) => this.property.values[k]).join(", ")}]`;
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.property, this.app, this.plugin);
    }
    ;
  }
  setValueListText(header) {
    header.setText(`Preset values: ${Object.values(this.property.values).join(", ")}`);
  }
  createnameInputContainer(parentNode) {
    const propertyNameContainerLabel = parentNode.createDiv();
    propertyNameContainerLabel.setText(`Property Name:`);
    const input = new import_obsidian2.TextComponent(parentNode);
    const name = this.property.name;
    input.setValue(name);
    input.setPlaceholder("Name of the property");
    input.onChange((value) => {
      this.property.name = value;
      this.titleEl.setText(`Manage predefined values for ${this.property.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    return input;
  }
  createTogglerContainer(parentNode, label) {
    parentNode.addClass("metadata-menu-toggle");
    const propertyContainerLabel = parentNode.createDiv({ cls: "frontmatter-checkbox-toggler" });
    propertyContainerLabel.setText(label);
    const toggler = new import_obsidian2.ToggleComponent(parentNode);
    return toggler;
  }
  createListNoteContainer(parentNode) {
    const listNoteContainerLabel = parentNode.createDiv({ cls: "metadata-menu-input" });
    listNoteContainerLabel.setText(`Path of the note containing the values:`);
    const input = new import_obsidian2.TextComponent(listNoteContainerLabel);
    const listNotePath = this.property.valuesListNotePath;
    input.setValue(listNotePath);
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.property.valuesListNotePath = value);
    return input;
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.property.values) {
      if (key !== _key) {
        newValues[_key] = this.property.values[_key];
      }
      ;
    }
    ;
    this.property.values = newValues;
  }
  createValueContainer(parentNode, header, key) {
    const values = this.property.values;
    const presetValue = values[key];
    const valueContainer = parentNode.createDiv({
      cls: "metadata-menu-prompt-container"
    });
    const input = new import_obsidian2.TextComponent(valueContainer);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.property.values[key] = value;
      this.setValueListText(header);
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian2.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      this.setValueListText(header);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.property.values)[0]) {
      const valueUpgradeButton = new import_obsidian2.ButtonComponent(valueContainer);
      valueUpgradeButton.setButtonText("\u25B2");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = values[key];
        const inputIndex = this.valuesPromptComponents.indexOf(input);
        const upperComponent = inputIndex !== -1 ? this.valuesPromptComponents[inputIndex - 1] : this.valuesPromptComponents.last();
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(values).filter((k) => values[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            values[upperKey] = thisValue;
            input.setValue(upperValue);
            values[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({
        cls: "metadata-menu-prompt-div"
      });
      const mainDiv = div.createDiv({
        cls: "metadata-menu-prompt-form"
      });
      const nameContainer = mainDiv.createDiv();
      this.namePromptComponent = this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const booleanContainer = mainDiv.createDiv({ cls: "metadata-menu-toggle" });
      this.isBooleanTogglerComponent = this.createTogglerContainer(booleanContainer, "Is Boolean: ");
      this.isBooleanTogglerComponent.setValue(this.property.isBoolean);
      this.isBooleanTogglerComponent.setTooltip("Is this property true or false only?");
      this.isBooleanTogglerComponent.onChange((value) => {
        this.property.isBoolean = value;
        if ((this.property.isMulti || this.property.isCycle) && this.property.isBoolean) {
          this.property.isMulti = false;
          this.isMultiTogglerComponent.setValue(false);
          this.property.isCycle = false;
          this.isCycleTogglerComponent.setValue(false);
        }
      });
      const multiContainer = mainDiv.createDiv({ cls: "metadata-menu-toggle" });
      this.isMultiTogglerComponent = this.createTogglerContainer(multiContainer, "Is Multi: ");
      this.isMultiTogglerComponent.setValue(this.property.isMulti);
      this.isMultiTogglerComponent.setTooltip("Can this property have multiple values?");
      this.isMultiTogglerComponent.onChange((value) => {
        this.property.isMulti = value;
        if (this.property.isCycle && this.property.isMulti) {
          this.property.isCycle = false;
          this.isCycleTogglerComponent.setValue(false);
        }
        ;
      });
      const cycleContainer = mainDiv.createDiv();
      this.isCycleTogglerComponent = this.createTogglerContainer(cycleContainer, "Is Cycle: ");
      this.isCycleTogglerComponent.setValue(this.property.isCycle);
      this.isCycleTogglerComponent.setTooltip("Is this property's values set in cycle mode?");
      this.isCycleTogglerComponent.onChange((value) => {
        this.property.isCycle = value;
        if (this.property.isCycle && this.property.isMulti) {
          this.property.isMulti = false;
          this.isMultiTogglerComponent.setValue(false);
        }
        ;
      });
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const listNotePathContainer = mainDiv.createDiv();
      this.createListNoteContainer(listNotePathContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const valuesList = mainDiv.createDiv();
      const valuesListHeader = valuesList.createDiv();
      valuesListHeader.createEl("h2");
      valuesListHeader.setText(`Preset values: ${Object.values(this.property.values).join(", ")}`);
      const valuesListBody = valuesList.createDiv();
      Object.keys(this.property.values).forEach((key) => {
        this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
      });
      const valuesListFooter = valuesList.createDiv();
      const addValue = valuesListFooter.createEl("button");
      addValue.type = "button";
      addValue.textContent = "Add";
      addValue.onClickEvent((evt) => __async(this, null, function* () {
        evt.preventDefault;
        const newKey = yield this.property.insertNewValue("");
        this.createValueContainer(valuesListBody, valuesListHeader, newKey);
      }));
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian2.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
    });
  }
  createSaveButton(b) {
    b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
      let error = false;
      if (/^[#>-]/.test(this.property.name)) {
        FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name cannot start with #, >, -");
        error = true;
      }
      ;
      if (this.property.name == "") {
        FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name can not be Empty");
        error = true;
      }
      ;
      this.valuesPromptComponents.forEach((input) => {
        var _a, _b, _c;
        if (/^[#>-]/.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
          error = true;
        }
        ;
        if (/[,]/gu.test(input.inputEl.value) && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
          error = true;
        }
        ;
        if (input.inputEl.value == "" && ((_c = input.inputEl.parentElement) == null ? void 0 : _c.lastElementChild)) {
          FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
          error = true;
        }
        ;
      });
      if (error) {
        new import_obsidian2.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.saved = true;
      const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.property.id)[0];
      if (currentExistingProperty) {
        Field_default.copyProperty(currentExistingProperty, this.property);
      } else {
        this.plugin.initialProperties.push(this.property);
      }
      ;
      this.initialProperty = this.property;
      this.plugin.saveSettings();
      this.close();
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialProperty.name != "") {
        Object.assign(this.property, this.initialProperty);
      }
      ;
      this.close();
    });
    return b;
  }
  static setValidationError(textInput, insertAfter, message) {
    var _a;
    textInput.inputEl.addClass("is-invalid");
    if (message && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
      if (!mDiv) {
        mDiv = createDiv({ cls: "invalid-feedback" });
      }
      mDiv.innerText = message;
      mDiv.insertAfter(insertAfter);
    }
  }
  static removeValidationError(textInput) {
    var _a;
    if (textInput.inputEl.hasClass("is-invalid") && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      textInput.inputEl.removeClass("is-invalid");
      textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
    }
    ;
  }
};

// src/settings/MetadataMenuSettingTab.ts
var SettingsMigrationConfirmModal = class extends import_obsidian3.Modal {
  constructor(plugin, tab) {
    super(plugin.app);
    this.plugin = plugin;
    this.tab = tab;
  }
  onOpen() {
    this.titleEl.setText("Confirm");
    const body = this.contentEl.createDiv({
      cls: "modal-text-danger"
    });
    body.setText("This will erase current settings. Are you sure?");
    const confirmButton = new import_obsidian3.ButtonComponent(this.contentEl);
    confirmButton.setIcon("check");
    confirmButton.onClick(() => {
      if (this.app.plugins.plugins.hasOwnProperty("supercharged-links-obsidian")) {
        let settings = this.app.plugins.plugins["supercharged-links-obsidian"].settings;
        let _settings = this.plugin.settings;
        _settings.classFilesPath = settings.classFilesPath;
        _settings.displayFieldsInContextMenu = settings.displayFieldsInContextMenu;
        _settings.getFromInlineField = settings.getFromInlineField;
        _settings.globallyIgnoredFields = settings.globallyIgnoredFields;
        this.plugin.initialProperties = [];
        settings.presetFields.forEach((prop) => {
          const property = new Field_default();
          Object.assign(property, prop);
          this.plugin.initialProperties.push(property);
        });
        this.plugin.saveSettings();
        this.close();
      }
      ;
    });
  }
  onClose() {
    this.tab.display();
  }
};
var MetadataMenuSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const globalSettings = containerEl.createEl("div");
    globalSettings.createEl("h4", { text: "Global settings", cls: "metadata-menu-setting-section-header" });
    globalSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Global settings to apply to your whole vault"
    });
    new import_obsidian3.Setting(globalSettings).setName("Search for attribute in Inline fields like <field::>").setDesc("Sets the `data-link-<field>`-attribute to the value of inline fields").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.getFromInlineField);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.getFromInlineField = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(globalSettings).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(globalSettings).setName("Globally ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, "").split(",");
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    const presetFieldsSettings = containerEl.createEl("div");
    presetFieldsSettings.createEl("h4", { text: "Preset Fields settings", cls: "metadata-menu-setting-section-header" });
    presetFieldsSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage globally predefined type and values for a field throughout your whole vault"
    });
    new import_obsidian3.Setting(presetFieldsSettings).setName("Add New Property Manager").setDesc("Add a new Frontmatter property for which you want preset values.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.app, this.plugin, presetFieldsSettings);
        modal.open();
      }));
    });
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(presetFieldsSettings, property, this.app, this.plugin);
    });
    const classFilesSettings = containerEl.createEl("div");
    classFilesSettings.createEl("h4", { text: "FileClass settings", cls: "metadata-menu-setting-section-header" });
    classFilesSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage fileClass folder and alias. When a note has a fielClass defined, fileClass field properties will override global preset fields settings for the same field name"
    });
    new import_obsidian3.Setting(classFilesSettings).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addText((text) => {
      text.setPlaceholder("Path/").setValue(this.plugin.settings.classFilesPath).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.classFilesPath = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian3.Setting(classFilesSettings).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value;
        yield this.plugin.saveSettings();
      }));
    });
    const migrateSettings = containerEl.createEl("div");
    migrateSettings.createEl("h4", { text: "Migrate" });
    new import_obsidian3.Setting(migrateSettings).setName("Copy settings from supercharged links plugin").setDesc("Copy settings from supercharged links plugin").addButton((button) => {
      return button.setTooltip("Get settings from supercharged links").setButtonText("Copy").onClick(() => __async(this, null, function* () {
        let modal = new SettingsMigrationConfirmModal(this.plugin, this);
        modal.open();
      }));
    });
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: "",
  getFromInlineField: true,
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass"
};

// src/utils/parser.ts
var fieldComponents = ["startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => new RegExp(`(?<startStyle>[_*~\`]*)(?<attribute>${attribute})(?<endStyle>[_*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)(?<values>.*)`, "u");

// src/commands/getValues.ts
function getValues(app2, file, attribute) {
  return __async(this, null, function* () {
    var _a;
    const content = yield (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start, end } } = frontmatter || null;
    const result = [];
    content.map((line, i) => {
      if (frontmatter && i >= start.line && i <= end.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const regex = inlineFieldRegex(attribute);
        const r = line.match(regex);
        if (r == null ? void 0 : r.groups)
          result.push(r.groups.values);
      }
    });
    return result;
  });
}

// src/commands/replaceValues.ts
function replaceValues(app2, file, attribute, input) {
  return __async(this, null, function* () {
    var _a;
    const content = yield (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const start = frontmatter ? frontmatter.position.start : null;
    const end = frontmatter ? frontmatter.position.end : null;
    const newContent = content.map((line, i) => {
      if (frontmatter && i >= start.line && i <= end.line) {
        const regex = new RegExp(`${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const regex = inlineFieldRegex(attribute);
        const r = line.match(regex);
        if ((r == null ? void 0 : r.groups) && Object.keys(r.groups).every((i2) => fieldComponents.includes(i2))) {
          const { startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = r.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          return `${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}`;
        } else {
          return line;
        }
      }
    });
    app2.vault.modify(file, newContent.join("\n"));
  });
}

// src/commands/fieldModifier.ts
var import_obsidian5 = require("obsidian");

// src/fileClass/fileClassAttribute.ts
var types = {
  "input": "Accept any value",
  "select": "Accept a single value from a list",
  "multi": "Accept multiple values from a list",
  "cycle": "Cycle through values from a list",
  "boolean": "Accept true of false"
};
var FileClassAttribute = class {
  constructor(raw) {
    var _a, _b;
    const completeRegex = new RegExp(`^${genericFieldRegex}::(?<fieldSettings>.+)?`, "u");
    const nameRegex = new RegExp(`^${genericFieldRegex}$`, "u");
    let fieldName;
    let { attribute, fieldSettings } = ((_a = raw.match(completeRegex)) == null ? void 0 : _a.groups) || {};
    if (attribute) {
      fieldName = attribute;
    } else {
      let { attribute: attribute2 } = ((_b = raw.match(nameRegex)) == null ? void 0 : _b.groups) || {};
      fieldName = attribute2;
    }
    if (fieldName) {
      this.name = fieldName.trim();
      if (fieldSettings) {
        const settings = JSON.parse(`${fieldSettings.trim()}`);
        this.type = settings["type"];
        switch (this.type) {
          case "multi":
            this.isMulti = true;
            break;
          case "cycle":
            this.isCycle = true;
            break;
          case "boolean":
            this.isBoolean = true;
          default:
            break;
        }
        this.options = settings["options"];
      }
    } else {
      const error = new Error("Improper value");
      throw error;
    }
  }
  getField() {
    var _a;
    let values = {};
    (_a = this.options) == null ? void 0 : _a.forEach((option, index) => {
      values[index] = option;
    });
    return new Field_default(this.name, values, this.name, this.isMulti, this.isCycle, this.isBoolean);
  }
};

// src/fileClass/fileClass.ts
var import_obsidian4 = require("obsidian");
var FileClassManager = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.basename == name);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassManager(this);
    this.attributes = [];
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian4.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error("no such fileClass in fileClass folder");
      throw error;
    }
  }
  getAttributes() {
    return __async(this, null, function* () {
      try {
        const file = this.getClassFile();
        let attributes = [];
        let errors = [];
        const result = yield this.plugin.app.vault.cachedRead(file);
        result.split("\n").forEach((line) => {
          try {
            const attribute = new FileClassAttribute(line);
            attributes.push(attribute);
          } catch (error) {
            errors.push(error);
          }
        });
        this.attributes = attributes;
        this.errors = errors;
      } catch (error) {
        throw error;
      }
    });
  }
  updateAttribute(newType, newOptions, newName, attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            if (newType == "input") {
              newContent.push(newName);
            } else {
              let settings = {};
              settings["type"] = newType;
              settings["options"] = newOptions;
              newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
            }
          } else {
            newContent.push(line);
          }
        });
        this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        settings["options"] = newOptions;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
};
function createFileClass(plugin, name) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      const fileClass = new FileClass(plugin, name);
      fileClass.getAttributes().then(() => {
        resolve(fileClass);
      }).catch((error) => {
        reject(error);
      });
    });
  });
}

// src/commands/getPropertySettings.ts
function getPropertySettings(plugin, propertyName, fileClass) {
  const matchingSettings = plugin.settings.presetFields.filter((p) => p.name == propertyName);
  if (fileClass) {
    const fileClassAttributesWithName = fileClass.attributes.filter((attr) => attr.name == propertyName);
    if (fileClassAttributesWithName.length > 0) {
      const fileClassAttribute = fileClassAttributesWithName[0];
      if (fileClassAttribute.type) {
        return fileClassAttribute.getField();
      } else if (matchingSettings.length > 0) {
        return matchingSettings[0];
      }
      ;
    }
  } else if (matchingSettings.length > 0) {
    return matchingSettings[0];
  }
  ;
}

// src/commands/fieldModifier.ts
function createInputField(plugin, dv, p, fieldName, fieldContainer, attrs) {
  const fieldValue = dv.el("span", p[fieldName], attrs);
  const inputContainer = document.createElement("div");
  const input = document.createElement("input");
  input.setAttr("class", "metadata-menu-dv-input");
  inputContainer.appendChild(input);
  input.value = p[fieldName];
  const spacer = document.createElement("div");
  spacer.setAttr("class", "metadata-menu-dv-field-spacer");
  const button = document.createElement("button");
  button.setText("\u{1F58D}");
  button.setAttr("class", "metadata-menu-dv-field-button");
  button.hide();
  spacer.show();
  fieldContainer.onmouseover = () => {
    button.show();
    spacer.hide();
  };
  fieldContainer.onmouseout = () => {
    button.hide();
    spacer.show();
  };
  const validateIcon = document.createElement("a");
  validateIcon.textContent = "\u2705";
  validateIcon.setAttr("class", "metadata-menu-dv-field-button");
  validateIcon.onclick = (e) => {
    const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    if (file instanceof import_obsidian5.TFile && file.extension == "md") {
      replaceValues(plugin.app, file, fieldName, input.value);
    }
    fieldContainer.removeChild(inputContainer);
  };
  inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
  const cancelIcon = document.createElement("a");
  cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
  cancelIcon.textContent = "\u274C";
  cancelIcon.onclick = (e) => {
    fieldContainer.removeChild(inputContainer);
    fieldContainer.appendChild(button);
    fieldContainer.appendChild(fieldValue);
    fieldContainer.appendChild(spacer);
  };
  inputContainer.appendChild(cancelIcon);
  input.focus();
  input.onkeydown = (e) => {
    if (e.key === "Enter") {
      const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
      if (file instanceof import_obsidian5.TFile && file.extension == "md") {
        replaceValues(plugin.app, file, fieldName, input.value);
      }
      fieldContainer.removeChild(inputContainer);
    }
    if (e.key === "Escape") {
      fieldContainer.removeChild(inputContainer);
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    }
  };
  button.onclick = (e) => {
    fieldContainer.removeChild(fieldValue);
    fieldContainer.removeChild(button);
    fieldContainer.removeChild(spacer);
    fieldContainer.appendChild(inputContainer);
    input.focus();
  };
  fieldContainer.appendChild(button);
  fieldContainer.appendChild(fieldValue);
  fieldContainer.appendChild(spacer);
}
function createBooleanField(plugin, dv, p, fieldName, fieldContainer, attrs) {
  const checkbox = dv.el("input", "", __spreadProps(__spreadValues({}, attrs), { "type": "checkbox" }));
  checkbox.checked = p[fieldName];
  fieldContainer.appendChild(checkbox);
  checkbox.onchange = (value) => {
    const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    if (file instanceof import_obsidian5.TFile && file.extension == "md") {
      replaceValues(plugin.app, file, fieldName, checkbox.checked.toString());
    }
  };
}
function fieldModifier(plugin, dv, p, fieldName, attrs) {
  return __async(this, null, function* () {
    const fieldContainer = dv.el("div", "");
    fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
    if (p[fieldName] === void 0) {
      const emptyField = dv.el("span", null, attrs);
      fieldContainer.appendChild(emptyField);
    } else {
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (p[fileClassAlias]) {
        const fileClass = yield createFileClass(plugin, p[fileClassAlias]);
        const field = getPropertySettings(plugin, fieldName, fileClass);
        if (field == null ? void 0 : field.isBoolean) {
          createBooleanField(plugin, dv, p, fieldName, fieldContainer, attrs);
        } else {
          createInputField(plugin, dv, p, fieldName, fieldContainer, attrs);
        }
      } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
        const field = getPropertySettings(plugin, fieldName);
        if (field == null ? void 0 : field.isBoolean) {
          createBooleanField(plugin, dv, p, fieldName, fieldContainer, attrs);
        } else {
          createInputField(plugin, dv, p, fieldName, fieldContainer, attrs);
        }
      } else {
        createInputField(plugin, dv, p, fieldName, fieldContainer, attrs);
      }
    }
    return fieldContainer;
  });
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      fieldModifier: this.fieldModifier()
    };
  }
  getValues() {
    return (app2, file, attribute) => __async(this, null, function* () {
      return getValues(app2, file, attribute);
    });
  }
  replaceValues() {
    return (app2, file, attribute, input) => __async(this, null, function* () {
      return replaceValues(app2, file, attribute, input);
    });
  }
  fieldModifier() {
    return (dv, p, fieldName, attrs) => fieldModifier(this.plugin, dv, p, fieldName, attrs);
  }
};

// src/options/linkContextMenu.ts
var import_obsidian15 = require("obsidian");

// src/optionModals/valueMultiSelectModal.ts
var import_obsidian6 = require("obsidian");
var valueMultiSelectModal = class extends import_obsidian6.Modal {
  constructor(app2, file, name, initialValues, settings, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.settings = settings;
    if (initialValues) {
      if (initialValues.toString().startsWith("[[")) {
        this.values = initialValues.split(",").map((item) => item.trim());
      } else {
        this.values = initialValues.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
      }
      ;
    } else {
      this.values = [];
    }
    ;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const valueGrid = this.contentEl.createDiv({
        cls: "metadata-menu-value-grid"
      });
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      yield this.populateValuesGrid(valueGrid, listNoteValues);
    });
  }
  populateValuesGrid(valueGrid, listNoteValues) {
    return __async(this, null, function* () {
      if (listNoteValues.length === 0) {
        Object.keys(this.settings.values).forEach((key) => {
          const presetValue = this.settings.values[key];
          this.buildValueToggler(valueGrid, presetValue);
        });
      }
      ;
      listNoteValues.forEach((value) => {
        this.buildValueToggler(valueGrid, value);
      });
      const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const saveButton = new import_obsidian6.ButtonComponent(footer);
      saveButton.setIcon("checkmark");
      saveButton.onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          replaceValues(this.app, this.file, this.name, this.values.join(","));
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          const renderedValues = !this.inFrontmatter ? this.values.join(",") : this.values.length > 1 ? `[${this.values.join(",")}]` : this.values;
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${renderedValues}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${renderedValues}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
      const cancelButton = new import_obsidian6.ExtraButtonComponent(footer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => this.close());
    });
  }
  buildValueToggler(valueGrid, presetValue) {
    const valueSelectorContainer = valueGrid.createDiv({
      cls: "metadata-menu-value-selector-container"
    });
    const valueTogglerContainer = valueSelectorContainer.createDiv({
      cls: "metadata-menu-value-selector-toggler"
    });
    const valueToggler = new import_obsidian6.ToggleComponent(valueTogglerContainer);
    this.values.forEach((value) => {
      if (value == presetValue) {
        valueToggler.setValue(true);
      }
      ;
    });
    valueToggler.onChange((value) => {
      if (value && !this.values.includes(presetValue)) {
        this.values.push(presetValue);
      }
      ;
      if (!value) {
        this.values.remove(presetValue);
      }
      ;
    });
    const valueLabel = valueSelectorContainer.createDiv({ cls: "metadata-menu-value-selector-label" });
    valueLabel.setText(presetValue);
  }
};

// src/optionModals/valueTextInputModal.ts
var import_obsidian7 = require("obsidian");
var valueTextInputModal = class extends import_obsidian7.Modal {
  constructor(app2, file, name, value, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.parseDate = false;
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildInputEl(inputDiv);
  }
  buildDateParseToggler(container) {
    if (app.plugins.plugins.hasOwnProperty("nldates-obsidian")) {
      const nldates = app.plugins.plugins["nldates-obsidian"];
      const dateParserLabel = container.createDiv({
        cls: "metadata-menu-date-parser-label"
      });
      dateParserLabel.setText("\u{1F4C6}");
      const dateParserToggler = new import_obsidian7.ToggleComponent(container);
      dateParserToggler.onChange((value) => {
        this.parseDate = value;
      });
      dateParserLabel.onclick = () => dateParserToggler.setValue(!this.parseDate);
    }
    ;
  }
  buildInputEl(inputDiv) {
    this.buildDateParseToggler(inputDiv);
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const inputEl = new import_obsidian7.TextComponent(form);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (app.plugins.plugins.hasOwnProperty("nldates-obsidian") && this.parseDate) {
        const nldates = app.plugins.plugins["nldates-obsidian"];
        const format = nldates.settings.format;
        let textStart = "";
        let textEnd = "";
        let date = "";
        const selectionStart = inputEl.inputEl.selectionStart;
        const selectionEnd = inputEl.inputEl.selectionEnd;
        if (selectionEnd == selectionStart) {
          date = nldates.parseDate(inputEl.getValue()).moment.format(format);
        } else {
          textStart = inputEl.getValue().slice(0, selectionStart);
          date = nldates.parseDate(inputEl.getValue().slice(selectionStart, selectionEnd)).moment.format(format);
          textEnd = inputEl.getValue().slice(selectionEnd);
        }
        ;
        inputValue = textStart + "[[" + date + "]]" + textEnd;
      }
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.name, inputValue);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputValue}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    });
  }
};

// src/optionModals/valueSelectModal.ts
var import_obsidian8 = require("obsidian");
var valueSelectModal = class extends import_obsidian8.Modal {
  constructor(app2, file, name, value, settings, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.settings = settings;
    this.newValue = null;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      yield this.buildInputEl(inputDiv);
    });
  }
  buildInputEl(inputDiv) {
    return __async(this, null, function* () {
      const selectEl = new import_obsidian8.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      const values = this.settings.values;
      selectEl.addOption("", "--Empty--");
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app);
      listNoteValues.forEach((value) => selectEl.addOption(value, value));
      if (listNoteValues.includes(this.value)) {
        selectEl.setValue(this.value);
      }
      ;
      if (listNoteValues.length === 0) {
        Object.keys(values).forEach((key) => {
          selectEl.addOption(values[key], values[key]);
        });
        if (Object.values(values).includes(this.value)) {
          selectEl.setValue(this.value);
        }
        ;
      }
      selectEl.onChange((value) => this.newValue = value != "--Empty--" ? value : "");
      const submitButton = new import_obsidian8.ButtonComponent(inputDiv);
      submitButton.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          if (this.newValue || this.newValue == "") {
            replaceValues(this.app, this.file, this.name, this.newValue);
          }
          ;
        } else {
          const result = yield this.app.vault.read(this.file);
          let newContent = [];
          if (this.top) {
            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
          } else {
            result.split("\n").forEach((line, _lineNumber) => {
              newContent.push(line);
              if (_lineNumber == this.lineNumber) {
                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
              }
              ;
            });
          }
          ;
          this.app.vault.modify(this.file, newContent.join("\n"));
          this.close();
        }
        ;
        this.close();
      }));
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var import_obsidian12 = require("obsidian");

// src/optionModals/fieldSelectModal.ts
var import_obsidian11 = require("obsidian");

// src/optionModals/addNewFieldModal.ts
var import_obsidian9 = require("obsidian");
var addNewFieldModal = class extends import_obsidian9.Modal {
  constructor(plugin, lineNumber, file, inFrontmatter, top) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontmatter;
    this.file = file;
    this.top = top;
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const addNewFieldContainer = this.contentEl.createDiv();
    const nameInputContainer = addNewFieldContainer.createDiv();
    nameInputContainer.setText("Field Name: ");
    const nameInputEl = new import_obsidian9.TextComponent(nameInputContainer);
    nameInputEl.setPlaceholder("Field name");
    const valueInputContainer = addNewFieldContainer.createDiv();
    valueInputContainer.setText("Field value: ");
    const valueInputEl = new import_obsidian9.TextComponent(valueInputContainer);
    valueInputEl.setPlaceholder("Field value");
    const footerButtons = this.contentEl.createDiv({
      cls: "metadata-menu-textarea-buttons"
    });
    const saveButton = new import_obsidian9.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const result = yield this.app.vault.read(this.file);
      let newContent = [];
      if (this.top) {
        newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
      } else {
        result.split("\n").forEach((line, _lineNumber) => {
          newContent.push(line);
          if (_lineNumber == this.lineNumber) {
            newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
          }
        });
      }
      this.app.vault.modify(this.file, newContent.join("\n"));
      this.close();
    }));
    const cancelButton = new import_obsidian9.ExtraButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/optionModals/valueToggleModal.ts
var import_obsidian10 = require("obsidian");
var valueToggleModal = class extends import_obsidian10.Modal {
  constructor(app2, file, name, value, lineNumber = -1, inFrontMatter = false, top = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.name = name;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({
      cls: "metadata-menu-toggler"
    });
    this.buildToggleEl(inputDiv);
  }
  buildToggleEl(inputDiv) {
    const toggleEl = new import_obsidian10.ToggleComponent(inputDiv);
    toggleEl.setValue(this.value);
    toggleEl.onChange((value) => {
      this.value = value;
    });
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian10.ButtonComponent(footer);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const value = this.value.toString();
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.name, value);
      } else {
        const result = yield this.app.vault.read(this.file);
        let newContent = [];
        if (this.top) {
          newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${value}`);
          result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
        } else {
          result.split("\n").forEach((line, _lineNumber) => {
            newContent.push(line);
            if (_lineNumber == this.lineNumber) {
              newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${value}`);
            }
            ;
          });
        }
        ;
        this.app.vault.modify(this.file, newContent.join("\n"));
        this.close();
      }
      ;
      this.close();
    }));
  }
};

// src/optionModals/fieldSelectModal.ts
var fieldSelectModal = class extends import_obsidian11.Modal {
  constructor(plugin, file, lineNumber, line, inFrontmatter, top, fileClass) {
    super(plugin.app);
    this.line = line;
    this.lineNumber = lineNumber;
    this.plugin = plugin;
    this.file = file;
    this.inFrontmatter = inFrontmatter;
    this.top = top;
    this.fileClass = fileClass;
  }
  onOpen() {
    this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
    const container = this.contentEl.createDiv({ cls: "metadata-menu-field-select" });
    const settingsDropdownContainer = container.createDiv();
    const settingsSelector = new import_obsidian11.DropdownComponent(settingsDropdownContainer);
    settingsSelector.addOption("---", "Choose Field");
    settingsSelector.addOption("++New", "New");
    if (this.fileClass) {
      this.fileClass.attributes.forEach((attr) => {
        settingsSelector.addOption(attr.name, attr.name);
      });
    } else {
      this.plugin.settings.presetFields.forEach((setting) => {
        settingsSelector.addOption(setting.name, setting.name);
      });
    }
    ;
    settingsSelector.onChange((value) => {
      if (value == "++New") {
        const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
        newFieldModal.open();
        this.close();
      } else if (this.fileClass) {
        const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == value);
        let field;
        let type;
        if (fileClassAttributesWithName.length > 0) {
          const fileClassAttribute = fileClassAttributesWithName[0];
          field = fileClassAttribute.getField();
          type = fileClassAttribute.type;
        }
        if (field) {
          switch (type) {
            case "cycle":
            case "select": {
              const fieldModal = new valueSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
              fieldModal.titleEl.setText(`Select value for ${value}`);
              fieldModal.open();
              break;
            }
            case "multi": {
              const fieldModal = new valueMultiSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
              fieldModal.titleEl.setText(`Select values for ${value}`);
              fieldModal.open();
              break;
            }
            case "boolean": {
              const fieldModal = new valueToggleModal(this.app, this.file, field.name, false, this.lineNumber, this.inFrontmatter, this.top);
              fieldModal.titleEl.setText(`Set value for ${value}`);
              fieldModal.open();
              break;
            }
            default:
              {
                const fieldModal = new valueTextInputModal(this.app, this.file, value, "", this.lineNumber, this.inFrontmatter, this.top);
                fieldModal.titleEl.setText(`Enter value for ${value}`);
                fieldModal.open();
                "break";
              }
              ;
          }
        }
        this.close();
      } else {
        const field = this.plugin.settings.presetFields.filter((_field) => _field.name == value)[0];
        if (field.valuesListNotePath || field.values && Object.keys(field.values).length > 0) {
          if (field.isMulti) {
            const fieldModal = new valueMultiSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
            fieldModal.titleEl.setText(`Select values for ${value}`);
            fieldModal.open();
          } else {
            const fieldModal = new valueSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
            fieldModal.titleEl.setText(`Select value for ${value}`);
            fieldModal.open();
          }
          ;
        } else if (field.isBoolean) {
          const fieldModal = new valueToggleModal(this.app, this.file, field.name, false, this.lineNumber, this.inFrontmatter, this.top);
          fieldModal.titleEl.setText(`Set value for ${value}`);
          fieldModal.open();
        } else {
          const fieldModal = new valueTextInputModal(this.app, this.file, value, "", this.lineNumber, this.inFrontmatter, this.top);
          fieldModal.titleEl.setText(`Enter value for ${value}`);
          fieldModal.open();
        }
        ;
        this.close();
      }
      ;
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var chooseSectionModal = class extends import_obsidian12.Modal {
  constructor(plugin, file, fileClass) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
    this.fileClass = fileClass;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText("Add a field in this note after:");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      const selectEl = new import_obsidian12.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      selectEl.addOption("", "Select line");
      selectEl.addOption("top_0", "top");
      const result = yield this.app.vault.read(this.file);
      let foreHeadText = false;
      let frontmatterStart = false;
      let frontmatterEnd = false;
      let inFrontmatter = false;
      result.split("\n").forEach((line, lineNumber) => {
        if (line != "---" && !foreHeadText && !frontmatterStart) {
          foreHeadText = true;
        }
        ;
        if (line == "---" && !foreHeadText) {
          if (!frontmatterStart) {
            frontmatterStart = true;
            inFrontmatter = true;
          } else if (!frontmatterEnd) {
            frontmatterEnd = true;
            inFrontmatter = false;
          }
          ;
        }
        if (inFrontmatter) {
          selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        } else {
          selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        }
        ;
      });
      selectEl.onChange(() => {
        const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
        const position = valueArray && valueArray.length > 0 ? valueArray[1] : 0;
        const lineNumber = Number(valueArray && valueArray.length > 1 ? valueArray[2] : 0);
        const inFrontmatter2 = position == "frontmatter" ? true : false;
        const top = position == "top" ? true : false;
        const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split("\n")[lineNumber], inFrontmatter2, top, this.fileClass);
        this.close();
        modal.open();
      });
    });
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var import_obsidian14 = require("obsidian");

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian13 = require("obsidian");
var FileClassAttributeModal = class extends import_obsidian13.Modal {
  constructor(app2, fileClass, attr) {
    super(app2);
    this.attr = attr;
    this.fileClass = fileClass;
    if (this.attr) {
      this.type = this.attr.type || "input";
      this.options = this.attr.options;
      this.name = this.attr.name;
    }
  }
  onOpen() {
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    const nameInputContainer = this.contentEl.createDiv();
    nameInputContainer.setText("name");
    const nameInput = new import_obsidian13.TextComponent(nameInputContainer);
    this.attr ? nameInput.setValue(this.attr.name) : nameInput.setPlaceholder("Type a name for this attribute");
    const typeSelectHeader = this.contentEl.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    const attrName = attrLine.createEl("strong");
    attrName.setText(`<${this.name}>`);
    attrLine.append(" fields in files with:");
    String(`---
fileClass: ${this.fileClass.name}
...
---`).split("\n").forEach((line) => {
      typeSelectHeader.createEl("div", "yaml-metadata-menu-red").setText(line);
    });
    const typeSelectContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    const typeSelectLabel = typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label" });
    typeSelectLabel.setText("will: ");
    const typeSelectDropDown = typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-toggler" });
    const typeSelect = new import_obsidian13.DropdownComponent(typeSelectDropDown);
    Object.keys(types).forEach((key) => {
      typeSelect.addOption(key, types[key]);
    });
    if (this.attr) {
      typeSelect.setValue(this.type);
    }
    const optionsInputContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    const optionsInputLabel = optionsInputContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label-top" });
    optionsInputLabel.setText("Values");
    const optionsInput = new import_obsidian13.TextAreaComponent(optionsInputContainer);
    optionsInput.inputEl.rows = 3;
    optionsInput.inputEl.cols = 26;
    this.attr ? optionsInput.setValue(this.type == "input" || this.type == "boolean" ? "" : this.options.join(", ")) : optionsInput.setPlaceholder("insert values, comma separated");
    !this.attr || this.type == "input" || this.type == "boolean" ? optionsInputContainer.hide() : optionsInputContainer.show();
    typeSelect.onChange((type) => {
      type == "input" || type == "boolean" ? optionsInputContainer.hide() : optionsInputContainer.show();
      this.type = type;
    });
    optionsInput.onChange((value) => this.options = value.split(",").map((item) => item.trim()));
    nameInput.onChange((value) => {
      this.name = value;
      attrName.setText(`<${value}>`);
    });
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian13.ButtonComponent(footer);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => {
      this.fileClass.updateAttribute(this.type, this.options, this.name, this.attr);
      this.close();
    });
    if (this.attr) {
      const removeButton = new import_obsidian13.ButtonComponent(footer);
      removeButton.setIcon("trash");
      removeButton.onClick(() => {
        var _a;
        const confirmModal = new import_obsidian13.Modal(this.app);
        confirmModal.titleEl.setText("Please confirm");
        confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
        const confirmFooter = confirmModal.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
        const confirmButton = new import_obsidian13.ButtonComponent(confirmFooter);
        confirmButton.setIcon("checkmark");
        confirmButton.onClick(() => {
          if (this.attr)
            this.fileClass.removeAttribute(this.attr);
          confirmModal.close();
          this.close();
        });
        const dismissButton = new import_obsidian13.ExtraButtonComponent(confirmFooter);
        dismissButton.setIcon("cross");
        dismissButton.onClick(() => this.close());
        confirmModal.open();
      });
    }
    const cancelButton = new import_obsidian13.ExtraButtonComponent(footer);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var FileClassAttributeSelectModal = class extends import_obsidian14.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to update`);
      const fileClass = yield createFileClass(this.plugin, this.file.basename);
      this.titleEl.setText(`Select the field to update in ${fileClass.name}`);
      const selectContainer = this.contentEl.createDiv();
      const select = new import_obsidian14.DropdownComponent(selectContainer);
      select.addOption("select an attribute", "--select an attribute--");
      fileClass.attributes.forEach((attr) => {
        select.addOption(attr.name, attr.name);
      });
      select.addOption("++newAttr++", "++Add a new attribute++");
      select.onChange((attrName) => {
        if (attrName == "++newAttr") {
          const modal = new FileClassAttributeModal(this.plugin.app, fileClass);
          modal.open();
          this.close();
        } else {
          const modal = new FileClassAttributeModal(this.plugin.app, fileClass, fileClass.attributes.filter((attr) => attr.name == attrName)[0]);
          modal.open();
          this.close();
        }
      });
    });
  }
};

// src/options/OptionsList.ts
function isMenu(category) {
  return category.addItem !== void 0;
}
function isSelect(category) {
  return category.modals !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, category) {
    this.file = file;
    this.plugin = plugin;
    this.category = category;
  }
  createExtraOptionList() {
    return __async(this, null, function* () {
      var _a;
      const frontmatter = (_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter;
      if (frontmatter) {
        const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
        Object.keys(attributes).forEach((key) => {
          if (this.plugin.settings.globallyIgnoredFields.includes(key)) {
            delete attributes[key];
          }
          ;
        });
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        let fileClassForFields = false;
        let fileClassFields = [];
        const fileClassAlias = this.plugin.settings.fileClassAlias;
        if (Object.keys(attributes).includes(fileClassAlias)) {
          const fileClass = attributes[fileClassAlias];
          try {
            const _fileClass = yield createFileClass(this.plugin, fileClass);
            this.fileClass = _fileClass;
            fileClassFields = _fileClass.attributes.map((attr) => attr.name);
            fileClassForFields = true;
            Object.keys(attributes).forEach((key) => {
              if (!fileClassFields.includes(key) && key != fileClassAlias) {
                delete attributes[key];
              }
              ;
            });
            const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, this.fileClass.getClassFile());
            if (isMenu(this.category)) {
              this.category.addSeparator();
              this.category.addItem((item) => {
                item.setIcon("gear");
                item.setTitle(`Manage <${this.fileClass.name}> fields`);
                item.onClick((evt) => {
                  fileClassAttributeSelectModal.open();
                });
              });
            } else {
              this.category.addOption("manage_fileClass_attributes", "Manage fileClass attributes");
              this.category.modals["add_field_at_section"] = () => fileClassAttributeSelectModal.open();
            }
            ;
            yield this.createExtraOptionsListForFrontmatter(attributes);
            yield this.createExtraOptionsListForInlineFields(this.file, fileClassForFields, fileClassFields);
            if (isMenu(this.category)) {
              this.category.addSeparator();
            }
            ;
            this.addSectionSelectModalOption();
          } catch (error) {
            yield this.createExtraOptionsListForFrontmatter(attributes);
            yield this.createExtraOptionsListForInlineFields(this.file);
            if (isMenu(this.category)) {
              this.category.addSeparator();
            }
            ;
            this.addSectionSelectModalOption();
          }
          ;
        } else {
          yield this.createExtraOptionsListForFrontmatter(attributes);
          yield this.createExtraOptionsListForInlineFields(this.file);
          if (isMenu(this.category)) {
            this.category.addSeparator();
          }
          ;
          this.addSectionSelectModalOption();
        }
        ;
      } else {
        yield this.createExtraOptionsListForInlineFields(this.file);
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        this.addSectionSelectModalOption();
      }
      ;
    });
  }
  createExtraOptionsListForInlineFields(_0) {
    return __async(this, arguments, function* (file, fileClassForFields = false, fileClassFields = []) {
      let attributes = {};
      const regex = new RegExp(`^${genericFieldRegex}::s*(?<values>.+)?`, "u");
      const result = yield this.plugin.app.vault.read(file);
      result.split("\n").map((line) => {
        const regexResult = line.match(regex);
        const { attribute, values } = (regexResult == null ? void 0 : regexResult.groups) || {};
        if (attribute && !this.plugin.settings.globallyIgnoredFields.includes(attribute.trim())) {
          if (fileClassForFields) {
            if (fileClassFields.includes(attribute.trim())) {
              attributes[attribute.trim()] = values ? values.trim() : "";
            }
            ;
          } else {
            attributes[attribute.trim()] = values ? values.trim() : "";
          }
          ;
        }
        ;
      });
      if (Object.keys(attributes).length > 0) {
        if (isMenu(this.category)) {
          this.category.addSeparator();
        }
        ;
        this.buildExtraOptionsList(attributes);
      }
      ;
    });
  }
  createExtraOptionsListForFrontmatter(attributes) {
    return __async(this, null, function* () {
      this.buildExtraOptionsList(attributes);
    });
  }
  buildExtraOptionsList(attributes) {
    Object.keys(attributes).forEach((key) => {
      const value = attributes[key];
      const propertySettings = getPropertySettings(this.plugin, key, this.fileClass);
      if ((propertySettings == null ? void 0 : propertySettings.values) && !(propertySettings == null ? void 0 : propertySettings.isBoolean)) {
        if (propertySettings.isCycle) {
          this.addCycleMenuOption(key, value, propertySettings);
        } else if (propertySettings.isMulti) {
          this.addMultiMenuOption(key, value, propertySettings);
        } else {
          this.addSelectMenuOption(key, value, propertySettings);
        }
        ;
      } else if (propertySettings == null ? void 0 : propertySettings.isBoolean) {
        let toBooleanValue = false;
        if (isBoolean(value)) {
          toBooleanValue = value;
        } else if (/true/i.test(value)) {
          toBooleanValue = true;
        } else if (/false/i.test(value)) {
          toBooleanValue = false;
        }
        ;
        this.addToggleMenuOption(key, toBooleanValue);
      } else {
        this.addTextInputMenuOption(key, value ? value.toString() : "");
      }
      ;
    });
  }
  addSectionSelectModalOption() {
    const modal = new chooseSectionModal(this.plugin, this.file, this.fileClass);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setIcon("pencil");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption("add_field_at_section", "Add field at section...");
      this.category.modals["add_field_at_section"] = () => modal.open();
    }
    ;
  }
  addCycleMenuOption(name, value, propertySettings) {
    const values = propertySettings.values;
    const keys = Object.keys(values);
    const keyForValue = keys.find((key) => values[key] === value);
    let nextValue;
    if (keyForValue) {
      const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
      nextValue = values[nextKey];
    } else {
      nextValue = values[Object.keys(values)[0]];
    }
    ;
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`${name} : ${value} \u25B7 ${nextValue}`);
        item.setIcon("switch");
        item.onClick((evt) => {
          replaceValues(this.plugin.app, this.file, name, nextValue);
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`${name}_${value}_${nextValue}`, `${name} : ${value} \u25B7 ${nextValue}`);
      this.category.modals[`${name}_${value}_${nextValue}`] = () => replaceValues(this.plugin.app, this.file, name, nextValue);
    }
    ;
  }
  addMultiMenuOption(name, value, propertySettings) {
    const modal = new valueMultiSelectModal(this.plugin.app, this.file, name, value, propertySettings);
    modal.titleEl.setText("Select values");
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("bullet-list");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  addSelectMenuOption(name, value, propertySettings) {
    const modal = new valueSelectModal(this.plugin.app, this.file, name, value, propertySettings);
    modal.titleEl.setText("Select value");
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon("right-triangle");
        item.onClick((evt) => modal.open());
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  addToggleMenuOption(name, value) {
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`<${name}> ${value ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
        item.setIcon("checkmark");
        item.onClick((evt) => {
          replaceValues(this.plugin.app, this.file, name, (!value).toString());
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `<${name}> ${value ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
      this.category.modals[`update_${name}`] = () => replaceValues(this.plugin.app, this.file, name, (!value).toString());
      ;
    }
    ;
  }
  addTextInputMenuOption(name, value) {
    const modal = new valueTextInputModal(this.plugin.app, this.file, name, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick((evt) => modal.open());
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption(`update_${name}`, `Update <${name}>`);
      this.category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
};

// src/options/linkContextMenu.ts
var linkContextMenu = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.createContextMenu();
  }
  createContextMenu() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      if (this.plugin.settings.displayFieldsInContextMenu) {
        const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
        if (file instanceof import_obsidian15.TFile && file.extension === "md") {
          this.file = file;
          if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
            menu.addSeparator();
            menu.addItem((item) => {
              item.setIcon("gear");
              item.setTitle(`Manage <${file.basename}> fields`);
              item.onClick((evt) => {
                const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, file);
                fileClassAttributeSelectModal.open();
              });
            });
          } else {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            this.optionsList.createExtraOptionList();
          }
          ;
        }
        ;
      }
      ;
    }));
  }
};

// src/options/NoteFieldsCommandsModal.ts
var import_obsidian17 = require("obsidian");

// src/optionModals/SelectModal.ts
var import_obsidian16 = require("obsidian");
var SelectModal = class extends import_obsidian16.DropdownComponent {
  constructor(containerEl) {
    super(containerEl);
    this.modals = {};
  }
};

// src/options/NoteFieldsCommandsModal.ts
var NoteFieldsCommandsModal = class extends import_obsidian17.Modal {
  constructor(app2, plugin, file) {
    super(app2);
    this.app = app2;
    this.plugin = plugin;
    this.file = file;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to manage`);
      this.containerEl.addClass("metadata-menu");
      const optionsListContainer = this.contentEl.createDiv({ cls: "field-options" });
      this.select = new SelectModal(optionsListContainer);
      this.select.addOption("---", "Choose Field");
      this.optionsList = new OptionsList(this.plugin, this.file, this.select);
      yield this.optionsList.createExtraOptionList();
      this.select.onChange((value) => {
        this.select.modals[value]();
        this.close();
      });
      this.select.selectEl.focus();
    });
  }
};

// src/suggester/MetadataSuggester.ts
var import_obsidian18 = require("obsidian");
var ValueSuggest = class extends import_obsidian18.EditorSuggest {
  constructor(app2, plugin) {
    super(app2);
    this.inFrontmatter = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(option)) && (!lastValue || !!lastValue && option.contains(lastValue));
    };
    this.app = app2;
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    const frontmatter = this.plugin.app.metadataCache.getFileCache(file).frontmatter;
    this.inFrontmatter = frontmatter !== void 0 && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    const regex = this.inFrontmatter ? new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u") : new RegExp(`^${genericFieldRegex}::(?<values>.*)`, "u");
    const fullLine = editor.getLine(editor.getCursor().line);
    if (!regex.test(fullLine)) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a, _b;
      const line = context.start.line;
      let regex;
      if (!this.inFrontmatter) {
        regex = new RegExp(`^${genericFieldRegex}::(?<values>.+)?`, "u");
      } else {
        regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
      }
      ;
      const regexResult = context.editor.getRange({ line, ch: 0 }, context.end).match(regex);
      if (regexResult && ((_a = regexResult.groups) == null ? void 0 : _a.attribute)) {
        const fieldName = regexResult.groups.attribute;
        const valuesList = (_b = regexResult.groups.values) == null ? void 0 : _b.replace(/^\[|^\s\[/, "").replace(/\]$/, "").split(",").map((o) => o.trim());
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        const cache = this.plugin.app.metadataCache.getCache(context.file.path);
        let tryWithPresetField = !(cache == null ? void 0 : cache.frontmatter);
        if (cache == null ? void 0 : cache.frontmatter) {
          const _c = cache.frontmatter, { position } = _c, attributes = __objRest(_c, ["position"]);
          const fileClassAlias = this.plugin.settings.fileClassAlias;
          if (Object.keys(attributes).contains(fileClassAlias)) {
            const fileClassValue = attributes[fileClassAlias];
            try {
              const fileClass = yield createFileClass(this.plugin, fileClassValue);
              this.fileClass = fileClass;
              const fileClassAttributes = this.fileClass.attributes;
              if (fileClassAttributes.map((attr) => attr.name).contains(fieldName)) {
                const options = fileClassAttributes.filter((attr) => attr.name == fieldName)[0].options.filter((option) => this.filterOption(firstValues, lastValue, option));
                return options.map((option) => Object({ value: option }));
              }
            } catch (error) {
              tryWithPresetField = true;
            }
            ;
          } else {
            tryWithPresetField = true;
          }
          ;
        }
        ;
        if (tryWithPresetField) {
          const presetFieldMatch = this.plugin.settings.presetFields.filter((field) => field.name == fieldName);
          if (presetFieldMatch.length > 0) {
            const presetField = presetFieldMatch[0];
            if (presetField.valuesListNotePath) {
              const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.valuesListNotePath);
              if (valuesFile instanceof import_obsidian18.TFile && valuesFile.extension == "md") {
                const values2 = yield (yield this.plugin.app.vault.read(valuesFile)).split("\n").filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
                return values2;
              }
              ;
            }
            ;
            const values = Object.entries(presetFieldMatch[0].values).map((option) => option[1]).filter((option) => this.filterOption(firstValues, lastValue, option));
            return values.map((_value) => Object({ value: _value }));
          }
          ;
        }
        ;
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.value);
  }
  selectSuggestion(suggestion, event) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian18.MarkdownView);
    if (!activeView) {
      return;
    }
    ;
    const editor = activeView.editor;
    const activeLine = editor.getLine(this.context.start.line);
    if (this.inFrontmatter) {
      try {
        let parsedField = (0, import_obsidian18.parseYaml)(activeLine);
        let [attr, pastValues] = Object.entries(parsedField)[0];
        let newField;
        if (!pastValues) {
          newField = attr + ": " + suggestion.value;
        } else if (typeof pastValues == "string") {
          if (!pastValues.contains(",")) {
            newField = attr + ": " + suggestion.value;
          } else {
            newField = attr + ": [" + pastValues.split(",").map((o) => o.trim()).slice(0, -1).join(", ") + ", " + suggestion.value + "]";
          }
        } else if (Array.isArray(pastValues)) {
          if (activeLine.endsWith(",]") || activeLine.endsWith(", ]")) {
            newField = attr + ": [" + [...pastValues, suggestion.value].join(", ") + "]";
          } else {
            newField = attr + ": [" + [...pastValues.slice(0, -1), suggestion.value].join(", ") + "]";
          }
        } else {
          newField = attr + ": [" + [...pastValues].join(", ") + "]";
        }
        editor.replaceRange(newField, { line: this.context.start.line, ch: 0 }, { line: this.context.start.line, ch: activeLine.length });
        if (Array.isArray(pastValues) || typeof pastValues === "string" && pastValues.contains(",")) {
          editor.setCursor({ line: this.context.start.line, ch: newField.length - 1 });
        } else {
          editor.setCursor({ line: this.context.start.line, ch: newField.length });
        }
      } catch (error) {
        new import_obsidian18.Notice("Frontmatter wrongly formatted", 2e3);
        this.close();
        return;
      }
    } else {
      let cleanedLine = activeLine;
      while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
        cleanedLine = cleanedLine.slice(0, -1);
      }
      editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
    }
    this.didSelect = true;
    this.close();
  }
};

// main.ts
var MetadataMenu = class extends import_obsidian19.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      this.registerEditorSuggest(new ValueSuggest(this.app, this));
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this.app, this));
      this.api = new MetadataMenuApi(this).make();
      this.addCommand({
        id: "field_options",
        name: "field options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file);
          }
          const fieldsOptionsModal = new NoteFieldsCommandsModal(this.app, this, view.file);
          fieldsOptionsModal.open();
        }
      });
      this.addCommand({
        id: "fileClassAttr_options",
        name: "fileClass attributes options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
          }
          const modal = new FileClassAttributeSelectModal(this, view.file);
          modal.open();
        }
      });
      new linkContextMenu(this);
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
