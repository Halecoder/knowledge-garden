/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian37 = require("obsidian");

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian23 = require("obsidian");

// src/settings/FieldSettingsModal.ts
var import_obsidian21 = require("obsidian");

// src/fields/FieldManager.ts
var import_obsidian2 = require("obsidian");

// src/commands/replaceValues.ts
var import_obsidian = require("obsidian");

// src/utils/parser.ts
var fieldComponents = ["inList", "startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<inList>- )?(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => `(?<inList>- )?(?<startStyle>[_\\*~\`]*)(?<attribute>${attribute})(?<endStyle>[_\\*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)(?<values>[^\\]]*)`;
var fullLineRegex = new RegExp(`^${genericFieldRegex}::s*(?<values>.*)?`, "u");
var inSentenceRegexBrackets = new RegExp(`\\[${genericFieldRegex}::s*(?<values>[^\\]]+)?\\]`, "gu");
var inSentenceRegexPar = new RegExp(`\\(${genericFieldRegex}::s*(?<values>[^\\]]+)?\\)`, "gu");
var encodeLink = (value) => {
  return value ? value.replace(/\[\[/g, "\u{1F527}\u{1F400}").replace(/\]\]/g, "\u{1F413}\u{1F54C}") : value;
};
var decodeLink = (value) => {
  return value ? value.replace(/🔧🐀/gu, "[[").replace(/🐓🕌/gu, "]]") : value;
};
var getLineFields = (line) => {
  const fields = [];
  const fR = line.match(fullLineRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    fields.push({ attribute, values, index: 0, length: line.length });
  } else {
    const sRBk = encodeLink(line).matchAll(inSentenceRegexBrackets);
    let next = sRBk.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBk.next();
    }
    const sRBc = encodeLink(line).matchAll(inSentenceRegexPar);
    next = sRBc.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBc.next();
    }
  }
  fields.sort((a, b) => {
    if (a.index < b.index)
      return -1;
    if (a.index > b.index)
      return 1;
    return 0;
  });
  return fields;
};

// src/commands/replaceValues.ts
var LocationWrapper = {
  "fullLine": { start: "", end: "" },
  "brackets": { start: "[", end: "]" },
  "parenthesis": { start: "(", end: ")" }
};
var matchInlineFields = (regex, line, attribute, input, location = "fullLine") => {
  const sR = line.matchAll(regex);
  let next = sR.next();
  const newFields = [];
  while (!next.done) {
    const match = next.value;
    if (match.groups && Object.keys(match.groups).every((j) => fieldComponents.includes(j))) {
      const { inList, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = match.groups;
      const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
      const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
      const start2 = LocationWrapper[location].start;
      const end2 = LocationWrapper[location].end;
      newFields.push({
        oldField: match[0],
        newField: `${start2}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}${end2}`
      });
    }
    next = sR.next();
  }
  return newFields;
};
function replaceValues(app2, fileOrFilePath, attribute, input) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrFilePath instanceof import_obsidian.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const newContent = content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const encodedInput = encodeLink(input);
        let encodedLine = encodeLink(line);
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = encodedLine.match(fullLineRegex2);
        if ((fR == null ? void 0 : fR.groups) && Object.keys(fR.groups).every((j) => fieldComponents.includes(j))) {
          const { inList, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = fR.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          return `${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}`;
        } else {
          const newFields = [];
          const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
          const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
          newFields.push(...matchInlineFields(inSentenceRegexBrackets2, encodedLine, attribute, encodedInput, "brackets" /* brackets */));
          newFields.push(...matchInlineFields(inSentenceRegexPar2, encodedLine, attribute, encodedInput, "parenthesis" /* parenthesis */));
          newFields.forEach((field) => {
            const fieldRegex = new RegExp(field.oldField.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "u");
            encodedLine = encodedLine.replace(fieldRegex, field.newField);
          });
          return decodeLink(encodedLine);
        }
      }
    });
    app2.vault.modify(file, newContent.join("\n"));
  });
}

// src/fields/FieldManager.ts
var FieldManager2 = class {
  constructor(field, type) {
    if (field.type !== type)
      throw Error(`This field is not of type ${type}`);
    this.field = field;
  }
  validateName(textInput, insertAfter) {
    let error = false;
    if (/^[#>-]/.test(this.field.name)) {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name cannot start with #, >, -");
      error = true;
    }
    ;
    if (this.field.name == "") {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name can not be Empty");
      error = true;
    }
    ;
    return !error;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      return true;
    });
  }
  static replaceValues(app2, path, fieldName, value) {
    const file = app2.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian2.TFile && file.extension == "md") {
      replaceValues(app2, file, fieldName, value);
    }
  }
  static isMenu(category) {
    return category.addItem !== void 0;
  }
  static isSelect(category) {
    return category.modals !== void 0;
  }
  static createDefault(name) {
    const field = Field_default.createDefault(name);
    return new FieldManager[field.type](field);
  }
  static stringToBoolean(value) {
    let toBooleanValue = false;
    if (isBoolean(value)) {
      toBooleanValue = value;
    } else if (/true/i.test(value)) {
      toBooleanValue = true;
    } else if (/false/i.test(value)) {
      toBooleanValue = false;
    } else {
      throw Error("this value is not a boolean");
    }
    ;
    return toBooleanValue;
  }
};

// src/optionModals/fields/InputModal.ts
var import_obsidian4 = require("obsidian");

// src/commands/insertValues.ts
var import_obsidian3 = require("obsidian");
function insertValues(app2, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, top2) {
  return __async(this, null, function* () {
    let file;
    if (fileOrFilePath instanceof import_obsidian3.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian3.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const result = yield app2.vault.read(file);
    let newContent = [];
    if (top2) {
      newContent.push(`${fieldName}${inFrontmatter ? ":" : "::"} ${value}`);
      result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
    } else {
      result.split("\n").forEach((line, _lineNumber) => {
        newContent.push(line);
        if (_lineNumber == lineNumber) {
          newContent.push(`${fieldName}${inFrontmatter ? ":" : "::"} ${value}`);
        }
        ;
      });
    }
    ;
    app2.vault.modify(file, newContent.join("\n"));
  });
}

// src/optionModals/fields/InputModal.ts
var InputModal = class extends import_obsidian4.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildInputEl(inputDiv);
  }
  buildInputEl(inputDiv) {
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const inputEl = new import_obsidian4.TextComponent(form);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        insertValues(this.app, this.file, this.field.name, inputValue, this.lineNumber, this.inFrontmatter, this.top);
      }
      ;
      this.close();
    });
  }
};

// src/fields/fieldManagers/InputField.ts
var InputField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Input" /* Input */);
  }
  getOptionsStr() {
    return "";
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new InputModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (InputField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (InputField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new InputModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      button.setText("\u{1F58D}");
      button.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        button.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          button.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          button.hide();
          spacer.show();
        };
      }
      const validateIcon = document.createElement("button");
      validateIcon.textContent = "\u2705";
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = (e) => {
        InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
        fieldContainer.removeChild(inputContainer);
      };
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("button");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      cancelIcon.textContent = "\u274C";
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(button);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(spacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeydown = (e) => {
        if (e.key === "Enter") {
          InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
          fieldContainer.removeChild(inputContainer);
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(button);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(spacer);
        }
      };
      button.onclick = (e) => {
        fieldContainer.removeChild(fieldValue);
        fieldContainer.removeChild(button);
        fieldContainer.removeChild(spacer);
        fieldContainer.appendChild(inputContainer);
        input.focus();
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/optionModals/fields/BooleanModal.ts
var import_obsidian5 = require("obsidian");
var BooleanModal = class extends import_obsidian5.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
    this.field = field;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({
      cls: "metadata-menu-toggler"
    });
    this.buildToggleEl(inputDiv);
  }
  buildToggleEl(inputDiv) {
    const toggleEl = new import_obsidian5.ToggleComponent(inputDiv);
    toggleEl.setValue(this.value);
    toggleEl.onChange((value) => {
      this.value = value;
    });
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian5.ButtonComponent(footer);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const value = this.value.toString();
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.field.name, value);
      } else {
        insertValues(this.app, this.file, this.field.name, value, this.lineNumber, this.inFrontmatter, this.top);
      }
      ;
      this.close();
    }));
  }
};

// src/fields/fieldManagers/BooleanField.ts
var BooleanField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Boolean" /* Boolean */);
  }
  addMenuOption(name, value, app2, file, category) {
    const bValue = BooleanField.stringToBoolean(value);
    if (BooleanField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
        item.setIcon("checkmark");
        item.onClick(() => replaceValues(app2, file, name, (!bValue).toString()));
        item.setSection("target-metadata");
      });
    } else if (BooleanField.isSelect(category)) {
      category.addOption(`update_${name}`, `<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
      category.modals[`update_${name}`] = () => replaceValues(app2, file, name, (!bValue).toString());
    }
    ;
  }
  getOptionsStr() {
    return "";
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateValue(value) {
    return __async(this, null, function* () {
      try {
        const bValue = BooleanField.stringToBoolean(value);
        return isBoolean(bValue);
      } catch (error) {
        return false;
      }
    });
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new BooleanModal(app2, file, this.field, false, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Set value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const checkbox = dv.el("input", "", __spreadProps(__spreadValues({}, attrs), { "type": "checkbox" }));
      checkbox.checked = p[this.field.name];
      fieldContainer.appendChild(checkbox);
      checkbox.onchange = (value) => {
        BooleanField.replaceValues(plugin.app, p["file"]["path"], this.field.name, checkbox.checked.toString());
      };
    });
  }
};

// src/optionModals/fields/NumberModal.ts
var import_obsidian6 = require("obsidian");
var NumbertModal = class extends import_obsidian6.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv();
    this.buildInputEl(inputDiv);
  }
  decrement(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) - fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) - 1).toString());
    }
  }
  increment(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) + fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) + 1).toString());
    }
  }
  toggleButtonsState(minusBtn, plusBtn, inputEl) {
    minusBtn.setDisabled(!this.fieldManager.canDecrement(inputEl.getValue()));
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    if (this.fieldManager.canDecrement(inputEl.getValue())) {
      minusBtn.setCta();
    } else {
      minusBtn.removeCta();
    }
    if (this.fieldManager.canIncrement(inputEl.getValue())) {
      plusBtn.setCta();
    } else {
      plusBtn.removeCta();
    }
  }
  buildInputEl(inputDiv) {
    const { step } = this.field.options;
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const fieldContainer = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn" });
    const inputEl = new import_obsidian6.TextComponent(fieldContainer);
    inputEl.inputEl.focus();
    inputEl.setValue(this.value);
    const minusBtn = new import_obsidian6.ButtonComponent(fieldContainer);
    minusBtn.setButtonText(`- ${!!step ? step : 1}`);
    const plusBtn = new import_obsidian6.ButtonComponent(fieldContainer);
    plusBtn.setButtonText(`+ ${!!step ? step : 1}`);
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    const errorField = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn-error-field" });
    errorField.hide();
    const footer = form.createEl("div", { cls: "metadata-menu-value-grid-footer" });
    const validateBtn = new import_obsidian6.ButtonComponent(footer);
    validateBtn.setIcon("checkmark");
    const cancelBtn = new import_obsidian6.ButtonComponent(footer);
    cancelBtn.setIcon("cross");
    this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    inputEl.onChange(() => {
      inputEl.inputEl.removeClass("is-invalid");
      errorField.hide();
      errorField.setText("");
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    plusBtn.onClick((e) => {
      e.preventDefault();
      this.increment(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    minusBtn.onClick((e) => {
      e.preventDefault();
      this.decrement(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    cancelBtn.onClick((e) => {
      e.preventDefault();
      this.close();
    });
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (!this.fieldManager.validateValue(inputValue)) {
        const { min: min2, max: max2 } = this.field.options;
        errorField.show();
        errorField.setText(`value must be numeric${min2 ? " and >= " + min2 : ""} ${max2 ? " and <= " + max2 : ""}`);
        inputEl.inputEl.setAttr("class", "is-invalid");
        return;
      }
      if (this.lineNumber == -1) {
        replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        insertValues(this.app, this.file, this.field.name, inputValue, this.lineNumber, this.inFrontmatter, this.top);
      }
      ;
      this.close();
    });
  }
};

// src/fields/fieldManagers/NumberField.ts
var import_obsidian7 = require("obsidian");
var NumberField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Number" /* Number */);
  }
  getOptionsStr() {
    const options = [];
    Object.keys(this.field.options).forEach((k) => {
      if (this.field.options[k])
        options.push(`${k}: ${this.field.options[k]}`);
    });
    return options.join(" | ");
  }
  canDecrement(value) {
    const { step, min: min2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMin = parseFloat(min2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMin) && (!isNaN(fStep) && (parseFloat(value) - fStep < fMin || parseFloat(value) - 1 < fMin)));
  }
  canIncrement(value) {
    const { step, max: max2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMax = parseFloat(max2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMax) && (!isNaN(fStep) && (parseFloat(value) + fStep > fMax || parseFloat(value) + 1 > fMax)));
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const { min: min2, max: max2 } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fValue = parseFloat(value);
      return !isNaN(fValue) && (isNaN(fMin) || fValue >= fMin) && (isNaN(fMax) || fValue <= fMax);
    });
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new NumbertModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (NumberField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("pencil");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
      const { min: min2, max: max2, step } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fStep = parseFloat(step);
      const fValue = parseFloat(value);
      if (fStep) {
        if (isNaN(fMin) || fMin && fValue - fStep > fMin)
          category.addItem((item) => {
            item.setIcon("pencil");
            item.setTitle(`<${name}> \u27A1\uFE0F ${fValue - fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue - fStep).toString()));
            item.setSection("target-metadata");
          });
        if (isNaN(fMax) || fMax && fValue + fStep < fMax)
          category.addItem((item) => {
            item.setIcon("pencil");
            item.setTitle(`<${name}> \u27A1\uFE0F ${fValue + fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue + fStep).toString()));
            item.setSection("target-metadata");
          });
      }
    } else if (NumberField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createNumberContainer(parentContainer) {
    const numberStepValueContainer = parentContainer.createDiv();
    numberStepValueContainer.createEl("span", { text: "Step (optional)", cls: "metadata-menu-field-option" });
    this.numberStepValue = new import_obsidian7.TextComponent(numberStepValueContainer);
    this.numberStepValue.setValue(this.field.options.step || "");
    const numberMinValueContainer = parentContainer.createDiv();
    numberMinValueContainer.createEl("span", { text: "Min value (optional)", cls: "metadata-menu-field-option" });
    this.numberMinValue = new import_obsidian7.TextComponent(numberMinValueContainer);
    this.numberMinValue.setValue(this.field.options.min || "");
    const numberMaxValueContainer = parentContainer.createDiv();
    numberMaxValueContainer.createEl("span", { text: "Max value (optional)", cls: "metadata-menu-field-option" });
    this.numberMaxValue = new import_obsidian7.TextComponent(numberMaxValueContainer);
    this.numberMaxValue.setValue(this.field.options.max || "");
    this.numberStepValue.onChange((value) => {
      this.field.options.step = value;
      FieldSettingsModal.removeValidationError(this.numberStepValue);
    });
    this.numberMinValue.onChange((value) => {
      this.field.options.min = value;
      FieldSettingsModal.removeValidationError(this.numberMinValue);
    });
    this.numberMaxValue.onChange((value) => {
      this.field.options.max = value;
      FieldSettingsModal.removeValidationError(this.numberMaxValue);
    });
  }
  createSettingContainer(parentContainer, plugin) {
    this.numberValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createNumberContainer(this.numberValidatorField);
    this.numberValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  validateOptions() {
    let error = false;
    if (this.field.options.step && isNaN(parseFloat(this.field.options.step))) {
      FieldSettingsModal.setValidationError(this.numberStepValue, this.numberStepValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.min && isNaN(parseFloat(this.field.options.min))) {
      FieldSettingsModal.setValidationError(this.numberMinValue, this.numberMinValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.max && isNaN(parseFloat(this.field.options.max))) {
      FieldSettingsModal.setValidationError(this.numberMaxValue, this.numberMaxValue.inputEl, "Values must be numeric.");
      error = true;
    }
    return !error;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new NumbertModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  toggleDvButtons(decrementBtn, incrementBtn, value) {
    if (this.canDecrement(value)) {
      decrementBtn.removeClass("disabled");
    } else {
      decrementBtn.addClass("disabled");
    }
    if (this.canIncrement(value)) {
      incrementBtn.removeClass("disabled");
    } else {
      incrementBtn.addClass("disabled");
      ;
    }
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const tripleSpacer = document.createElement("div");
      tripleSpacer.setAttr("class", "metadata-menu-dv-field-triple-spacer");
      const editButton = document.createElement("button");
      editButton.setText("\u{1F58D}");
      editButton.setAttr("class", "metadata-menu-dv-field-button");
      const decrementButton = document.createElement("button");
      decrementButton.setText("\u25C0\uFE0F");
      decrementButton.setAttr("class", "metadata-menu-dv-field-button");
      const incrementButton = document.createElement("button");
      incrementButton.setText("\u25B6\uFE0F");
      incrementButton.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        editButton.hide();
        decrementButton.hide();
        incrementButton.hide();
        tripleSpacer.show();
        fieldContainer.onmouseover = () => {
          editButton.show();
          decrementButton.show();
          incrementButton.show();
          tripleSpacer.hide();
        };
        fieldContainer.onmouseout = () => {
          editButton.hide();
          decrementButton.hide();
          incrementButton.hide();
          tripleSpacer.show();
        };
      }
      const validateIcon = document.createElement("a");
      validateIcon.textContent = "\u2705";
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = () => __async(this, null, function* () {
        if (yield this.validateValue(input.value)) {
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian7.TFile && file.extension == "md") {
            yield replaceValues(plugin.app, file, this.field.name, input.value);
            this.toggleDvButtons(decrementButton, incrementButton, input.value);
          }
          fieldContainer.removeChild(inputContainer);
        }
      });
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("a");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      cancelIcon.textContent = "\u274C";
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(decrementButton);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(editButton);
        fieldContainer.appendChild(incrementButton);
        fieldContainer.appendChild(tripleSpacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeyup = (e) => {
        if (!this.validateValue(input.value)) {
          input.addClass("is-invalid");
          validateIcon.addClass("disabled");
        } else {
          input.removeClass("is-invalid");
          validateIcon.removeClass("disabled");
        }
      };
      input.onkeydown = (e) => __async(this, null, function* () {
        if (e.key === "Enter") {
          if (yield this.validateValue(input.value)) {
            const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
            if (file instanceof import_obsidian7.TFile && file.extension == "md") {
              yield replaceValues(plugin.app, file, this.field.name, input.value);
              this.toggleDvButtons(decrementButton, incrementButton, input.value);
            }
            fieldContainer.removeChild(inputContainer);
          }
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(decrementButton);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(editButton);
          fieldContainer.appendChild(incrementButton);
          fieldContainer.appendChild(tripleSpacer);
        }
      });
      editButton.onclick = () => {
        fieldContainer.removeChild(fieldValue);
        fieldContainer.removeChild(editButton);
        fieldContainer.removeChild(decrementButton);
        fieldContainer.removeChild(incrementButton);
        fieldContainer.removeChild(tripleSpacer);
        fieldContainer.appendChild(inputContainer);
        input.focus();
      };
      decrementButton.onclick = () => __async(this, null, function* () {
        if (this.canDecrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian7.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] - fStep : p[this.field.name] - 1).toString();
            yield replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      });
      incrementButton.onclick = () => {
        if (this.canIncrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian7.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] + fStep : p[this.field.name] + 1).toString();
            replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      };
      fieldContainer.appendChild(decrementButton);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(editButton);
      fieldContainer.appendChild(incrementButton);
      fieldContainer.appendChild(tripleSpacer);
      this.toggleDvButtons(decrementButton, incrementButton, p[this.field.name]);
    });
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var import_obsidian12 = require("obsidian");

// src/settings/FieldSetting.ts
var import_obsidian8 = require("obsidian");
var FieldSetting = class extends import_obsidian8.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.field = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
  }
  setTextContentWithname() {
    const manager = new FieldManager[this.field.type](this.field);
    this.infoEl.textContent = "";
    this.infoEl.addClass("metadata-menu-setting-item");
    this.fieldNameContainer = this.infoEl.createEl("div", "metadata-menu-setting-item-name");
    this.fieldNameContainer.setText(this.field.name);
    this.typeContainer = this.infoEl.createEl("div");
    this.typeContainer.setAttr("class", `metadata-menu-setting-item-info-type ${FieldTypeTagClass[this.field.type]}`);
    this.typeContainer.setText(this.field.type);
    this.fieldOptionsContainer = this.infoEl.createEl("div");
    this.fieldOptionsContainer.setText(`${manager.getOptionsStr()}`);
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.field);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(notePath, app2) {
    return __async(this, null, function* () {
      let values = [];
      const file = app2.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian8.TFile && file.extension == "md") {
        const result = yield app2.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/suggester/FileSuggester.ts
var import_obsidian11 = require("obsidian");

// src/suggester/suggest.ts
var import_obsidian9 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app2, inputEl) {
    this.app = app2;
    this.inputEl = inputEl;
    this.scope = new import_obsidian9.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/utils/fileUtils.ts
var import_obsidian10 = require("obsidian");
function resolve_tfolder(app2, folder_str) {
  folder_str = (0, import_obsidian10.normalizePath)(folder_str);
  const folder = app2.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new Error(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian10.TFolder)) {
    throw new Error(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function get_tfiles_from_folder(app2, folder_str) {
  const folder = resolve_tfolder(app2, folder_str);
  const files = [];
  import_obsidian10.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian10.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.basename.localeCompare(b.basename);
  });
  return files;
}

// src/suggester/FileSuggester.ts
var FileSuggest = class extends TextInputSuggest {
  constructor(app2, inputEl, plugin, folder) {
    super(app2, inputEl);
    this.app = app2;
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.folder = folder;
  }
  getSuggestions(input_str) {
    const all_files = [];
    try {
      all_files.push(...get_tfiles_from_folder(this.app, this.folder));
    } catch (error) {
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian11.TFile && file.extension === "md" && file.path.toLowerCase().contains(lower_input_str)) {
        files.push(file);
      }
    });
    return files;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var AbstractListBasedField = class extends FieldManager2 {
  constructor(field, type) {
    super(field, type);
  }
  setValueListText(header) {
    header.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
  }
  createListNoteContainer(parentNode, plugin) {
    const listNoteContainerLabel = parentNode.createDiv({ cls: "metadata-menu-setting-fileClass-search" });
    listNoteContainerLabel.setText(`Path of the note containing the values:`);
    const input = new import_obsidian12.TextComponent(listNoteContainerLabel);
    new FileSuggest(plugin.app, input.inputEl, plugin, "/");
    const listNotePath = this.field.valuesListNotePath;
    input.setValue(listNotePath);
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.field.valuesListNotePath = value);
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.field.options) {
      if (key !== _key) {
        newValues[_key] = this.field.options[_key];
      }
      ;
    }
    ;
    this.field.options = newValues;
  }
  createValueContainer(parentNode, header, key) {
    const options = this.field.options;
    const presetValue = options[key];
    const valueContainer = parentNode.createDiv({
      cls: "metadata-menu-prompt-container"
    });
    const input = new import_obsidian12.TextComponent(valueContainer);
    this.valuesPromptComponents.push(input);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.field.options[key] = value;
      this.setValueListText(header);
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian12.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      this.setValueListText(header);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.field.options)[0]) {
      const valueUpgradeButton = new import_obsidian12.ButtonComponent(valueContainer);
      valueUpgradeButton.setButtonText("\u25B2");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = options[key];
        const inputIndex = this.valuesPromptComponents.indexOf(input);
        const upperComponent = inputIndex !== -1 ? this.valuesPromptComponents[inputIndex - 1] : this.valuesPromptComponents.last();
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(options).filter((k) => options[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            options[upperKey] = thisValue;
            input.setValue(upperValue);
            options[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      if (this.field.options && Object.values(this.field.options).length > 0) {
        return Object.values(this.field.options).includes(value.trim());
      } else if (this.field.valuesListNotePath) {
        const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, app);
        return listNoteValues.contains(value.trim());
      } else {
        return false;
      }
    });
  }
  getOptionsStr() {
    if (this.field.valuesListNotePath)
      return this.field.valuesListNotePath;
    else if (Object.values(this.field.options).length)
      return Object.values(this.field.options).join(", ");
    else
      return "";
  }
  validateOptions() {
    let error = false;
    this.valuesPromptComponents.forEach((input) => {
      var _a, _b, _c;
      if (/^[#>-]/.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
        error = true;
      }
      ;
      if (/[,]/gu.test(input.inputEl.value) && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
        error = true;
      }
      ;
      if (input.inputEl.value == "" && ((_c = input.inputEl.parentElement) == null ? void 0 : _c.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
        error = true;
      }
      ;
    });
    return !error;
  }
  createAddButton(valuesList, valuesListBody, valuesListHeader) {
    const valuesListFooter = valuesList.createDiv();
    const addValue = valuesListFooter.createEl("button");
    addValue.type = "button";
    addValue.textContent = "Add";
    addValue.onClickEvent((evt) => __async(this, null, function* () {
      evt.preventDefault;
      const newKey = yield this.field.insertNewValue("");
      this.createValueContainer(valuesListBody, valuesListHeader, newKey);
    }));
    valuesList.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  createSettingContainer(parentContainer, plugin, location) {
    if (location === 0 /* PluginSettings */)
      this.createListNoteContainer(parentContainer, plugin);
    this.presetValuesFields = parentContainer.createDiv();
    this.presetValuesFields.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
    const valuesList = this.presetValuesFields.createDiv();
    const valuesListHeader = valuesList.createDiv();
    valuesListHeader.createEl("h2");
    valuesListHeader.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
    const valuesListBody = valuesList.createDiv();
    Object.keys(this.field.options).forEach((key) => {
      this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
    });
    this.createAddButton(valuesList, valuesListBody, valuesListHeader);
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const fieldValue = dv.el("span", p[this.field.name]);
      fieldContainer.appendChild(fieldValue);
    });
  }
};

// src/optionModals/fields/SelectModal.ts
var import_obsidian13 = require("obsidian");
var valueSelectModal = class extends import_obsidian13.Modal {
  constructor(app2, file, value, field, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.newValue = null;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      yield this.buildInputEl(inputDiv);
    });
  }
  buildInputEl(inputDiv) {
    return __async(this, null, function* () {
      const selectEl = new import_obsidian13.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      const options = this.field.options;
      selectEl.addOption("", "--Empty--");
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, this.app);
      listNoteValues.forEach((value) => selectEl.addOption(value, value));
      if (listNoteValues.includes(this.value)) {
        selectEl.setValue(this.value);
      }
      ;
      if (listNoteValues.length === 0) {
        Object.keys(options).forEach((key) => {
          selectEl.addOption(options[key], options[key]);
        });
        if (Object.values(options).includes(this.value)) {
          selectEl.setValue(this.value);
        }
        ;
      }
      selectEl.onChange((value) => this.newValue = value != "--Empty--" ? value : "");
      const submitButton = new import_obsidian13.ButtonComponent(inputDiv);
      submitButton.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          if (this.newValue || this.newValue == "") {
            replaceValues(this.app, this.file, this.field.name, this.newValue);
          }
          ;
        } else {
          insertValues(this.app, this.file, this.field.name, selectEl.getValue(), this.lineNumber, this.inFrontmatter, this.top);
        }
        ;
        this.close();
      }));
    });
  }
};

// src/fields/fieldManagers/SelectField.ts
var SelectField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Select" /* Select */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new valueSelectModal(app2, file, value, this.field);
    modal.titleEl.setText("Select value");
    if (SelectField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon("right-triangle");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (SelectField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueSelectModal(app2, file, "", this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const valueContainer = document.createElement("div");
      ;
      const valueLabel = dv.el("span", p[this.field.name] || "");
      valueContainer.appendChild(valueLabel);
      const dropDownButton = document.createElement("button");
      dropDownButton.setText("\u{1F53D}");
      dropDownButton.addClass("metadata-menu-dv-field-button");
      valueContainer.appendChild(dropDownButton);
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const dismissBtn = document.createElement("button");
      dismissBtn.setText("\u274C");
      dismissBtn.addClass("metadata-menu-dv-field-button");
      selectContainer.appendChild(dismissBtn);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, plugin.app);
      if (listNoteValues.length) {
        listNoteValues.forEach((o) => {
          const option = new Option(o, o);
          if (p[this.field.name] === o || p[this.field.name] && Object.keys(p[this.field.name]).includes("path") && `[[${p[this.field.name].path.replace(".md", "")}]]` === o) {
            option.selected = true;
          }
          select.add(option);
          select.onchange = () => {
            let newValue = "";
            if (select.value !== void 0) {
              newValue = select.value;
            }
            fieldContainer.removeChild(selectContainer);
            fieldContainer.appendChild(valueContainer);
            SelectField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValue);
          };
        });
      } else {
        Object.keys(this.field.options).forEach((o) => {
          const option = new Option(this.field.options[o], o);
          if (p[this.field.name] === this.field.options[o] || p[this.field.name] && Object.keys(p[this.field.name]).includes("path") && `[[${p[this.field.name].path.replace(".md", "")}]]` === this.field.options[o]) {
            option.selected = true;
          }
          select.add(option);
          select.onchange = () => {
            let newValue = "";
            if (select.value !== void 0) {
              newValue = this.field.options[select.value];
            }
            fieldContainer.removeChild(selectContainer);
            fieldContainer.appendChild(valueContainer);
            SelectField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValue);
          };
        });
      }
      dropDownButton.onclick = () => {
        fieldContainer.removeChild(valueContainer);
        fieldContainer.appendChild(selectContainer);
      };
      dismissBtn.onclick = () => {
        fieldContainer.removeChild(selectContainer);
        fieldContainer.appendChild(valueContainer);
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        fieldContainer.appendChild(valueContainer);
      } else {
        fieldContainer.appendChild(selectContainer);
      }
    });
  }
};

// src/fields/fieldManagers/CycleField.ts
var CycleField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Cycle" /* Cycle */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const options = this.field.options;
    const keys = Object.keys(options);
    const keyForValue = keys.find((key) => options[key] === value);
    let nextOption;
    if (keyForValue) {
      const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
      nextOption = options[nextKey];
    } else {
      nextOption = options[Object.keys(options)[0]];
    }
    ;
    if (CycleField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`${name} : ${value} \u25B7 ${nextOption}`);
        item.setIcon("switch");
        item.onClick(() => replaceValues(app2, file, name, nextOption));
        item.setSection("target-metadata");
      });
    } else if (CycleField.isSelect(category)) {
      category.addOption(`${name}_${value}_${nextOption}`, `${name} : ${value} \u25B7 ${nextOption}`);
      category.modals[`${name}_${value}_${nextOption}`] = () => replaceValues(app2, file, name, nextOption);
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new valueSelectModal(app2, file, "", this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const options = this.field.options;
      const keys = Object.keys(options);
      const keyForValue = keys.find((key) => options[key] === p[this.field.name]);
      let nextOption;
      if (keyForValue) {
        const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
        nextOption = options[nextKey];
      } else {
        nextOption = options[Object.keys(options)[0]];
      }
      ;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      button.setText("\u25B6\uFE0F");
      button.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        button.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          button.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          button.hide();
          spacer.show();
        };
      }
      button.onclick = (e) => {
        var _a2;
        CycleField.replaceValues(plugin.app, p["file"]["path"], this.field.name, nextOption);
        if (!((_a2 = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a2.alwaysOn)) {
          button.hide();
          spacer.show();
        }
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/optionModals/fields/MultiSelectModal.ts
var import_obsidian14 = require("obsidian");
var MultiSelectModal = class extends import_obsidian14.Modal {
  constructor(app2, file, field, initialOptions, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    if (initialOptions) {
      if (initialOptions.toString().startsWith("[[")) {
        this.options = initialOptions.split(",").map((item) => item.trim());
      } else {
        this.options = initialOptions.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
      }
      ;
    } else {
      this.options = [];
    }
    ;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      const valueGrid = this.contentEl.createDiv({
        cls: "metadata-menu-value-grid"
      });
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, this.app);
      yield this.populateValuesGrid(valueGrid, listNoteValues);
    });
  }
  populateValuesGrid(valueGrid, listNoteValues) {
    return __async(this, null, function* () {
      if (listNoteValues.length === 0) {
        Object.keys(this.field.options).forEach((key) => {
          const presetValue = this.field.options[key];
          this.buildValueToggler(valueGrid, presetValue);
        });
      }
      ;
      listNoteValues.forEach((value) => {
        this.buildValueToggler(valueGrid, value);
      });
      const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const saveButton = new import_obsidian14.ButtonComponent(footer);
      saveButton.setIcon("checkmark");
      saveButton.onClick(() => __async(this, null, function* () {
        if (this.lineNumber == -1) {
          replaceValues(this.app, this.file, this.field.name, this.options.join(","));
        } else {
          const renderedValues = !this.inFrontmatter ? this.options.join(",") : this.options.length > 1 ? `[${this.options.join(", ")}]` : this.options[0];
          insertValues(this.app, this.file, this.field.name, renderedValues, this.lineNumber, this.inFrontmatter, this.top);
        }
        ;
        this.close();
      }));
      const cancelButton = new import_obsidian14.ExtraButtonComponent(footer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => this.close());
    });
  }
  buildValueToggler(valueGrid, presetOption) {
    const valueSelectorContainer = valueGrid.createDiv({
      cls: "metadata-menu-value-selector-container"
    });
    const valueTogglerContainer = valueSelectorContainer.createDiv({
      cls: "metadata-menu-value-selector-toggler"
    });
    const valueToggler = new import_obsidian14.ToggleComponent(valueTogglerContainer);
    this.options.forEach((options) => {
      if (options == presetOption) {
        valueToggler.setValue(true);
      }
      ;
    });
    valueToggler.onChange((value) => {
      if (value && !this.options.includes(presetOption)) {
        this.options.push(presetOption);
      }
      ;
      if (!value) {
        this.options.remove(presetOption);
      }
      ;
    });
    const valueLabel = valueSelectorContainer.createDiv({ cls: "metadata-menu-value-selector-label" });
    valueLabel.setText(presetOption);
  }
};

// src/fields/fieldManagers/MultiField.ts
var MultiField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Multi" /* Multi */);
    this.valuesPromptComponents = [];
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new MultiSelectModal(app2, file, this.field, value);
    modal.titleEl.setText("Select values");
    if (MultiField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("bullet-list");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (MultiField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new MultiSelectModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Select options for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a, _b;
      let valueHovered = false;
      let currentValues = [];
      if (p[this.field.name]) {
        if (Object.keys(p[this.field.name]).includes("path")) {
          currentValues = [`[[${p[this.field.name].path.replace(".md", "")}]]`];
        } else if (Array.isArray(p[this.field.name])) {
          currentValues.push(...p[this.field.name].last().split(",").map((v) => v.trim()));
        } else {
          currentValues = p[this.field.name].split(",").map((v) => v.trim());
        }
      }
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      Object.keys(this.field.options).filter((o) => !currentValues.contains(this.field.options[o])).forEach((o) => {
        const option = new Option(this.field.options[o], o);
        if (p[this.field.name] === this.field.options[o]) {
          option.selected = true;
        }
        select.add(option);
      });
      select.onchange = () => {
        const newValues = [...currentValues, this.field.options[select.value]].join(", ");
        MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValues);
        singleSpacer.hide();
        doubleSpacer.show();
        addBtn.hide();
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      select.onkeydown = (e) => {
        if (e.key === "Escape") {
          fieldContainer.appendChild(valuesContainer);
          fieldContainer.appendChild(singleSpacer);
          fieldContainer.appendChild(doubleSpacer);
          fieldContainer.removeChild(selectContainer);
        }
      };
      const closeSelect = document.createElement("button");
      closeSelect.setText("\u274C");
      closeSelect.addClass("metadata-menu-dv-field-button");
      closeSelect.addClass("multi");
      closeSelect.onclick = () => {
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      selectContainer.appendChild(closeSelect);
      const valuesContainer = document.createElement("div");
      valuesContainer.addClass("metadata-menu-dv-multi-values-container");
      currentValues.forEach((v) => {
        const valueContainer = document.createElement("div");
        valueContainer.addClass("metadata-menu-dv-multi-values-container");
        const valueRemoveBtn = document.createElement("button");
        valueRemoveBtn.setText("\u274C");
        valueRemoveBtn.addClass("metadata-menu-dv-field-button");
        valueRemoveBtn.addClass("multi");
        valueRemoveBtn.hide();
        valueRemoveBtn.onclick = () => {
          const remainingValues = currentValues.filter((cV) => cV !== v).join(", ");
          MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, remainingValues);
        };
        valueContainer.appendChild(valueRemoveBtn);
        const valueLabel = document.createElement("div");
        valueLabel.setText(v);
        valueLabel.addClass("metadata-menu-dv-multi-value-label");
        valueContainer.appendChild(valueLabel);
        valueContainer.onmouseover = () => {
          valueHovered = true;
          doubleSpacer.hide();
          singleSpacer.hide();
          valueRemoveBtn.show();
          valueLabel.addClass("hovered");
        };
        valueContainer.onmouseout = () => {
          valueHovered = false;
          valueRemoveBtn.hide();
          singleSpacer.show();
          doubleSpacer.hide();
          valueLabel.removeClass("hovered");
        };
        valuesContainer.appendChild(valueContainer);
      });
      const addBtn = document.createElement("button");
      addBtn.setText("\u2795");
      addBtn.setAttr("class", "metadata-menu-dv-field-button");
      valuesContainer.appendChild(addBtn);
      addBtn.onclick = () => {
        fieldContainer.removeChild(valuesContainer);
        fieldContainer.removeChild(singleSpacer);
        fieldContainer.removeChild(doubleSpacer);
        fieldContainer.appendChild(selectContainer);
      };
      const singleSpacer = document.createElement("div");
      singleSpacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const doubleSpacer = document.createElement("div");
      doubleSpacer.setAttr("class", "metadata-menu-dv-field-double-spacer");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        addBtn.hide();
        fieldContainer.onmouseover = () => {
          addBtn.show();
          doubleSpacer.hide();
          if (!valueHovered)
            singleSpacer.show();
        };
        fieldContainer.onmouseout = () => {
          addBtn.hide();
          singleSpacer.hide();
          doubleSpacer.show();
        };
      }
      if (!((_b = attrs == null ? void 0 : attrs.options) == null ? void 0 : _b.alwaysOn)) {
        singleSpacer.hide();
        doubleSpacer.show();
        addBtn.hide();
      } else {
        singleSpacer.show();
        doubleSpacer.hide();
        addBtn.show();
      }
      fieldContainer.appendChild(valuesContainer);
      fieldContainer.appendChild(singleSpacer);
      fieldContainer.appendChild(doubleSpacer);
    });
  }
};

// src/fields/fieldManagers/FileField.ts
var import_obsidian16 = require("obsidian");

// src/optionModals/fields/SingleFileModal.ts
var import_obsidian15 = require("obsidian");
var FileFuzzySuggester = class extends import_obsidian15.FuzzySuggestModal {
  constructor(app2, file, field, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
  }
  getItems() {
    try {
      const fileManager = new FieldManager[this.field.type](this.field);
      return fileManager.getFiles();
    } catch (error) {
      this.close();
      throw error;
    }
  }
  getItemText(item) {
    return item.basename;
  }
  onChooseItem(item) {
    if (this.lineNumber == -1) {
      replaceValues(this.app, this.file, this.field.name, FileField.buildMarkDownLink(this.app, this.file, item.basename));
    } else {
      insertValues(this.app, this.file, this.field.name, FileField.buildMarkDownLink(this.app, this.file, item.basename), this.lineNumber, this.inFrontmatter, this.top);
    }
    ;
  }
};

// src/fields/fieldManagers/FileField.ts
var FileField = class extends FieldManager2 {
  constructor(field) {
    super(field, "File" /* File */);
    this.getFiles = () => {
      const getResults = (api) => {
        try {
          return new Function("dv", `return ${this.field.options.dvQueryString}`)(api);
        } catch (error) {
          new import_obsidian16.Notice(`Wrong query for field <${this.field.name}>
check your settings`, 3e3);
        }
      };
      const dataview = app.plugins.plugins["dataview"];
      if (this.field.options.dvQueryString && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
        try {
          const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
          return app.vault.getMarkdownFiles().filter((f) => filesPath.includes(f.path));
        } catch (error) {
          throw error;
        }
      } else {
        return app.vault.getMarkdownFiles();
      }
    };
  }
  static buildMarkDownLink(app2, file, path) {
    const destFile = app2.metadataCache.getFirstLinkpathDest(path, file.path);
    if (destFile) {
      return app2.fileManager.generateMarkdownLink(destFile, file.path, void 0, destFile.basename);
    }
    return "";
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new FileFuzzySuggester(app2, file, this.field);
    modal.titleEl.setText("Select value");
    if (FileField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon("search");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (FileField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new FileFuzzySuggester(app2, file, this.field, lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const searchBtn = document.createElement("button");
      searchBtn.setText("\u{1F50E}");
      searchBtn.addClass("metadata-menu-dv-field-button");
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const file = app.vault.getAbstractFileByPath(p["file"]["path"]);
      let fieldModal;
      if (file instanceof import_obsidian16.TFile && file.extension == "md") {
        fieldModal = new FileFuzzySuggester(app, file, this.field);
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
      searchBtn.onclick = () => {
        fieldModal.open();
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        searchBtn.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          searchBtn.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          searchBtn.hide();
          spacer.show();
        };
      }
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(searchBtn);
      fieldContainer.appendChild(spacer);
    });
  }
  createFileContainer(parentContainer) {
    const dvQueryStringContainer = parentContainer.createDiv();
    dvQueryStringContainer.createEl("span", { text: "Dataview Query (optional)", cls: "metadata-menu-field-option" });
    this.dvQueryString = new import_obsidian16.TextAreaComponent(dvQueryStringContainer);
    this.dvQueryString.inputEl.cols = 60;
    this.dvQueryString.inputEl.rows = 6;
    this.dvQueryString.setValue(this.field.options.dvQueryString || "");
    this.dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(this.dvQueryString);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.fileValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createFileContainer(this.fileValidatorField);
    this.fileValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  getOptionsStr() {
    return this.field.options.dvQueryString || "";
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const basename = value.trim().replace(/^\[\[/g, "").replace(/\]\]$/g, "");
      return !!this.getFiles().map((f) => f.basename).find((item) => item === basename);
    });
  }
};

// src/fields/fieldManagers/DateField.ts
var import_obsidian19 = require("obsidian");
var import_obsidian20 = require("obsidian");

// src/optionModals/fields/DateModal.ts
var import_obsidian17 = require("obsidian");
var import_obsidian18 = require("obsidian");

// node_modules/flatpickr/dist/esm/types/options.js
var HOOKS = [
  "onChange",
  "onClose",
  "onDayCreate",
  "onDestroy",
  "onKeyDown",
  "onMonthChange",
  "onOpen",
  "onParseConfig",
  "onReady",
  "onValueUpdate",
  "onYearChange",
  "onPreCalendarPosition"
];
var defaults = {
  _disable: [],
  allowInput: false,
  allowInvalidPreload: false,
  altFormat: "F j, Y",
  altInput: false,
  altInputClass: "form-control input",
  animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
  ariaDateFormat: "F j, Y",
  autoFillDefaultTime: true,
  clickOpens: true,
  closeOnSelect: true,
  conjunction: ", ",
  dateFormat: "Y-m-d",
  defaultHour: 12,
  defaultMinute: 0,
  defaultSeconds: 0,
  disable: [],
  disableMobile: false,
  enableSeconds: false,
  enableTime: false,
  errorHandler: function(err) {
    return typeof console !== "undefined" && console.warn(err);
  },
  getWeek: function(givenDate) {
    var date = new Date(givenDate.getTime());
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    var week1 = new Date(date.getFullYear(), 0, 4);
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
  },
  hourIncrement: 1,
  ignoredFocusElements: [],
  inline: false,
  locale: "default",
  minuteIncrement: 5,
  mode: "single",
  monthSelectorType: "dropdown",
  nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
  noCalendar: false,
  now: new Date(),
  onChange: [],
  onClose: [],
  onDayCreate: [],
  onDestroy: [],
  onKeyDown: [],
  onMonthChange: [],
  onOpen: [],
  onParseConfig: [],
  onReady: [],
  onValueUpdate: [],
  onYearChange: [],
  onPreCalendarPosition: [],
  plugins: [],
  position: "auto",
  positionElement: void 0,
  prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
  shorthandCurrentMonth: false,
  showMonths: 1,
  static: false,
  time_24hr: false,
  weekNumbers: false,
  wrap: false
};

// node_modules/flatpickr/dist/esm/l10n/default.js
var english = {
  weekdays: {
    shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    longhand: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ]
  },
  months: {
    shorthand: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    longhand: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ]
  },
  daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  firstDayOfWeek: 0,
  ordinal: function(nth) {
    var s = nth % 100;
    if (s > 3 && s < 21)
      return "th";
    switch (s % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  },
  rangeSeparator: " to ",
  weekAbbreviation: "Wk",
  scrollTitle: "Scroll to increment",
  toggleTitle: "Click to toggle",
  amPM: ["AM", "PM"],
  yearAriaLabel: "Year",
  monthAriaLabel: "Month",
  hourAriaLabel: "Hour",
  minuteAriaLabel: "Minute",
  time_24hr: false
};
var default_default = english;

// node_modules/flatpickr/dist/esm/utils/index.js
var pad = function(number, length) {
  if (length === void 0) {
    length = 2;
  }
  return ("000" + number).slice(length * -1);
};
var int = function(bool) {
  return bool === true ? 1 : 0;
};
function debounce2(fn2, wait) {
  var t;
  return function() {
    var _this = this;
    var args = arguments;
    clearTimeout(t);
    t = setTimeout(function() {
      return fn2.apply(_this, args);
    }, wait);
  };
}
var arrayify = function(obj) {
  return obj instanceof Array ? obj : [obj];
};

// node_modules/flatpickr/dist/esm/utils/dom.js
function toggleClass(elem, className, bool) {
  if (bool === true)
    return elem.classList.add(className);
  elem.classList.remove(className);
}
function createElement(tag, className, content) {
  var e = window.document.createElement(tag);
  className = className || "";
  content = content || "";
  e.className = className;
  if (content !== void 0)
    e.textContent = content;
  return e;
}
function clearNode(node) {
  while (node.firstChild)
    node.removeChild(node.firstChild);
}
function findParent(node, condition) {
  if (condition(node))
    return node;
  else if (node.parentNode)
    return findParent(node.parentNode, condition);
  return void 0;
}
function createNumberInput(inputClassName, opts) {
  var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
  if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
    numInput.type = "number";
  } else {
    numInput.type = "text";
    numInput.pattern = "\\d*";
  }
  if (opts !== void 0)
    for (var key in opts)
      numInput.setAttribute(key, opts[key]);
  wrapper.appendChild(numInput);
  wrapper.appendChild(arrowUp);
  wrapper.appendChild(arrowDown);
  return wrapper;
}
function getEventTarget(event) {
  try {
    if (typeof event.composedPath === "function") {
      var path = event.composedPath();
      return path[0];
    }
    return event.target;
  } catch (error) {
    return event.target;
  }
}

// node_modules/flatpickr/dist/esm/utils/formatting.js
var doNothing = function() {
  return void 0;
};
var monthToStr = function(monthNumber, shorthand, locale) {
  return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var revFormat = {
  D: doNothing,
  F: function(dateObj, monthName, locale) {
    dateObj.setMonth(locale.months.longhand.indexOf(monthName));
  },
  G: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  H: function(dateObj, hour) {
    dateObj.setHours(parseFloat(hour));
  },
  J: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  K: function(dateObj, amPM, locale) {
    dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
  },
  M: function(dateObj, shortMonth, locale) {
    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
  },
  S: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  U: function(_, unixSeconds) {
    return new Date(parseFloat(unixSeconds) * 1e3);
  },
  W: function(dateObj, weekNum, locale) {
    var weekNumber = parseInt(weekNum);
    var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
    return date;
  },
  Y: function(dateObj, year) {
    dateObj.setFullYear(parseFloat(year));
  },
  Z: function(_, ISODate) {
    return new Date(ISODate);
  },
  d: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  h: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  i: function(dateObj, minutes) {
    dateObj.setMinutes(parseFloat(minutes));
  },
  j: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  l: doNothing,
  m: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  n: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  s: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  u: function(_, unixMillSeconds) {
    return new Date(parseFloat(unixMillSeconds));
  },
  w: doNothing,
  y: function(dateObj, year) {
    dateObj.setFullYear(2e3 + parseFloat(year));
  }
};
var tokenRegex = {
  D: "",
  F: "",
  G: "(\\d\\d|\\d)",
  H: "(\\d\\d|\\d)",
  J: "(\\d\\d|\\d)\\w+",
  K: "",
  M: "",
  S: "(\\d\\d|\\d)",
  U: "(.+)",
  W: "(\\d\\d|\\d)",
  Y: "(\\d{4})",
  Z: "(.+)",
  d: "(\\d\\d|\\d)",
  h: "(\\d\\d|\\d)",
  i: "(\\d\\d|\\d)",
  j: "(\\d\\d|\\d)",
  l: "",
  m: "(\\d\\d|\\d)",
  n: "(\\d\\d|\\d)",
  s: "(\\d\\d|\\d)",
  u: "(.+)",
  w: "(\\d\\d|\\d)",
  y: "(\\d{2})"
};
var formats = {
  Z: function(date) {
    return date.toISOString();
  },
  D: function(date, locale, options) {
    return locale.weekdays.shorthand[formats.w(date, locale, options)];
  },
  F: function(date, locale, options) {
    return monthToStr(formats.n(date, locale, options) - 1, false, locale);
  },
  G: function(date, locale, options) {
    return pad(formats.h(date, locale, options));
  },
  H: function(date) {
    return pad(date.getHours());
  },
  J: function(date, locale) {
    return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
  },
  K: function(date, locale) {
    return locale.amPM[int(date.getHours() > 11)];
  },
  M: function(date, locale) {
    return monthToStr(date.getMonth(), true, locale);
  },
  S: function(date) {
    return pad(date.getSeconds());
  },
  U: function(date) {
    return date.getTime() / 1e3;
  },
  W: function(date, _, options) {
    return options.getWeek(date);
  },
  Y: function(date) {
    return pad(date.getFullYear(), 4);
  },
  d: function(date) {
    return pad(date.getDate());
  },
  h: function(date) {
    return date.getHours() % 12 ? date.getHours() % 12 : 12;
  },
  i: function(date) {
    return pad(date.getMinutes());
  },
  j: function(date) {
    return date.getDate();
  },
  l: function(date, locale) {
    return locale.weekdays.longhand[date.getDay()];
  },
  m: function(date) {
    return pad(date.getMonth() + 1);
  },
  n: function(date) {
    return date.getMonth() + 1;
  },
  s: function(date) {
    return date.getSeconds();
  },
  u: function(date) {
    return date.getTime();
  },
  w: function(date) {
    return date.getDay();
  },
  y: function(date) {
    return String(date.getFullYear()).substring(2);
  }
};

// node_modules/flatpickr/dist/esm/utils/dates.js
var createDateFormatter = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
  return function(dateObj, frmt, overrideLocale) {
    var locale = overrideLocale || l10n;
    if (config.formatDate !== void 0 && !isMobile) {
      return config.formatDate(dateObj, frmt, locale);
    }
    return frmt.split("").map(function(c, i, arr) {
      return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
    }).join("");
  };
};
var createDateParser = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
  return function(date, givenFormat, timeless, customLocale) {
    if (date !== 0 && !date)
      return void 0;
    var locale = customLocale || l10n;
    var parsedDate;
    var dateOrig = date;
    if (date instanceof Date)
      parsedDate = new Date(date.getTime());
    else if (typeof date !== "string" && date.toFixed !== void 0)
      parsedDate = new Date(date);
    else if (typeof date === "string") {
      var format2 = givenFormat || (config || defaults).dateFormat;
      var datestr = String(date).trim();
      if (datestr === "today") {
        parsedDate = new Date();
        timeless = true;
      } else if (config && config.parseDate) {
        parsedDate = config.parseDate(date, format2);
      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
        parsedDate = new Date(date);
      } else {
        var matched = void 0, ops = [];
        for (var i = 0, matchIndex = 0, regexStr = ""; i < format2.length; i++) {
          var token = format2[i];
          var isBackSlash = token === "\\";
          var escaped = format2[i - 1] === "\\" || isBackSlash;
          if (tokenRegex[token] && !escaped) {
            regexStr += tokenRegex[token];
            var match = new RegExp(regexStr).exec(date);
            if (match && (matched = true)) {
              ops[token !== "Y" ? "push" : "unshift"]({
                fn: revFormat[token],
                val: match[++matchIndex]
              });
            }
          } else if (!isBackSlash)
            regexStr += ".";
        }
        parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
        ops.forEach(function(_a2) {
          var fn2 = _a2.fn, val = _a2.val;
          return parsedDate = fn2(parsedDate, val, locale) || parsedDate;
        });
        parsedDate = matched ? parsedDate : void 0;
      }
    }
    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
      config.errorHandler(new Error("Invalid date provided: " + dateOrig));
      return void 0;
    }
    if (timeless === true)
      parsedDate.setHours(0, 0, 0, 0);
    return parsedDate;
  };
};
function compareDates(date1, date2, timeless) {
  if (timeless === void 0) {
    timeless = true;
  }
  if (timeless !== false) {
    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
  }
  return date1.getTime() - date2.getTime();
}
var isBetween = function(ts, ts1, ts2) {
  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
  return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function(secondsSinceMidnight) {
  var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
  return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
};
var duration = {
  DAY: 864e5
};
function getDefaultHours(config) {
  var hours = config.defaultHour;
  var minutes = config.defaultMinute;
  var seconds = config.defaultSeconds;
  if (config.minDate !== void 0) {
    var minHour = config.minDate.getHours();
    var minMinutes = config.minDate.getMinutes();
    var minSeconds = config.minDate.getSeconds();
    if (hours < minHour) {
      hours = minHour;
    }
    if (hours === minHour && minutes < minMinutes) {
      minutes = minMinutes;
    }
    if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
      seconds = config.minDate.getSeconds();
  }
  if (config.maxDate !== void 0) {
    var maxHr = config.maxDate.getHours();
    var maxMinutes = config.maxDate.getMinutes();
    hours = Math.min(hours, maxHr);
    if (hours === maxHr)
      minutes = Math.min(maxMinutes, minutes);
    if (hours === maxHr && minutes === maxMinutes)
      seconds = config.maxDate.getSeconds();
  }
  return { hours, minutes, seconds };
}

// node_modules/flatpickr/dist/esm/utils/polyfills.js
if (typeof Object.assign !== "function") {
  Object.assign = function(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (!target) {
      throw TypeError("Cannot convert undefined or null to object");
    }
    var _loop_1 = function(source2) {
      if (source2) {
        Object.keys(source2).forEach(function(key) {
          return target[key] = source2[key];
        });
      }
    };
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
      var source = args_1[_a];
      _loop_1(source);
    }
    return target;
  };
}

// node_modules/flatpickr/dist/esm/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
  var self = {
    config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
    l10n: default_default
  };
  self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  self._handlers = [];
  self.pluginElements = [];
  self.loadedPlugins = [];
  self._bind = bind;
  self._setHoursFromDate = setHoursFromDate;
  self._positionCalendar = positionCalendar;
  self.changeMonth = changeMonth;
  self.changeYear = changeYear;
  self.clear = clear;
  self.close = close;
  self.onMouseOver = onMouseOver;
  self._createElement = createElement;
  self.createDay = createDay;
  self.destroy = destroy;
  self.isEnabled = isEnabled;
  self.jumpToDate = jumpToDate;
  self.updateValue = updateValue;
  self.open = open;
  self.redraw = redraw;
  self.set = set;
  self.setDate = setDate;
  self.toggle = toggle;
  function setupHelperFunctions() {
    self.utils = {
      getDaysInMonth: function(month, yr) {
        if (month === void 0) {
          month = self.currentMonth;
        }
        if (yr === void 0) {
          yr = self.currentYear;
        }
        if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
          return 29;
        return self.l10n.daysInMonth[month];
      }
    };
  }
  function init() {
    self.element = self.input = element;
    self.isOpen = false;
    parseConfig();
    setupLocale();
    setupInputs();
    setupDates();
    setupHelperFunctions();
    if (!self.isMobile)
      build();
    bindEvents();
    if (self.selectedDates.length || self.config.noCalendar) {
      if (self.config.enableTime) {
        setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : void 0);
      }
      updateValue(false);
    }
    setCalendarWidth();
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (!self.isMobile && isSafari) {
      positionCalendar();
    }
    triggerEvent("onReady");
  }
  function getClosestActiveElement() {
    var _a;
    return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
  }
  function bindToInstance(fn2) {
    return fn2.bind(self);
  }
  function setCalendarWidth() {
    var config = self.config;
    if (config.weekNumbers === false && config.showMonths === 1) {
      return;
    } else if (config.noCalendar !== true) {
      window.requestAnimationFrame(function() {
        if (self.calendarContainer !== void 0) {
          self.calendarContainer.style.visibility = "hidden";
          self.calendarContainer.style.display = "block";
        }
        if (self.daysContainer !== void 0) {
          var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
          self.daysContainer.style.width = daysWidth + "px";
          self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== void 0 ? self.weekWrapper.offsetWidth : 0) + "px";
          self.calendarContainer.style.removeProperty("visibility");
          self.calendarContainer.style.removeProperty("display");
        }
      });
    }
  }
  function updateTime(e) {
    if (self.selectedDates.length === 0) {
      var defaultDate = self.config.minDate === void 0 || compareDates(new Date(), self.config.minDate) >= 0 ? new Date() : new Date(self.config.minDate.getTime());
      var defaults2 = getDefaultHours(self.config);
      defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
      self.selectedDates = [defaultDate];
      self.latestSelectedDateObj = defaultDate;
    }
    if (e !== void 0 && e.type !== "blur") {
      timeWrapper(e);
    }
    var prevValue = self._input.value;
    setHoursFromInputs();
    updateValue();
    if (self._input.value !== prevValue) {
      self._debouncedChange();
    }
  }
  function ampm2military(hour, amPM) {
    return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
  }
  function military2ampm(hour) {
    switch (hour % 24) {
      case 0:
      case 12:
        return 12;
      default:
        return hour % 12;
    }
  }
  function setHoursFromInputs() {
    if (self.hourElement === void 0 || self.minuteElement === void 0)
      return;
    var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== void 0 ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
    if (self.amPM !== void 0) {
      hours = ampm2military(hours, self.amPM.textContent);
    }
    var limitMinHours = self.config.minTime !== void 0 || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
    var limitMaxHours = self.config.maxTime !== void 0 || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
    if (self.config.maxTime !== void 0 && self.config.minTime !== void 0 && self.config.minTime > self.config.maxTime) {
      var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
      var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
      var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
      if (currentTime > maxBound && currentTime < minBound) {
        var result = parseSeconds(minBound);
        hours = result[0];
        minutes = result[1];
        seconds = result[2];
      }
    } else {
      if (limitMaxHours) {
        var maxTime = self.config.maxTime !== void 0 ? self.config.maxTime : self.config.maxDate;
        hours = Math.min(hours, maxTime.getHours());
        if (hours === maxTime.getHours())
          minutes = Math.min(minutes, maxTime.getMinutes());
        if (minutes === maxTime.getMinutes())
          seconds = Math.min(seconds, maxTime.getSeconds());
      }
      if (limitMinHours) {
        var minTime = self.config.minTime !== void 0 ? self.config.minTime : self.config.minDate;
        hours = Math.max(hours, minTime.getHours());
        if (hours === minTime.getHours() && minutes < minTime.getMinutes())
          minutes = minTime.getMinutes();
        if (minutes === minTime.getMinutes())
          seconds = Math.max(seconds, minTime.getSeconds());
      }
    }
    setHours(hours, minutes, seconds);
  }
  function setHoursFromDate(dateObj) {
    var date = dateObj || self.latestSelectedDateObj;
    if (date && date instanceof Date) {
      setHours(date.getHours(), date.getMinutes(), date.getSeconds());
    }
  }
  function setHours(hours, minutes, seconds) {
    if (self.latestSelectedDateObj !== void 0) {
      self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
    }
    if (!self.hourElement || !self.minuteElement || self.isMobile)
      return;
    self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
    self.minuteElement.value = pad(minutes);
    if (self.amPM !== void 0)
      self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
    if (self.secondElement !== void 0)
      self.secondElement.value = pad(seconds);
  }
  function onYearInput(event) {
    var eventTarget = getEventTarget(event);
    var year = parseInt(eventTarget.value) + (event.delta || 0);
    if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
      changeYear(year);
    }
  }
  function bind(element2, event, handler, options) {
    if (event instanceof Array)
      return event.forEach(function(ev) {
        return bind(element2, ev, handler, options);
      });
    if (element2 instanceof Array)
      return element2.forEach(function(el) {
        return bind(el, event, handler, options);
      });
    element2.addEventListener(event, handler, options);
    self._handlers.push({
      remove: function() {
        return element2.removeEventListener(event, handler, options);
      }
    });
  }
  function triggerChange() {
    triggerEvent("onChange");
  }
  function bindEvents() {
    if (self.config.wrap) {
      ["open", "close", "toggle", "clear"].forEach(function(evt) {
        Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
          return bind(el, "click", self[evt]);
        });
      });
    }
    if (self.isMobile) {
      setupMobile();
      return;
    }
    var debouncedResize = debounce2(onResize, 50);
    self._debouncedChange = debounce2(triggerChange, DEBOUNCED_CHANGE_MS);
    if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
      bind(self.daysContainer, "mouseover", function(e) {
        if (self.config.mode === "range")
          onMouseOver(getEventTarget(e));
      });
    bind(self._input, "keydown", onKeyDown);
    if (self.calendarContainer !== void 0) {
      bind(self.calendarContainer, "keydown", onKeyDown);
    }
    if (!self.config.inline && !self.config.static)
      bind(window, "resize", debouncedResize);
    if (window.ontouchstart !== void 0)
      bind(window.document, "touchstart", documentClick);
    else
      bind(window.document, "mousedown", documentClick);
    bind(window.document, "focus", documentClick, { capture: true });
    if (self.config.clickOpens === true) {
      bind(self._input, "focus", self.open);
      bind(self._input, "click", self.open);
    }
    if (self.daysContainer !== void 0) {
      bind(self.monthNav, "click", onMonthNavClick);
      bind(self.monthNav, ["keyup", "increment"], onYearInput);
      bind(self.daysContainer, "click", selectDate);
    }
    if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0) {
      var selText = function(e) {
        return getEventTarget(e).select();
      };
      bind(self.timeContainer, ["increment"], updateTime);
      bind(self.timeContainer, "blur", updateTime, { capture: true });
      bind(self.timeContainer, "click", timeIncrement);
      bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
      if (self.secondElement !== void 0)
        bind(self.secondElement, "focus", function() {
          return self.secondElement && self.secondElement.select();
        });
      if (self.amPM !== void 0) {
        bind(self.amPM, "click", function(e) {
          updateTime(e);
        });
      }
    }
    if (self.config.allowInput) {
      bind(self._input, "blur", onBlur);
    }
  }
  function jumpToDate(jumpDate, triggerChange2) {
    var jumpTo = jumpDate !== void 0 ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
    var oldYear = self.currentYear;
    var oldMonth = self.currentMonth;
    try {
      if (jumpTo !== void 0) {
        self.currentYear = jumpTo.getFullYear();
        self.currentMonth = jumpTo.getMonth();
      }
    } catch (e) {
      e.message = "Invalid date supplied: " + jumpTo;
      self.config.errorHandler(e);
    }
    if (triggerChange2 && self.currentYear !== oldYear) {
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    if (triggerChange2 && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
      triggerEvent("onMonthChange");
    }
    self.redraw();
  }
  function timeIncrement(e) {
    var eventTarget = getEventTarget(e);
    if (~eventTarget.className.indexOf("arrow"))
      incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
  }
  function incrementNumInput(e, delta, inputElem) {
    var target = e && getEventTarget(e);
    var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
    var event = createEvent("increment");
    event.delta = delta;
    input && input.dispatchEvent(event);
  }
  function build() {
    var fragment = window.document.createDocumentFragment();
    self.calendarContainer = createElement("div", "flatpickr-calendar");
    self.calendarContainer.tabIndex = -1;
    if (!self.config.noCalendar) {
      fragment.appendChild(buildMonthNav());
      self.innerContainer = createElement("div", "flatpickr-innerContainer");
      if (self.config.weekNumbers) {
        var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
        self.innerContainer.appendChild(weekWrapper);
        self.weekNumbers = weekNumbers;
        self.weekWrapper = weekWrapper;
      }
      self.rContainer = createElement("div", "flatpickr-rContainer");
      self.rContainer.appendChild(buildWeekdays());
      if (!self.daysContainer) {
        self.daysContainer = createElement("div", "flatpickr-days");
        self.daysContainer.tabIndex = -1;
      }
      buildDays();
      self.rContainer.appendChild(self.daysContainer);
      self.innerContainer.appendChild(self.rContainer);
      fragment.appendChild(self.innerContainer);
    }
    if (self.config.enableTime) {
      fragment.appendChild(buildTime());
    }
    toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
    toggleClass(self.calendarContainer, "animate", self.config.animate === true);
    toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
    self.calendarContainer.appendChild(fragment);
    var customAppend = self.config.appendTo !== void 0 && self.config.appendTo.nodeType !== void 0;
    if (self.config.inline || self.config.static) {
      self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
      if (self.config.inline) {
        if (!customAppend && self.element.parentNode)
          self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
        else if (self.config.appendTo !== void 0)
          self.config.appendTo.appendChild(self.calendarContainer);
      }
      if (self.config.static) {
        var wrapper = createElement("div", "flatpickr-wrapper");
        if (self.element.parentNode)
          self.element.parentNode.insertBefore(wrapper, self.element);
        wrapper.appendChild(self.element);
        if (self.altInput)
          wrapper.appendChild(self.altInput);
        wrapper.appendChild(self.calendarContainer);
      }
    }
    if (!self.config.static && !self.config.inline)
      (self.config.appendTo !== void 0 ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
  }
  function createDay(className, date, _dayNumber, i) {
    var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
    dayElement.dateObj = date;
    dayElement.$i = i;
    dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
    if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
      self.todayDateElem = dayElement;
      dayElement.classList.add("today");
      dayElement.setAttribute("aria-current", "date");
    }
    if (dateIsEnabled) {
      dayElement.tabIndex = -1;
      if (isDateSelected(date)) {
        dayElement.classList.add("selected");
        self.selectedDateElem = dayElement;
        if (self.config.mode === "range") {
          toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
          toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
          if (className === "nextMonthDay")
            dayElement.classList.add("inRange");
        }
      }
    } else {
      dayElement.classList.add("flatpickr-disabled");
    }
    if (self.config.mode === "range") {
      if (isDateInRange(date) && !isDateSelected(date))
        dayElement.classList.add("inRange");
    }
    if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i % 7 === 6) {
      self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
    }
    triggerEvent("onDayCreate", dayElement);
    return dayElement;
  }
  function focusOnDayElem(targetNode) {
    targetNode.focus();
    if (self.config.mode === "range")
      onMouseOver(targetNode);
  }
  function getFirstAvailableDay(delta) {
    var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    for (var m = startMonth; m != endMonth; m += delta) {
      var month = self.daysContainer.children[m];
      var startIndex = delta > 0 ? 0 : month.children.length - 1;
      var endIndex = delta > 0 ? month.children.length : -1;
      for (var i = startIndex; i != endIndex; i += delta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
          return c;
      }
    }
    return void 0;
  }
  function getNextAvailableDay(current, delta) {
    var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    var loopDelta = delta > 0 ? 1 : -1;
    for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
      var month = self.daysContainer.children[m];
      var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
      var numMonthDays = month.children.length;
      for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta))
          return focusOnDayElem(c);
      }
    }
    self.changeMonth(loopDelta);
    focusOnDay(getFirstAvailableDay(loopDelta), 0);
    return void 0;
  }
  function focusOnDay(current, offset2) {
    var activeElement = getClosestActiveElement();
    var dayFocused = isInView(activeElement || document.body);
    var startElem = current !== void 0 ? current : dayFocused ? activeElement : self.selectedDateElem !== void 0 && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== void 0 && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset2 > 0 ? 1 : -1);
    if (startElem === void 0) {
      self._input.focus();
    } else if (!dayFocused) {
      focusOnDayElem(startElem);
    } else {
      getNextAvailableDay(startElem, offset2);
    }
  }
  function buildMonthDays(year, month) {
    var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
    var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
    var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
    var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
    for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
    }
    for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
    }
    for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
    }
    var dayContainer = createElement("div", "dayContainer");
    dayContainer.appendChild(days);
    return dayContainer;
  }
  function buildDays() {
    if (self.daysContainer === void 0) {
      return;
    }
    clearNode(self.daysContainer);
    if (self.weekNumbers)
      clearNode(self.weekNumbers);
    var frag = document.createDocumentFragment();
    for (var i = 0; i < self.config.showMonths; i++) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
    }
    self.daysContainer.appendChild(frag);
    self.days = self.daysContainer.firstChild;
    if (self.config.mode === "range" && self.selectedDates.length === 1) {
      onMouseOver();
    }
  }
  function buildMonthSwitch() {
    if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown")
      return;
    var shouldBuildMonth = function(month2) {
      if (self.config.minDate !== void 0 && self.currentYear === self.config.minDate.getFullYear() && month2 < self.config.minDate.getMonth()) {
        return false;
      }
      return !(self.config.maxDate !== void 0 && self.currentYear === self.config.maxDate.getFullYear() && month2 > self.config.maxDate.getMonth());
    };
    self.monthsDropdownContainer.tabIndex = -1;
    self.monthsDropdownContainer.innerHTML = "";
    for (var i = 0; i < 12; i++) {
      if (!shouldBuildMonth(i))
        continue;
      var month = createElement("option", "flatpickr-monthDropdown-month");
      month.value = new Date(self.currentYear, i).getMonth().toString();
      month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
      month.tabIndex = -1;
      if (self.currentMonth === i) {
        month.selected = true;
      }
      self.monthsDropdownContainer.appendChild(month);
    }
  }
  function buildMonth() {
    var container = createElement("div", "flatpickr-month");
    var monthNavFragment = window.document.createDocumentFragment();
    var monthElement;
    if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
      monthElement = createElement("span", "cur-month");
    } else {
      self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
      self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
      bind(self.monthsDropdownContainer, "change", function(e) {
        var target = getEventTarget(e);
        var selectedMonth = parseInt(target.value, 10);
        self.changeMonth(selectedMonth - self.currentMonth);
        triggerEvent("onMonthChange");
      });
      buildMonthSwitch();
      monthElement = self.monthsDropdownContainer;
    }
    var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
    var yearElement = yearInput.getElementsByTagName("input")[0];
    yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
    if (self.config.minDate) {
      yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
    }
    if (self.config.maxDate) {
      yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
      yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
    }
    var currentMonth = createElement("div", "flatpickr-current-month");
    currentMonth.appendChild(monthElement);
    currentMonth.appendChild(yearInput);
    monthNavFragment.appendChild(currentMonth);
    container.appendChild(monthNavFragment);
    return {
      container,
      yearElement,
      monthElement
    };
  }
  function buildMonths() {
    clearNode(self.monthNav);
    self.monthNav.appendChild(self.prevMonthNav);
    if (self.config.showMonths) {
      self.yearElements = [];
      self.monthElements = [];
    }
    for (var m = self.config.showMonths; m--; ) {
      var month = buildMonth();
      self.yearElements.push(month.yearElement);
      self.monthElements.push(month.monthElement);
      self.monthNav.appendChild(month.container);
    }
    self.monthNav.appendChild(self.nextMonthNav);
  }
  function buildMonthNav() {
    self.monthNav = createElement("div", "flatpickr-months");
    self.yearElements = [];
    self.monthElements = [];
    self.prevMonthNav = createElement("span", "flatpickr-prev-month");
    self.prevMonthNav.innerHTML = self.config.prevArrow;
    self.nextMonthNav = createElement("span", "flatpickr-next-month");
    self.nextMonthNav.innerHTML = self.config.nextArrow;
    buildMonths();
    Object.defineProperty(self, "_hidePrevMonthArrow", {
      get: function() {
        return self.__hidePrevMonthArrow;
      },
      set: function(bool) {
        if (self.__hidePrevMonthArrow !== bool) {
          toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
          self.__hidePrevMonthArrow = bool;
        }
      }
    });
    Object.defineProperty(self, "_hideNextMonthArrow", {
      get: function() {
        return self.__hideNextMonthArrow;
      },
      set: function(bool) {
        if (self.__hideNextMonthArrow !== bool) {
          toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
          self.__hideNextMonthArrow = bool;
        }
      }
    });
    self.currentYearElement = self.yearElements[0];
    updateNavigationCurrentMonth();
    return self.monthNav;
  }
  function buildTime() {
    self.calendarContainer.classList.add("hasTime");
    if (self.config.noCalendar)
      self.calendarContainer.classList.add("noCalendar");
    var defaults2 = getDefaultHours(self.config);
    self.timeContainer = createElement("div", "flatpickr-time");
    self.timeContainer.tabIndex = -1;
    var separator = createElement("span", "flatpickr-time-separator", ":");
    var hourInput = createNumberInput("flatpickr-hour", {
      "aria-label": self.l10n.hourAriaLabel
    });
    self.hourElement = hourInput.getElementsByTagName("input")[0];
    var minuteInput = createNumberInput("flatpickr-minute", {
      "aria-label": self.l10n.minuteAriaLabel
    });
    self.minuteElement = minuteInput.getElementsByTagName("input")[0];
    self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
    self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
    self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults2.minutes);
    self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
    self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
    self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
    self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
    self.hourElement.setAttribute("maxlength", "2");
    self.minuteElement.setAttribute("min", "0");
    self.minuteElement.setAttribute("max", "59");
    self.minuteElement.setAttribute("maxlength", "2");
    self.timeContainer.appendChild(hourInput);
    self.timeContainer.appendChild(separator);
    self.timeContainer.appendChild(minuteInput);
    if (self.config.time_24hr)
      self.timeContainer.classList.add("time24hr");
    if (self.config.enableSeconds) {
      self.timeContainer.classList.add("hasSeconds");
      var secondInput = createNumberInput("flatpickr-second");
      self.secondElement = secondInput.getElementsByTagName("input")[0];
      self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults2.seconds);
      self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
      self.secondElement.setAttribute("min", "0");
      self.secondElement.setAttribute("max", "59");
      self.secondElement.setAttribute("maxlength", "2");
      self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
      self.timeContainer.appendChild(secondInput);
    }
    if (!self.config.time_24hr) {
      self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
      self.amPM.title = self.l10n.toggleTitle;
      self.amPM.tabIndex = -1;
      self.timeContainer.appendChild(self.amPM);
    }
    return self.timeContainer;
  }
  function buildWeekdays() {
    if (!self.weekdayContainer)
      self.weekdayContainer = createElement("div", "flatpickr-weekdays");
    else
      clearNode(self.weekdayContainer);
    for (var i = self.config.showMonths; i--; ) {
      var container = createElement("div", "flatpickr-weekdaycontainer");
      self.weekdayContainer.appendChild(container);
    }
    updateWeekdays();
    return self.weekdayContainer;
  }
  function updateWeekdays() {
    if (!self.weekdayContainer) {
      return;
    }
    var firstDayOfWeek = self.l10n.firstDayOfWeek;
    var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
    if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
      weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
    }
    for (var i = self.config.showMonths; i--; ) {
      self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
    }
  }
  function buildWeeks() {
    self.calendarContainer.classList.add("hasWeeks");
    var weekWrapper = createElement("div", "flatpickr-weekwrapper");
    weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
    var weekNumbers = createElement("div", "flatpickr-weeks");
    weekWrapper.appendChild(weekNumbers);
    return {
      weekWrapper,
      weekNumbers
    };
  }
  function changeMonth(value, isOffset) {
    if (isOffset === void 0) {
      isOffset = true;
    }
    var delta = isOffset ? value : value - self.currentMonth;
    if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true)
      return;
    self.currentMonth += delta;
    if (self.currentMonth < 0 || self.currentMonth > 11) {
      self.currentYear += self.currentMonth > 11 ? 1 : -1;
      self.currentMonth = (self.currentMonth + 12) % 12;
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    buildDays();
    triggerEvent("onMonthChange");
    updateNavigationCurrentMonth();
  }
  function clear(triggerChangeEvent, toInitial) {
    if (triggerChangeEvent === void 0) {
      triggerChangeEvent = true;
    }
    if (toInitial === void 0) {
      toInitial = true;
    }
    self.input.value = "";
    if (self.altInput !== void 0)
      self.altInput.value = "";
    if (self.mobileInput !== void 0)
      self.mobileInput.value = "";
    self.selectedDates = [];
    self.latestSelectedDateObj = void 0;
    if (toInitial === true) {
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
    }
    if (self.config.enableTime === true) {
      var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
      setHours(hours, minutes, seconds);
    }
    self.redraw();
    if (triggerChangeEvent)
      triggerEvent("onChange");
  }
  function close() {
    self.isOpen = false;
    if (!self.isMobile) {
      if (self.calendarContainer !== void 0) {
        self.calendarContainer.classList.remove("open");
      }
      if (self._input !== void 0) {
        self._input.classList.remove("active");
      }
    }
    triggerEvent("onClose");
  }
  function destroy() {
    if (self.config !== void 0)
      triggerEvent("onDestroy");
    for (var i = self._handlers.length; i--; ) {
      self._handlers[i].remove();
    }
    self._handlers = [];
    if (self.mobileInput) {
      if (self.mobileInput.parentNode)
        self.mobileInput.parentNode.removeChild(self.mobileInput);
      self.mobileInput = void 0;
    } else if (self.calendarContainer && self.calendarContainer.parentNode) {
      if (self.config.static && self.calendarContainer.parentNode) {
        var wrapper = self.calendarContainer.parentNode;
        wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
        if (wrapper.parentNode) {
          while (wrapper.firstChild)
            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
          wrapper.parentNode.removeChild(wrapper);
        }
      } else
        self.calendarContainer.parentNode.removeChild(self.calendarContainer);
    }
    if (self.altInput) {
      self.input.type = "text";
      if (self.altInput.parentNode)
        self.altInput.parentNode.removeChild(self.altInput);
      delete self.altInput;
    }
    if (self.input) {
      self.input.type = self.input._type;
      self.input.classList.remove("flatpickr-input");
      self.input.removeAttribute("readonly");
    }
    [
      "_showTimeInput",
      "latestSelectedDateObj",
      "_hideNextMonthArrow",
      "_hidePrevMonthArrow",
      "__hideNextMonthArrow",
      "__hidePrevMonthArrow",
      "isMobile",
      "isOpen",
      "selectedDateElem",
      "minDateHasTime",
      "maxDateHasTime",
      "days",
      "daysContainer",
      "_input",
      "_positionElement",
      "innerContainer",
      "rContainer",
      "monthNav",
      "todayDateElem",
      "calendarContainer",
      "weekdayContainer",
      "prevMonthNav",
      "nextMonthNav",
      "monthsDropdownContainer",
      "currentMonthElement",
      "currentYearElement",
      "navigationCurrentMonth",
      "selectedDateElem",
      "config"
    ].forEach(function(k) {
      try {
        delete self[k];
      } catch (_) {
      }
    });
  }
  function isCalendarElem(elem) {
    return self.calendarContainer.contains(elem);
  }
  function documentClick(e) {
    if (self.isOpen && !self.config.inline) {
      var eventTarget_1 = getEventTarget(e);
      var isCalendarElement = isCalendarElem(eventTarget_1);
      var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
      var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
      var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
        return elem.contains(eventTarget_1);
      });
      if (lostFocus && isIgnored) {
        if (self.config.allowInput) {
          self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        }
        if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0 && self.input.value !== "" && self.input.value !== void 0) {
          updateTime();
        }
        self.close();
        if (self.config && self.config.mode === "range" && self.selectedDates.length === 1)
          self.clear(false);
      }
    }
  }
  function changeYear(newYear) {
    if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear())
      return;
    var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
    self.currentYear = newYearNum || self.currentYear;
    if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
      self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
    } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
      self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
    }
    if (isNewYear) {
      self.redraw();
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
  }
  function isEnabled(date, timeless) {
    var _a;
    if (timeless === void 0) {
      timeless = true;
    }
    var dateToCheck = self.parseDate(date, void 0, timeless);
    if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== void 0 ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== void 0 ? timeless : !self.maxDateHasTime) > 0)
      return false;
    if (!self.config.enable && self.config.disable.length === 0)
      return true;
    if (dateToCheck === void 0)
      return false;
    var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
    for (var i = 0, d = void 0; i < array.length; i++) {
      d = array[i];
      if (typeof d === "function" && d(dateToCheck))
        return bool;
      else if (d instanceof Date && dateToCheck !== void 0 && d.getTime() === dateToCheck.getTime())
        return bool;
      else if (typeof d === "string") {
        var parsed = self.parseDate(d, void 0, true);
        return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
      } else if (typeof d === "object" && dateToCheck !== void 0 && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime())
        return bool;
    }
    return !bool;
  }
  function isInView(elem) {
    if (self.daysContainer !== void 0)
      return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
    return false;
  }
  function onBlur(e) {
    var isInput = e.target === self._input;
    var valueChanged = self._input.value.trimEnd() !== getDateStr();
    if (isInput && valueChanged && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
      self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
    }
  }
  function onKeyDown(e) {
    var eventTarget = getEventTarget(e);
    var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
    var allowInput = self.config.allowInput;
    var allowKeydown = self.isOpen && (!allowInput || !isInput);
    var allowInlineKeydown = self.config.inline && isInput && !allowInput;
    if (e.keyCode === 13 && isInput) {
      if (allowInput) {
        self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
        self.close();
        return eventTarget.blur();
      } else {
        self.open();
      }
    } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
      var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
      switch (e.keyCode) {
        case 13:
          if (isTimeObj) {
            e.preventDefault();
            updateTime();
            focusAndClose();
          } else
            selectDate(e);
          break;
        case 27:
          e.preventDefault();
          focusAndClose();
          break;
        case 8:
        case 46:
          if (isInput && !self.config.allowInput) {
            e.preventDefault();
            self.clear();
          }
          break;
        case 37:
        case 39:
          if (!isTimeObj && !isInput) {
            e.preventDefault();
            var activeElement = getClosestActiveElement();
            if (self.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
              var delta_1 = e.keyCode === 39 ? 1 : -1;
              if (!e.ctrlKey)
                focusOnDay(void 0, delta_1);
              else {
                e.stopPropagation();
                changeMonth(delta_1);
                focusOnDay(getFirstAvailableDay(1), 0);
              }
            }
          } else if (self.hourElement)
            self.hourElement.focus();
          break;
        case 38:
        case 40:
          e.preventDefault();
          var delta = e.keyCode === 40 ? 1 : -1;
          if (self.daysContainer && eventTarget.$i !== void 0 || eventTarget === self.input || eventTarget === self.altInput) {
            if (e.ctrlKey) {
              e.stopPropagation();
              changeYear(self.currentYear - delta);
              focusOnDay(getFirstAvailableDay(1), 0);
            } else if (!isTimeObj)
              focusOnDay(void 0, delta * 7);
          } else if (eventTarget === self.currentYearElement) {
            changeYear(self.currentYear - delta);
          } else if (self.config.enableTime) {
            if (!isTimeObj && self.hourElement)
              self.hourElement.focus();
            updateTime(e);
            self._debouncedChange();
          }
          break;
        case 9:
          if (isTimeObj) {
            var elems = [
              self.hourElement,
              self.minuteElement,
              self.secondElement,
              self.amPM
            ].concat(self.pluginElements).filter(function(x) {
              return x;
            });
            var i = elems.indexOf(eventTarget);
            if (i !== -1) {
              var target = elems[i + (e.shiftKey ? -1 : 1)];
              e.preventDefault();
              (target || self._input).focus();
            }
          } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
            e.preventDefault();
            self._input.focus();
          }
          break;
        default:
          break;
      }
    }
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      switch (e.key) {
        case self.l10n.amPM[0].charAt(0):
        case self.l10n.amPM[0].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[0];
          setHoursFromInputs();
          updateValue();
          break;
        case self.l10n.amPM[1].charAt(0):
        case self.l10n.amPM[1].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[1];
          setHoursFromInputs();
          updateValue();
          break;
      }
    }
    if (isInput || isCalendarElem(eventTarget)) {
      triggerEvent("onKeyDown", e);
    }
  }
  function onMouseOver(elem, cellClass) {
    if (cellClass === void 0) {
      cellClass = "flatpickr-day";
    }
    if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
      return;
    var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
    var containsDisabled = false;
    var minRange = 0, maxRange = 0;
    for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
      if (!isEnabled(new Date(t), true)) {
        containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
        if (t < initialDate && (!minRange || t > minRange))
          minRange = t;
        else if (t > initialDate && (!maxRange || t < maxRange))
          maxRange = t;
      }
    }
    var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
    hoverableCells.forEach(function(dayElem) {
      var date = dayElem.dateObj;
      var timestamp = date.getTime();
      var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
      if (outOfRange) {
        dayElem.classList.add("notAllowed");
        ["inRange", "startRange", "endRange"].forEach(function(c) {
          dayElem.classList.remove(c);
        });
        return;
      } else if (containsDisabled && !outOfRange)
        return;
      ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c) {
        dayElem.classList.remove(c);
      });
      if (elem !== void 0) {
        elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
        if (initialDate < hoverDate && timestamp === initialDate)
          dayElem.classList.add("startRange");
        else if (initialDate > hoverDate && timestamp === initialDate)
          dayElem.classList.add("endRange");
        if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
          dayElem.classList.add("inRange");
      }
    });
  }
  function onResize() {
    if (self.isOpen && !self.config.static && !self.config.inline)
      positionCalendar();
  }
  function open(e, positionElement) {
    if (positionElement === void 0) {
      positionElement = self._positionElement;
    }
    if (self.isMobile === true) {
      if (e) {
        e.preventDefault();
        var eventTarget = getEventTarget(e);
        if (eventTarget) {
          eventTarget.blur();
        }
      }
      if (self.mobileInput !== void 0) {
        self.mobileInput.focus();
        self.mobileInput.click();
      }
      triggerEvent("onOpen");
      return;
    } else if (self._input.disabled || self.config.inline) {
      return;
    }
    var wasOpen = self.isOpen;
    self.isOpen = true;
    if (!wasOpen) {
      self.calendarContainer.classList.add("open");
      self._input.classList.add("active");
      triggerEvent("onOpen");
      positionCalendar(positionElement);
    }
    if (self.config.enableTime === true && self.config.noCalendar === true) {
      if (self.config.allowInput === false && (e === void 0 || !self.timeContainer.contains(e.relatedTarget))) {
        setTimeout(function() {
          return self.hourElement.select();
        }, 50);
      }
    }
  }
  function minMaxDateSetter(type) {
    return function(date) {
      var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
      var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
      if (dateObj !== void 0) {
        self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
      }
      if (self.selectedDates) {
        self.selectedDates = self.selectedDates.filter(function(d) {
          return isEnabled(d);
        });
        if (!self.selectedDates.length && type === "min")
          setHoursFromDate(dateObj);
        updateValue();
      }
      if (self.daysContainer) {
        redraw();
        if (dateObj !== void 0)
          self.currentYearElement[type] = dateObj.getFullYear().toString();
        else
          self.currentYearElement.removeAttribute(type);
        self.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
      }
    };
  }
  function parseConfig() {
    var boolOpts = [
      "wrap",
      "weekNumbers",
      "allowInput",
      "allowInvalidPreload",
      "clickOpens",
      "time_24hr",
      "enableTime",
      "noCalendar",
      "altInput",
      "shorthandCurrentMonth",
      "inline",
      "static",
      "enableSeconds",
      "disableMobile"
    ];
    var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
    var formats2 = {};
    self.config.parseDate = userConfig.parseDate;
    self.config.formatDate = userConfig.formatDate;
    Object.defineProperty(self.config, "enable", {
      get: function() {
        return self.config._enable;
      },
      set: function(dates) {
        self.config._enable = parseDateRules(dates);
      }
    });
    Object.defineProperty(self.config, "disable", {
      get: function() {
        return self.config._disable;
      },
      set: function(dates) {
        self.config._disable = parseDateRules(dates);
      }
    });
    var timeMode = userConfig.mode === "time";
    if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
      var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
      formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
    }
    if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
      var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
      formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
    }
    Object.defineProperty(self.config, "minDate", {
      get: function() {
        return self.config._minDate;
      },
      set: minMaxDateSetter("min")
    });
    Object.defineProperty(self.config, "maxDate", {
      get: function() {
        return self.config._maxDate;
      },
      set: minMaxDateSetter("max")
    });
    var minMaxTimeSetter = function(type) {
      return function(val) {
        self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
      };
    };
    Object.defineProperty(self.config, "minTime", {
      get: function() {
        return self.config._minTime;
      },
      set: minMaxTimeSetter("min")
    });
    Object.defineProperty(self.config, "maxTime", {
      get: function() {
        return self.config._maxTime;
      },
      set: minMaxTimeSetter("max")
    });
    if (userConfig.mode === "time") {
      self.config.noCalendar = true;
      self.config.enableTime = true;
    }
    Object.assign(self.config, formats2, userConfig);
    for (var i = 0; i < boolOpts.length; i++)
      self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
    HOOKS.filter(function(hook) {
      return self.config[hook] !== void 0;
    }).forEach(function(hook) {
      self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
    });
    self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    for (var i = 0; i < self.config.plugins.length; i++) {
      var pluginConf = self.config.plugins[i](self) || {};
      for (var key in pluginConf) {
        if (HOOKS.indexOf(key) > -1) {
          self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
        } else if (typeof userConfig[key] === "undefined")
          self.config[key] = pluginConf[key];
      }
    }
    if (!userConfig.altInputClass) {
      self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
    }
    triggerEvent("onParseConfig");
  }
  function getInputElem() {
    return self.config.wrap ? element.querySelector("[data-input]") : element;
  }
  function setupLocale() {
    if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined")
      self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
    self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : void 0);
    tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
    tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
    tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
    tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
    tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
    var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
    if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
      self.config.time_24hr = self.l10n.time_24hr;
    }
    self.formatDate = createDateFormatter(self);
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  }
  function positionCalendar(customPositionElement) {
    if (typeof self.config.position === "function") {
      return void self.config.position(self, customPositionElement);
    }
    if (self.calendarContainer === void 0)
      return;
    triggerEvent("onPreCalendarPosition");
    var positionElement = customPositionElement || self._positionElement;
    var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function(acc, child) {
      return acc + child.offsetHeight;
    }, 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
    var top2 = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
    toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
    toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
    if (self.config.inline)
      return;
    var left2 = window.pageXOffset + inputBounds.left;
    var isCenter = false;
    var isRight = false;
    if (configPosHorizontal === "center") {
      left2 -= (calendarWidth - inputBounds.width) / 2;
      isCenter = true;
    } else if (configPosHorizontal === "right") {
      left2 -= calendarWidth - inputBounds.width;
      isRight = true;
    }
    toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
    toggleClass(self.calendarContainer, "arrowCenter", isCenter);
    toggleClass(self.calendarContainer, "arrowRight", isRight);
    var right2 = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
    var rightMost = left2 + calendarWidth > window.document.body.offsetWidth;
    var centerMost = right2 + calendarWidth > window.document.body.offsetWidth;
    toggleClass(self.calendarContainer, "rightMost", rightMost);
    if (self.config.static)
      return;
    self.calendarContainer.style.top = top2 + "px";
    if (!rightMost) {
      self.calendarContainer.style.left = left2 + "px";
      self.calendarContainer.style.right = "auto";
    } else if (!centerMost) {
      self.calendarContainer.style.left = "auto";
      self.calendarContainer.style.right = right2 + "px";
    } else {
      var doc = getDocumentStyleSheet();
      if (doc === void 0)
        return;
      var bodyWidth = window.document.body.offsetWidth;
      var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
      var centerBefore = ".flatpickr-calendar.centerMost:before";
      var centerAfter = ".flatpickr-calendar.centerMost:after";
      var centerIndex = doc.cssRules.length;
      var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
      toggleClass(self.calendarContainer, "rightMost", false);
      toggleClass(self.calendarContainer, "centerMost", true);
      doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
      self.calendarContainer.style.left = centerLeft + "px";
      self.calendarContainer.style.right = "auto";
    }
  }
  function getDocumentStyleSheet() {
    var editableSheet = null;
    for (var i = 0; i < document.styleSheets.length; i++) {
      var sheet = document.styleSheets[i];
      if (!sheet.cssRules)
        continue;
      try {
        sheet.cssRules;
      } catch (err) {
        continue;
      }
      editableSheet = sheet;
      break;
    }
    return editableSheet != null ? editableSheet : createStyleSheet();
  }
  function createStyleSheet() {
    var style = document.createElement("style");
    document.head.appendChild(style);
    return style.sheet;
  }
  function redraw() {
    if (self.config.noCalendar || self.isMobile)
      return;
    buildMonthSwitch();
    updateNavigationCurrentMonth();
    buildDays();
  }
  function focusAndClose() {
    self._input.focus();
    if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
      setTimeout(self.close, 0);
    } else {
      self.close();
    }
  }
  function selectDate(e) {
    e.preventDefault();
    e.stopPropagation();
    var isSelectable = function(day) {
      return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
    };
    var t = findParent(getEventTarget(e), isSelectable);
    if (t === void 0)
      return;
    var target = t;
    var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
    var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
    self.selectedDateElem = target;
    if (self.config.mode === "single")
      self.selectedDates = [selectedDate];
    else if (self.config.mode === "multiple") {
      var selectedIndex = isDateSelected(selectedDate);
      if (selectedIndex)
        self.selectedDates.splice(parseInt(selectedIndex), 1);
      else
        self.selectedDates.push(selectedDate);
    } else if (self.config.mode === "range") {
      if (self.selectedDates.length === 2) {
        self.clear(false, false);
      }
      self.latestSelectedDateObj = selectedDate;
      self.selectedDates.push(selectedDate);
      if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
        self.selectedDates.sort(function(a, b) {
          return a.getTime() - b.getTime();
        });
    }
    setHoursFromInputs();
    if (shouldChangeMonth) {
      var isNewYear = self.currentYear !== selectedDate.getFullYear();
      self.currentYear = selectedDate.getFullYear();
      self.currentMonth = selectedDate.getMonth();
      if (isNewYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      triggerEvent("onMonthChange");
    }
    updateNavigationCurrentMonth();
    buildDays();
    updateValue();
    if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1)
      focusOnDayElem(target);
    else if (self.selectedDateElem !== void 0 && self.hourElement === void 0) {
      self.selectedDateElem && self.selectedDateElem.focus();
    }
    if (self.hourElement !== void 0)
      self.hourElement !== void 0 && self.hourElement.focus();
    if (self.config.closeOnSelect) {
      var single = self.config.mode === "single" && !self.config.enableTime;
      var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
      if (single || range) {
        focusAndClose();
      }
    }
    triggerChange();
  }
  var CALLBACKS = {
    locale: [setupLocale, updateWeekdays],
    showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
    minDate: [jumpToDate],
    maxDate: [jumpToDate],
    positionElement: [updatePositionElement],
    clickOpens: [
      function() {
        if (self.config.clickOpens === true) {
          bind(self._input, "focus", self.open);
          bind(self._input, "click", self.open);
        } else {
          self._input.removeEventListener("focus", self.open);
          self._input.removeEventListener("click", self.open);
        }
      }
    ]
  };
  function set(option, value) {
    if (option !== null && typeof option === "object") {
      Object.assign(self.config, option);
      for (var key in option) {
        if (CALLBACKS[key] !== void 0)
          CALLBACKS[key].forEach(function(x) {
            return x();
          });
      }
    } else {
      self.config[option] = value;
      if (CALLBACKS[option] !== void 0)
        CALLBACKS[option].forEach(function(x) {
          return x();
        });
      else if (HOOKS.indexOf(option) > -1)
        self.config[option] = arrayify(value);
    }
    self.redraw();
    updateValue(true);
  }
  function setSelectedDate(inputDate, format2) {
    var dates = [];
    if (inputDate instanceof Array)
      dates = inputDate.map(function(d) {
        return self.parseDate(d, format2);
      });
    else if (inputDate instanceof Date || typeof inputDate === "number")
      dates = [self.parseDate(inputDate, format2)];
    else if (typeof inputDate === "string") {
      switch (self.config.mode) {
        case "single":
        case "time":
          dates = [self.parseDate(inputDate, format2)];
          break;
        case "multiple":
          dates = inputDate.split(self.config.conjunction).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        case "range":
          dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        default:
          break;
      }
    } else
      self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
    self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d) {
      return d instanceof Date && isEnabled(d, false);
    });
    if (self.config.mode === "range")
      self.selectedDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
  }
  function setDate(date, triggerChange2, format2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = false;
    }
    if (format2 === void 0) {
      format2 = self.config.dateFormat;
    }
    if (date !== 0 && !date || date instanceof Array && date.length === 0)
      return self.clear(triggerChange2);
    setSelectedDate(date, format2);
    self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
    self.redraw();
    jumpToDate(void 0, triggerChange2);
    setHoursFromDate();
    if (self.selectedDates.length === 0) {
      self.clear(false);
    }
    updateValue(triggerChange2);
    if (triggerChange2)
      triggerEvent("onChange");
  }
  function parseDateRules(arr) {
    return arr.slice().map(function(rule) {
      if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
        return self.parseDate(rule, void 0, true);
      } else if (rule && typeof rule === "object" && rule.from && rule.to)
        return {
          from: self.parseDate(rule.from, void 0),
          to: self.parseDate(rule.to, void 0)
        };
      return rule;
    }).filter(function(x) {
      return x;
    });
  }
  function setupDates() {
    self.selectedDates = [];
    self.now = self.parseDate(self.config.now) || new Date();
    var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
    if (preloadedDate)
      setSelectedDate(preloadedDate, self.config.dateFormat);
    self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
    self.currentYear = self._initialDate.getFullYear();
    self.currentMonth = self._initialDate.getMonth();
    if (self.selectedDates.length > 0)
      self.latestSelectedDateObj = self.selectedDates[0];
    if (self.config.minTime !== void 0)
      self.config.minTime = self.parseDate(self.config.minTime, "H:i");
    if (self.config.maxTime !== void 0)
      self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
    self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
    self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
  }
  function setupInputs() {
    self.input = getInputElem();
    if (!self.input) {
      self.config.errorHandler(new Error("Invalid input element specified"));
      return;
    }
    self.input._type = self.input.type;
    self.input.type = "text";
    self.input.classList.add("flatpickr-input");
    self._input = self.input;
    if (self.config.altInput) {
      self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
      self._input = self.altInput;
      self.altInput.placeholder = self.input.placeholder;
      self.altInput.disabled = self.input.disabled;
      self.altInput.required = self.input.required;
      self.altInput.tabIndex = self.input.tabIndex;
      self.altInput.type = "text";
      self.input.setAttribute("type", "hidden");
      if (!self.config.static && self.input.parentNode)
        self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
    }
    if (!self.config.allowInput)
      self._input.setAttribute("readonly", "readonly");
    updatePositionElement();
  }
  function updatePositionElement() {
    self._positionElement = self.config.positionElement || self._input;
  }
  function setupMobile() {
    var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
    self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
    self.mobileInput.tabIndex = 1;
    self.mobileInput.type = inputType;
    self.mobileInput.disabled = self.input.disabled;
    self.mobileInput.required = self.input.required;
    self.mobileInput.placeholder = self.input.placeholder;
    self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
    if (self.selectedDates.length > 0) {
      self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
    }
    if (self.config.minDate)
      self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
    if (self.config.maxDate)
      self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
    if (self.input.getAttribute("step"))
      self.mobileInput.step = String(self.input.getAttribute("step"));
    self.input.type = "hidden";
    if (self.altInput !== void 0)
      self.altInput.type = "hidden";
    try {
      if (self.input.parentNode)
        self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
    } catch (_a) {
    }
    bind(self.mobileInput, "change", function(e) {
      self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
      triggerEvent("onChange");
      triggerEvent("onClose");
    });
  }
  function toggle(e) {
    if (self.isOpen === true)
      return self.close();
    self.open(e);
  }
  function triggerEvent(event, data) {
    if (self.config === void 0)
      return;
    var hooks = self.config[event];
    if (hooks !== void 0 && hooks.length > 0) {
      for (var i = 0; hooks[i] && i < hooks.length; i++)
        hooks[i](self.selectedDates, self.input.value, self, data);
    }
    if (event === "onChange") {
      self.input.dispatchEvent(createEvent("change"));
      self.input.dispatchEvent(createEvent("input"));
    }
  }
  function createEvent(name) {
    var e = document.createEvent("Event");
    e.initEvent(name, true, true);
    return e;
  }
  function isDateSelected(date) {
    for (var i = 0; i < self.selectedDates.length; i++) {
      var selectedDate = self.selectedDates[i];
      if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
        return "" + i;
    }
    return false;
  }
  function isDateInRange(date) {
    if (self.config.mode !== "range" || self.selectedDates.length < 2)
      return false;
    return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
  }
  function updateNavigationCurrentMonth() {
    if (self.config.noCalendar || self.isMobile || !self.monthNav)
      return;
    self.yearElements.forEach(function(yearElement, i) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
      } else {
        self.monthsDropdownContainer.value = d.getMonth().toString();
      }
      yearElement.value = d.getFullYear().toString();
    });
    self._hidePrevMonthArrow = self.config.minDate !== void 0 && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
    self._hideNextMonthArrow = self.config.maxDate !== void 0 && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
  }
  function getDateStr(specificFormat) {
    var format2 = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
    return self.selectedDates.map(function(dObj) {
      return self.formatDate(dObj, format2);
    }).filter(function(d, i, arr) {
      return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
    }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
  }
  function updateValue(triggerChange2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = true;
    }
    if (self.mobileInput !== void 0 && self.mobileFormatStr) {
      self.mobileInput.value = self.latestSelectedDateObj !== void 0 ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
    }
    self.input.value = getDateStr(self.config.dateFormat);
    if (self.altInput !== void 0) {
      self.altInput.value = getDateStr(self.config.altFormat);
    }
    if (triggerChange2 !== false)
      triggerEvent("onValueUpdate");
  }
  function onMonthNavClick(e) {
    var eventTarget = getEventTarget(e);
    var isPrevMonth = self.prevMonthNav.contains(eventTarget);
    var isNextMonth = self.nextMonthNav.contains(eventTarget);
    if (isPrevMonth || isNextMonth) {
      changeMonth(isPrevMonth ? -1 : 1);
    } else if (self.yearElements.indexOf(eventTarget) >= 0) {
      eventTarget.select();
    } else if (eventTarget.classList.contains("arrowUp")) {
      self.changeYear(self.currentYear + 1);
    } else if (eventTarget.classList.contains("arrowDown")) {
      self.changeYear(self.currentYear - 1);
    }
  }
  function timeWrapper(e) {
    e.preventDefault();
    var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
    }
    var min2 = parseFloat(input.getAttribute("min")), max2 = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
    var newValue = curValue + step * delta;
    if (typeof input.value !== "undefined" && input.value.length === 2) {
      var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
      if (newValue < min2) {
        newValue = max2 + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
        if (isMinuteElem)
          incrementNumInput(void 0, -1, self.hourElement);
      } else if (newValue > max2) {
        newValue = input === self.hourElement ? newValue - max2 - int(!self.amPM) : min2;
        if (isMinuteElem)
          incrementNumInput(void 0, 1, self.hourElement);
      }
      if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }
      input.value = pad(newValue);
    }
  }
  init();
  return self;
}
function _flatpickr(nodeList, config) {
  var nodes = Array.prototype.slice.call(nodeList).filter(function(x) {
    return x instanceof HTMLElement;
  });
  var instances = [];
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    try {
      if (node.getAttribute("data-fp-omit") !== null)
        continue;
      if (node._flatpickr !== void 0) {
        node._flatpickr.destroy();
        node._flatpickr = void 0;
      }
      node._flatpickr = FlatpickrInstance(node, config || {});
      instances.push(node._flatpickr);
    } catch (e) {
      console.error(e);
    }
  }
  return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
  HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
  HTMLElement.prototype.flatpickr = function(config) {
    return _flatpickr([this], config);
  };
}
var flatpickr = function(selector, config) {
  if (typeof selector === "string") {
    return _flatpickr(window.document.querySelectorAll(selector), config);
  } else if (selector instanceof Node) {
    return _flatpickr([selector], config);
  } else {
    return _flatpickr(selector, config);
  }
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
  en: __assign({}, default_default),
  default: __assign({}, default_default)
};
flatpickr.localize = function(l10n) {
  flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function(config) {
  flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = createDateParser({});
flatpickr.formatDate = createDateFormatter({});
flatpickr.compareDates = compareDates;
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
  jQuery.fn.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
}
Date.prototype.fp_incr = function(days) {
  return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") {
  window.flatpickr = flatpickr;
}
var esm_default = flatpickr;

// src/optionModals/fields/DateModal.ts
var DateModal = class extends import_obsidian17.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, top2 = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value.replace(/^\[\[/g, "").replace(/\]\]$/g, "");
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.top = top2;
    this.insertAsLink = FieldManager2.stringToBoolean(this.field.options.defaultInsertAsLink) || false;
    this.format = this.field.options.dateFormat || this.field.options.defaultDateFormat;
    if (this.app.plugins.enabledPlugins.has("metadata-menu")) {
      this.plugin = this.app.plugins.plugins["metadata-menu"];
    }
  }
  onOpen() {
    const fieldContainer = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildForm(fieldContainer);
  }
  buildForm(parentContainer) {
    const form = parentContainer.createEl("form");
    form.type = "submit";
    this.buildInputEl(form);
    this.errorField = form.createEl("div", { cls: "metadata-menu-modal-value-error-field" });
    this.errorField.hide();
    this.buildInsertAsLinkToggler(form);
    const saveBtnContainer = form.createEl("div", { cls: "metadata-menu-value-grid-footer" });
    const saveBtn = new import_obsidian17.ButtonComponent(saveBtnContainer);
    saveBtn.setIcon("checkmark");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let newValue;
      if (app.plugins.enabledPlugins.has("nldates-obsidian")) {
        try {
          const nldates = app.plugins.plugins["nldates-obsidian"];
          newValue = nldates.parseDate(this.value).moment;
        } catch (error) {
          newValue = (0, import_obsidian18.moment)(this.value, this.format);
        }
      } else {
        newValue = (0, import_obsidian18.moment)(this.value, this.format);
      }
      if (newValue.isValid()) {
        const linkPath = app.metadataCache.getFirstLinkpathDest(this.field.options.linkPath + newValue.format(this.format), this.file.path);
        const formattedValue = this.insertAsLink ? `[[${this.field.options.linkPath || ""}${newValue.format(this.format)}${linkPath ? "|" + linkPath.basename : ""}]]` : newValue.format(this.format);
        if (this.lineNumber == -1) {
          replaceValues(this.app, this.file, this.field.name, formattedValue);
        } else {
          insertValues(this.app, this.file, this.field.name, formattedValue, this.lineNumber, this.inFrontmatter, this.top);
        }
        ;
        this.close();
      } else {
        this.errorField.show();
        this.errorField.setText(`value must be a valid date`);
        this.inputEl.inputEl.addClass("is-invalid");
        return;
      }
    });
  }
  buildInsertAsLinkToggler(form) {
    const togglerContainer = form.createDiv({ cls: "metadata-menu-toggler-with-label" });
    const togglerContainerLabel = togglerContainer.createDiv({
      cls: "metadata-menu-toggler-label"
    });
    togglerContainerLabel.setText("Insert as link");
    const toggleEl = new import_obsidian17.ToggleComponent(togglerContainer);
    toggleEl.setValue(FieldManager2.stringToBoolean(this.field.options.defaultInsertAsLink || "false"));
    toggleEl.onChange((value) => {
      this.insertAsLink = value;
    });
  }
  buildInputEl(form) {
    var _a;
    const inputContainer = form.createDiv({ cls: "metadata-menu-dateinput-with-picker" });
    this.inputEl = new import_obsidian17.TextComponent(inputContainer);
    this.inputEl.inputEl.focus();
    this.inputEl.setValue(((_a = this.value.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last()) || "");
    this.inputEl.inputEl.addClass("metadata-menu-prompt-input");
    this.inputEl.onChange((value) => {
      this.inputEl.inputEl.removeClass("is-invalid");
      this.errorField.hide();
      this.errorField.setText("");
      this.value = value;
    });
    const calendarDisplayBtn = inputContainer.createEl("div", { cls: "metadata-menu-calendar-display-btn" });
    calendarDisplayBtn.setText("\u{1F4C6}");
    const datePickerContainer = form.createDiv({ cls: "metadata-menu-picker-container" });
    const datePicker = esm_default(datePickerContainer, {
      locale: {
        firstDayOfWeek: this.plugin.settings.firstDayOfWeek
      }
    });
    datePicker.config.onChange.push((value) => {
      const newDate = (0, import_obsidian18.moment)(value.toString()).format(this.format);
      this.inputEl.setValue(newDate);
      this.value = newDate;
    });
    calendarDisplayBtn.onclick = (e) => {
      datePicker.setDate(datePicker.parseDate(this.inputEl.getValue()) || new Date());
      datePicker.open();
    };
  }
};

// src/fields/fieldManagers/DateField.ts
var DateField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Date" /* Date */);
    this.defaultDateFormat = "YYYY-MM-DD";
  }
  addMenuOption(name, value, app2, file, category) {
    const modal = new DateModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change date for <${name}>`);
    if (DateField.isMenu(category)) {
      category.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon("calendar-glyph");
        item.onClick(() => modal.open());
        item.setSection("target-metadata");
      });
    } else if (DateField.isSelect(category)) {
      category.addOption(`update_${name}`, `Update <${name}>`);
      category.modals[`update_${name}`] = () => modal.open();
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, lineNumber, inFrontmatter, top2) {
    const fieldModal = new DateModal(app2, file, this.field, "", lineNumber, inFrontmatter, top2);
    fieldModal.titleEl.setText(`Enter date for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDateContainer(parentContainer) {
    if (!this.field.options.dateFormat)
      this.field.options.dateFormat = this.defaultDateFormat;
    if (!this.field.options.defaultInsertAsLink)
      this.field.options.defaultInsertAsLink = "false";
    const dateFormatContainer = parentContainer.createDiv();
    dateFormatContainer.createEl("span", { text: "Date format", cls: "metadata-menu-field-option" });
    const dateFormatInput = new import_obsidian19.TextComponent(dateFormatContainer);
    dateFormatInput.setValue(this.field.options.dateFormat);
    const dateExample = dateFormatContainer.createEl("span", { text: "", cls: "metadata-menu-field-option" });
    dateExample.setText(`example: ${(0, import_obsidian20.moment)().format(dateFormatInput.getValue())}`);
    dateFormatInput.onChange((value) => {
      this.field.options.dateFormat = value;
      dateExample.setText(`example: ${(0, import_obsidian20.moment)().format(value)}`);
    });
    const dateLinkPathContainer = parentContainer.createDiv();
    dateLinkPathContainer.createEl("span", { text: "Link path (optional)", cls: "metadata-menu-field-option" });
    const dateLinkPathInput = new import_obsidian19.TextComponent(dateLinkPathContainer);
    dateLinkPathInput.setValue(this.field.options.linkPath);
    dateLinkPathInput.onChange((value) => {
      this.field.options.linkPath = value.endsWith("/") ? value : value + "/";
    });
    const defaultInsertAsLinkContainer = parentContainer.createDiv();
    defaultInsertAsLinkContainer.createEl("span", { text: "Insert as link by default", cls: "metadata-menu-field-option" });
    const defaultInsertAsLink = new import_obsidian19.ToggleComponent(defaultInsertAsLinkContainer);
    defaultInsertAsLink.setValue(DateField.stringToBoolean(this.field.options.defaultInsertAsLink));
    defaultInsertAsLink.onChange((value) => {
      this.field.options.defaultInsertAsLink = value.toString();
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.dateValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createDateContainer(this.dateValidatorField);
    this.dateValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const dateBtn = document.createElement("button");
      dateBtn.setText("\u{1F4C6}");
      dateBtn.addClass("metadata-menu-dv-field-button");
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const file = app.vault.getAbstractFileByPath(p["file"]["path"]);
      let fieldModal;
      if (file instanceof import_obsidian19.TFile && file.extension == "md") {
        if (p[this.field.name] && p[this.field.name].hasOwnProperty("path")) {
          const dateFile = app.vault.getAbstractFileByPath(p[this.field.name]);
          if (dateFile instanceof import_obsidian19.TFile && dateFile.extension == "md") {
            fieldModal = new DateModal(app, file, this.field, dateFile.name);
          } else {
            fieldModal = new DateModal(app, file, this.field, p[this.field.name].path.split("/").last().replace(".md", ""));
          }
        } else if (p[this.field.name]) {
          fieldModal = new DateModal(app, file, this.field, p[this.field.name]);
        } else {
          fieldModal = new DateModal(app, file, this.field, "");
        }
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
      fieldModal.onClose = () => {
        fieldModal.contentEl.innerHTML = "";
      };
      dateBtn.onclick = () => {
        fieldModal.open();
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        dateBtn.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          dateBtn.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          dateBtn.hide();
          spacer.show();
        };
      }
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(dateBtn);
      fieldContainer.appendChild(spacer);
    });
  }
  getOptionsStr() {
    return this.field.options.dateFormat;
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      var _a;
      return (0, import_obsidian20.moment)((_a = value.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last(), this.field.options.dateFormat).isValid();
    });
  }
};

// src/fields/fieldManagers/Managers.ts
var Managers = {
  Input: InputField,
  Boolean: BooleanField,
  Number: NumberField,
  Select: SelectField,
  Cycle: CycleField,
  Multi: MultiField,
  File: FileField,
  Date: DateField
};
var Managers_default = Managers;

// src/types/fieldTypes.ts
var FieldTypeLabelMapping = {
  "Input": "Input" /* Input */,
  "Select": "Select" /* Select */,
  "Multi": "Multi" /* Multi */,
  "Cycle": "Cycle" /* Cycle */,
  "Boolean": "Boolean" /* Boolean */,
  "Number": "Number" /* Number */,
  "File": "File" /* File */,
  "Date": "Date" /* Date */
};
var FieldTypeTagClass = {
  "Input": "single",
  "Select": "select",
  "Multi": "multi",
  "Cycle": "cycle",
  "Boolean": "boolean",
  "Number": "number",
  "File": "file",
  "Date": "date"
};
var FieldTypeTooltip = {
  "Input": "Accept any value",
  "Select": "Accept a single value from a list",
  "Multi": "Accept multiple values from a list",
  "Cycle": "Cycle through values from a list",
  "Boolean": "Accept true of false",
  "Number": "Accept a number",
  "File": "Accept a link to a file in your vault",
  "Date": "Accept a date"
};
var FieldManager = {
  "Input": Managers_default.Input,
  "Select": Managers_default.Select,
  "Multi": Managers_default.Multi,
  "Cycle": Managers_default.Cycle,
  "Boolean": Managers_default.Boolean,
  "Number": Managers_default.Number,
  "File": Managers_default.File,
  "Date": Managers_default.Date
};

// src/fields/Field.ts
var Field = class {
  constructor(name = "", options = {}, id = "", valuesListNotePath = "", type = "Input" /* Input */) {
    this.name = name;
    this.options = options;
    this.id = id;
    this.valuesListNotePath = valuesListNotePath;
    this.type = type;
    this.insertNewValue.bind(this);
  }
  insertNewValue(value) {
    return __async(this, null, function* () {
      let newKey = 1;
      Object.keys(this.options).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKey) {
          newKey = parseInt(key) + 1;
        }
        ;
      });
      this.options[newKey.toString()] = value;
      return newKey.toString();
    });
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.valuesListNotePath = source.valuesListNotePath;
    target.type = source.type;
    Object.keys(source.options).forEach((k) => {
      target.options[k] = source.options[k];
    });
    Object.keys(target.options).forEach((k) => {
      if (!Object.keys(source.options).includes(k)) {
        delete target.options[k];
      }
      ;
    });
  }
  static createDefault(name) {
    const field = new Field();
    field.type = "Input" /* Input */;
    field.name = name;
    return field;
  }
};
var Field_default = Field;

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian21.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, field) {
    super(app2);
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialField = new Field_default();
    this.parentSettingContainer = parentSettingContainer;
    if (field) {
      this.new = false;
      this.field = field;
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.field = new Field_default();
      this.field.id = newId.toString();
      this.initialField.id = newId.toString();
    }
    ;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.field.name == "") {
        this.titleEl.setText(`Add a field and define options`);
      } else {
        this.titleEl.setText(`Manage settings options for ${this.field.name}`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.field, this.initialField);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.field, this.app, this.plugin);
    }
    ;
  }
  createnameInputContainer(parentNode) {
    const fieldNameContainerLabel = parentNode.createDiv();
    fieldNameContainerLabel.setText(`Field Name:`);
    const input = new import_obsidian21.TextComponent(parentNode);
    const name = this.field.name;
    input.setValue(name);
    input.setPlaceholder("Name of the field");
    input.onChange((value) => {
      this.field.name = value;
      this.titleEl.setText(`Manage predefined options for ${this.field.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    return input;
  }
  createTypeSelectorContainer(parentNode) {
    const typeSelectorContainerLabel = parentNode.createDiv();
    typeSelectorContainerLabel.setText(`Field type:`);
    const select = new import_obsidian21.DropdownComponent(parentNode);
    Object.keys(FieldTypeLabelMapping).forEach((f) => select.addOption(f, FieldTypeTooltip[f]));
    if (this.field.type) {
      select.setValue(this.field.type);
    }
    select.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.namePromptComponent.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({ cls: "metadata-menu-prompt-div" });
      const mainDiv = div.createDiv({ cls: "metadata-menu-prompt-form" });
      const nameContainer = mainDiv.createDiv();
      this.namePromptComponent = this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const typeSelectContainer = mainDiv.createDiv();
      this.fieldOptionsContainer = mainDiv.createDiv();
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian21.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
      this.createTypeSelectorContainer(typeSelectContainer);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.namePromptComponent, this.namePromptComponent.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveButton(b) {
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      let error = !this.validateFields();
      if (error) {
        new import_obsidian21.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.saved = true;
      const currentExistingField = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
      if (currentExistingField) {
        Field_default.copyProperty(currentExistingField, this.field);
      } else {
        this.plugin.initialProperties.push(this.field);
      }
      ;
      Field_default.copyProperty(this.initialField, this.field);
      if (this.parentSetting)
        Field_default.copyProperty(this.parentSetting.field, this.field);
      (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
      this.plugin.saveSettings();
      this.close();
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialField.name != "") {
        Object.assign(this.field, this.initialField);
      }
      ;
      this.close();
    });
    return b;
  }
  static setValidationError(textInput, insertAfter, message) {
    var _a;
    textInput.inputEl.addClass("is-invalid");
    if (message && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
      if (!mDiv) {
        mDiv = createDiv({ cls: "invalid-feedback" });
      }
      mDiv.innerText = message;
      mDiv.insertAfter(insertAfter);
    }
  }
  static removeValidationError(textInput) {
    var _a;
    if (textInput.inputEl.hasClass("is-invalid") && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      textInput.inputEl.removeClass("is-invalid");
      textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
    }
    ;
  }
};

// src/suggester/FolderSuggester.ts
var import_obsidian22 = require("obsidian");
var FolderSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian22.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings/MetadataMenuSettingTab.ts
var SettingsMigrationConfirmModal = class extends import_obsidian23.Modal {
  constructor(plugin, tab) {
    super(plugin.app);
    this.plugin = plugin;
    this.tab = tab;
  }
  onOpen() {
    this.titleEl.setText("Confirm");
    const body = this.contentEl.createDiv({
      cls: "modal-text-danger"
    });
    body.setText("This will erase current settings. Are you sure?");
    const confirmButton = new import_obsidian23.ButtonComponent(this.contentEl);
    confirmButton.setIcon("check");
    confirmButton.onClick(() => {
      if (this.app.plugins.plugins.hasOwnProperty("supercharged-links-obsidian")) {
        let settings = this.app.plugins.plugins["supercharged-links-obsidian"].settings;
        this.plugin.initialProperties = [];
        settings.presetFields.forEach((prop) => {
          const field = new Field_default();
          Object.assign(field, prop);
          this.plugin.initialProperties.push(field);
        });
        this.plugin.saveSettings();
        this.close();
      }
      ;
    });
  }
  onClose() {
    this.tab.display();
  }
};
var MetadataMenuSettingTab = class extends import_obsidian23.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const globalSettings = containerEl.createEl("div");
    globalSettings.createEl("h4", { text: "Global settings", cls: "metadata-menu-setting-section-header" });
    globalSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Global settings to apply to your whole vault"
    });
    new import_obsidian23.Setting(globalSettings).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian23.Setting(globalSettings).setName("Globally ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, "").split(",");
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    new import_obsidian23.Setting(globalSettings).setName("First day of week").setDesc("For date fields, which day the date picker's week should start with").addDropdown((cb) => {
      for (let i = 0; i < 2; i++) {
        cb.addOption(i.toString(), (0, import_obsidian23.moment)().day(i).format("dddd"));
      }
      cb.setValue(this.plugin.settings.firstDayOfWeek.toString() || "1");
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.firstDayOfWeek = parseInt(value);
        yield this.plugin.saveSettings();
      }));
    });
    const presetFieldsSettings = containerEl.createEl("div");
    presetFieldsSettings.createEl("h4", { text: "Preset Fields settings", cls: "metadata-menu-setting-section-header" });
    presetFieldsSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage globally predefined type and options for a field throughout your whole vault"
    });
    new import_obsidian23.Setting(presetFieldsSettings).setName("Add New Field Setting").setDesc("Add a new Frontmatter property for which you want preset options.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.app, this.plugin, presetFieldsSettings);
        modal.open();
      }));
    });
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(presetFieldsSettings, property, this.app, this.plugin);
    });
    const classFilesSettings = containerEl.createEl("div");
    classFilesSettings.createEl("h4", { text: "FileClass settings", cls: "metadata-menu-setting-section-header" });
    classFilesSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage fileClass folder and alias. When a note has a fielClass defined, fileClass field properties will override global preset fields settings for the same field name"
    });
    new import_obsidian23.Setting(classFilesSettings).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addSearch((cfs) => {
      new FolderSuggest(this.app, cfs.inputEl);
      cfs.setPlaceholder("Folder").setValue(this.plugin.settings.classFilesPath).onChange((new_folder) => {
        const newPath = new_folder.endsWith("/") ? new_folder : new_folder + "/";
        this.plugin.settings.classFilesPath = newPath;
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    new import_obsidian23.Setting(classFilesSettings).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian23.Setting(classFilesSettings).setName("global fileClass").setDesc("Choose one fileClass to be applicable to all files (even it is not present as a fileClass attribute in their frontmatter). This will override the preset Fields defined above").addSearch((cfs) => {
      new FileSuggest(this.app, cfs.inputEl, this.plugin, this.plugin.settings.classFilesPath);
      cfs.setPlaceholder("Global fileClass");
      cfs.setValue(this.plugin.settings.globalFileClass ? this.plugin.settings.classFilesPath + this.plugin.settings.globalFileClass + ".md" : "").onChange((newPath) => {
        var _a;
        this.plugin.settings.globalFileClass = newPath ? (_a = newPath.split("\\").pop().split("/").pop()) == null ? void 0 : _a.replace(".md", "") : "";
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    const migrateSettings = containerEl.createEl("div");
    migrateSettings.createEl("h4", { text: "Migrate" });
    new import_obsidian23.Setting(migrateSettings).setName("Copy settings from supercharged links plugin").setDesc("Copy settings from supercharged links plugin").addButton((button) => {
      return button.setTooltip("Get settings from supercharged links").setButtonText("Copy").onClick(() => __async(this, null, function* () {
        let modal = new SettingsMigrationConfirmModal(this.plugin, this);
        modal.open();
      }));
    });
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: "",
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass",
  settingsVersion: void 0,
  globalFileClass: void 0,
  firstDayOfWeek: 1
};

// src/commands/getValues.ts
var import_obsidian24 = require("obsidian");
function getValues(app2, fileOrfilePath, attribute) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian24.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian24.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const result = [];
    content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = encodeLink(line).match(fullLineRegex2);
        if (fR == null ? void 0 : fR.groups) {
          result.push(decodeLink(fR.groups.values));
        }
        ;
        const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
        const sRB = encodeLink(line).matchAll(inSentenceRegexBrackets2);
        let next = sRB.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRB.next();
        }
        const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
        const sRP = encodeLink(line).matchAll(inSentenceRegexPar2);
        next = sRP.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRP.next();
        }
      }
    });
    return result;
  });
}

// src/commands/getField.ts
function getField(plugin, propertyName, fileClass) {
  const matchingSettings = plugin.settings.presetFields.filter((p) => p.name == propertyName);
  if (fileClass) {
    const fileClassAttributesWithName = fileClass.attributes.filter((attr) => attr.name == propertyName);
    if (fileClassAttributesWithName.length > 0) {
      const fileClassAttribute = fileClassAttributesWithName[0];
      if (fileClassAttribute.type) {
        return fileClassAttribute.getField();
      } else if (matchingSettings.length > 0) {
        return matchingSettings[0];
      }
      ;
    }
  } else if (matchingSettings.length > 0) {
    return matchingSettings[0];
  }
  ;
}

// src/utils/textUtils.ts
var capitalize = (s) => {
  return s && s[0].toUpperCase() + s.slice(1);
};

// src/fileClass/fileClassAttribute.ts
var FileClassAttribute = class {
  constructor(raw, origin) {
    var _a, _b;
    this.origin = origin;
    const completeRegex = new RegExp(`^${genericFieldRegex}::(?<fieldSettings>.+)?`, "u");
    const nameRegex = new RegExp(`^${genericFieldRegex}$`, "u");
    let fieldName;
    let { attribute, fieldSettings } = ((_a = raw.match(completeRegex)) == null ? void 0 : _a.groups) || {};
    if (attribute) {
      fieldName = attribute;
    } else {
      let { attribute: attribute2 } = ((_b = raw.match(nameRegex)) == null ? void 0 : _b.groups) || {};
      fieldName = attribute2;
    }
    if (fieldName) {
      this.name = fieldName.trim();
      if (fieldSettings) {
        const settings = JSON.parse(`${fieldSettings.trim()}`);
        this.type = FieldTypeLabelMapping[capitalize(settings["type"])];
        this.options = settings["options"];
      } else {
        this.type = "Input" /* Input */;
      }
    } else {
      const error = new Error("Improper value");
      throw error;
    }
  }
  getField() {
    var _a;
    let options = {};
    if (Array.isArray(this.options)) {
      (_a = this.options) == null ? void 0 : _a.forEach((option, index) => {
        options[index] = option;
      });
    } else {
      options = this.options;
    }
    return new Field_default(this.name, options, this.name, void 0, this.type);
  }
};

// src/fileClass/fileClass.ts
var import_obsidian25 = require("obsidian");
var FileClassManager = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.basename == name);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassManager(this);
    this.attributes = [];
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian25.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error(`no file named <${this.name}.md> in <${filesClassPath}> folder to match <${this.plugin.settings.fileClassAlias}: ${this.name}> in one of these notes`);
      throw error;
    }
  }
  getParentClass() {
    return;
  }
  getAttributes(excludeParents = false) {
    return __async(this, null, function* () {
      var _a, _b, _c, _d;
      try {
        const file = this.getClassFile();
        let attributes = [];
        let errors = [];
        const result = yield this.plugin.app.vault.cachedRead(file);
        const parent = (_b = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.extends;
        const excludedFields = (_d = (_c = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.excludes;
        if (parent && !excludeParents) {
          try {
            const parentFileClass = yield createFileClass(this.plugin, parent);
            yield parentFileClass.getAttributes();
            attributes = [...parentFileClass.attributes];
          } catch (error) {
            errors.push(error);
          }
        }
        result.split("\n").forEach((line) => {
          try {
            const attribute = new FileClassAttribute(line, this.name);
            attributes.push(attribute);
          } catch (error) {
            errors.push(error);
          }
        });
        this.attributes = Array.isArray(excludedFields) ? attributes.filter((attr) => !excludedFields.includes(attr.name)) : attributes;
        this.errors = errors;
      } catch (error) {
        throw error;
      }
    });
  }
  updateAttribute(newType, newName, newOptions, attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            if (newType == "Input") {
              newContent.push(`${newName}:: {"type": "Input"}`);
            } else {
              let settings = {};
              settings["type"] = newType;
              if (newOptions)
                settings["options"] = newOptions;
              newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
            }
          } else {
            newContent.push(line);
          }
        });
        this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        if (newOptions)
          settings["options"] = newOptions;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
};
function createFileClass(plugin, name, excludeParent = false) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      const fileClass = new FileClass(plugin, name);
      fileClass.getAttributes(excludeParent).then(() => {
        resolve(fileClass);
      }).catch((error) => {
        reject(error);
      });
    });
  });
}

// src/optionModals/chooseSectionModal.ts
var import_obsidian28 = require("obsidian");

// src/optionModals/fieldSelectModal.ts
var import_obsidian27 = require("obsidian");

// src/optionModals/addNewFieldModal.ts
var import_obsidian26 = require("obsidian");
var addNewFieldModal = class extends import_obsidian26.Modal {
  constructor(plugin, lineNumber, file, inFrontmatter, top2) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontmatter;
    this.file = file;
    this.top = top2;
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const addNewFieldContainer = this.contentEl.createDiv();
    const nameInputContainer = addNewFieldContainer.createDiv();
    nameInputContainer.setText("Field Name: ");
    const nameInputEl = new import_obsidian26.TextComponent(nameInputContainer);
    nameInputEl.setPlaceholder("Field name");
    const valueInputContainer = addNewFieldContainer.createDiv();
    valueInputContainer.setText("Field value: ");
    const valueInputEl = new import_obsidian26.TextComponent(valueInputContainer);
    valueInputEl.setPlaceholder("Field value");
    const footerButtons = this.contentEl.createDiv({
      cls: "metadata-menu-textarea-buttons"
    });
    const saveButton = new import_obsidian26.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      insertValues(this.app, this.file, nameInputEl.getValue(), valueInputEl.getValue(), this.lineNumber, this.inFrontmatter, this.top);
      this.close();
    }));
    const cancelButton = new import_obsidian26.ExtraButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/optionModals/fieldSelectModal.ts
var fieldSelectModal = class extends import_obsidian27.Modal {
  constructor(plugin, file, lineNumber, line, inFrontmatter, top2, fileClass) {
    super(plugin.app);
    this.line = line;
    this.lineNumber = lineNumber;
    this.plugin = plugin;
    this.file = file;
    this.inFrontmatter = inFrontmatter;
    this.top = top2;
    this.fileClass = fileClass;
  }
  onOpen() {
    this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
    const container = this.contentEl.createDiv({ cls: "metadata-menu-field-select" });
    const settingsDropdownContainer = container.createDiv();
    const settingsSelector = new import_obsidian27.DropdownComponent(settingsDropdownContainer);
    settingsSelector.addOption("---", "Choose Field");
    settingsSelector.addOption("++New", "New");
    if (this.fileClass) {
      this.fileClass.attributes.forEach((attr) => {
        settingsSelector.addOption(attr.name, attr.name);
      });
    } else {
      this.plugin.settings.presetFields.forEach((setting) => {
        settingsSelector.addOption(setting.name, setting.name);
      });
    }
    ;
    settingsSelector.onChange((selectedFieldName) => {
      if (selectedFieldName == "++New") {
        const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
        newFieldModal.open();
        this.close();
      } else if (this.fileClass) {
        const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == selectedFieldName);
        let field;
        let type;
        if (fileClassAttributesWithName.length > 0) {
          const fileClassAttribute = fileClassAttributesWithName[0];
          field = fileClassAttribute.getField();
          type = fileClassAttribute.type;
        }
        if (field) {
          const fieldManager = new FieldManager[field.type](field);
          fieldManager.createAndOpenFieldModal(this.app, this.file, selectedFieldName, this.lineNumber, this.inFrontmatter, this.top);
        }
        this.close();
      } else {
        const field = this.plugin.settings.presetFields.filter((_field) => _field.name == selectedFieldName)[0];
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.createAndOpenFieldModal(this.app, this.file, selectedFieldName, this.lineNumber, this.inFrontmatter, this.top);
        this.close();
      }
      ;
    });
  }
};

// src/optionModals/chooseSectionModal.ts
var chooseSectionModal = class extends import_obsidian28.Modal {
  constructor(plugin, file, fileClass, fieldName) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
    this.fileClass = fileClass;
    this.fieldName = fieldName;
  }
  createAndOpenModal(field, lineNumber, inFrontmatter, top2) {
    if (field) {
      const fieldManager = new FieldManager[field.type](field);
      fieldManager.createAndOpenFieldModal(this.app, this.file, this.fieldName, lineNumber, inFrontmatter, top2);
    } else {
      const fieldManager = FieldManager2.createDefault(this.fieldName);
      fieldManager.createAndOpenFieldModal(this.app, this.file, this.fieldName, lineNumber, inFrontmatter, top2);
    }
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Add a ${this.fieldName ? "<" + this.fieldName + "> " : ""}field in this note after:`);
      const inputDiv = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
      const selectEl = new import_obsidian28.DropdownComponent(inputDiv);
      selectEl.selectEl.addClass("metadata-menu-select");
      selectEl.addOption("", "Select line");
      selectEl.addOption("top_0", "top");
      const result = yield this.app.vault.read(this.file);
      let foreHeadText = false;
      let frontmatterStart = false;
      let frontmatterEnd = false;
      let inFrontmatter = false;
      result.split("\n").forEach((line, lineNumber) => {
        if (line != "---" && !foreHeadText && !frontmatterStart) {
          foreHeadText = true;
        }
        ;
        if (line == "---" && !foreHeadText) {
          if (!frontmatterStart) {
            frontmatterStart = true;
            inFrontmatter = true;
          } else if (!frontmatterEnd) {
            frontmatterEnd = true;
            inFrontmatter = false;
          }
          ;
        }
        if (inFrontmatter) {
          selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        } else {
          selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        }
        ;
      });
      selectEl.onChange(() => {
        const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
        const position = valueArray && valueArray.length > 0 ? valueArray[1] : 0;
        const lineNumber = Number(valueArray && valueArray.length > 1 ? valueArray[2] : 0);
        const inFrontmatter2 = position == "frontmatter" ? true : false;
        const top2 = position == "top" ? true : false;
        if (!this.fieldName) {
          const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split("\n")[lineNumber], inFrontmatter2, top2, this.fileClass);
          this.close();
          modal.open();
        } else {
          if (this.fileClass) {
            const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == this.fieldName);
            let field;
            let type;
            if (fileClassAttributesWithName.length > 0) {
              const fileClassAttribute = fileClassAttributesWithName[0];
              field = fileClassAttribute.getField();
              type = fileClassAttribute.type;
            }
            this.createAndOpenModal(field, lineNumber, inFrontmatter2, top2);
            this.close();
          } else {
            const field = this.plugin.settings.presetFields.filter((_field) => _field.name == this.fieldName)[0];
            this.createAndOpenModal(field, lineNumber, inFrontmatter2, top2);
            this.close();
          }
          ;
        }
      });
    });
  }
};

// src/commands/fieldModifier.ts
var import_obsidian29 = require("obsidian");
function fieldModifier(plugin, dv, p, fieldName, attrs) {
  return __async(this, null, function* () {
    var _a;
    const fieldContainer = dv.el("div", "");
    fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
    if (p[fieldName] === void 0) {
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.showAddField)) {
        const emptyField = dv.el("span", null, attrs);
        fieldContainer.appendChild(emptyField);
      } else {
        const addFieldBtn = dv.el("button", attrs);
        addFieldBtn.setText("\u2295");
        addFieldBtn.addClass("metadata-menu-dv-field-button");
        addFieldBtn.addClass("isolated");
        addFieldBtn.onclick = () => __async(this, null, function* () {
          const file = app.vault.getAbstractFileByPath(p.file.path);
          if (file instanceof import_obsidian29.TFile && file.extension == "md") {
            const fileClassAlias = plugin.settings.fileClassAlias;
            if (p[fileClassAlias] || plugin.settings.globalFileClass) {
              const fileClassName = p[fileClassAlias] || plugin.settings.globalFileClass;
              const fileClass = yield createFileClass(plugin, fileClassName);
              new chooseSectionModal(plugin, file, fileClass, fieldName).open();
            } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
              const field = getField(plugin, fieldName);
              if (field == null ? void 0 : field.type) {
                new chooseSectionModal(plugin, file, void 0, field.name).open();
              } else {
                new chooseSectionModal(plugin, file, void 0, "Input" /* Input */).open();
              }
            } else {
              new chooseSectionModal(plugin, file, void 0, "Input" /* Input */).open();
            }
          } else {
            throw Error("path doesn't correspond to a proper file");
          }
        });
        fieldContainer.appendChild(addFieldBtn);
      }
    } else {
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (p[fileClassAlias] || plugin.settings.globalFileClass) {
        const fileClassName = p[fileClassAlias] || plugin.settings.globalFileClass;
        const fileClass = yield createFileClass(plugin, fileClassName);
        const field = getField(plugin, fieldName, fileClass);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
        const field = getField(plugin, fieldName);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else {
        const fieldManager = FieldManager2.createDefault(fieldName);
        yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
      }
    }
    return fieldContainer;
  });
}

// src/commands/fileFields.ts
var import_obsidian30 = require("obsidian");
var FieldInfo = class {
  constructor() {
    this.type = void 0;
    this.sourceType = void 0;
    this.fileClass = void 0;
    this.options = void 0;
    this.isValid = void 0;
    this.value = "";
    this.valuesListNotePath = void 0;
    this.unique = true;
  }
  setInfos(plugin, fieldName, value, fileClass) {
    return __async(this, null, function* () {
      this.value = value;
      this.ignoreInMenu = plugin.settings.globallyIgnoredFields.includes(fieldName);
      if (fileClass) {
        const fileClassFields = fileClass.attributes.map((attr) => attr.name);
        if (fileClassFields.includes(fieldName)) {
          const field = getField(plugin, fieldName, fileClass);
          if (field) {
            const fieldManager = new FieldManager[field.type](field);
            this.isValid = yield fieldManager.validateValue(value);
            this.sourceType = "fileClass";
            const attribute = fileClass.attributes.filter((a) => a.name === fieldName)[0];
            this.fileClass = attribute.origin;
            this.type = attribute.type;
            this.options = attribute.options;
          }
        }
      } else if (plugin.settings.presetFields.map((f) => f.name).includes(fieldName)) {
        const field = getField(plugin, fieldName);
        if (field) {
          const fieldManager = new FieldManager[field.type](field);
          this.isValid = yield fieldManager.validateValue(value);
          this.type = field.type;
          this.options = field.options;
          this.valuesListNotePath = field.valuesListNotePath;
          this.sourceType = "settings";
        }
      }
    });
  }
};
function fileFields(plugin, fileOrfilePath) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian30.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian30.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const frontmatter = (_a = plugin.app.metadataCache.getCache(file.path)) == null ? void 0 : _a.frontmatter;
    const fields = {};
    let fileClass;
    if (plugin.settings.globalFileClass) {
      try {
        fileClass = yield createFileClass(plugin, plugin.settings.globalFileClass);
      } catch (error) {
        fileClass = void 0;
      }
    }
    if (frontmatter) {
      const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (Object.keys(attributes).includes(fileClassAlias)) {
        const fileClassName = attributes[fileClassAlias];
        try {
          fileClass = yield createFileClass(plugin, fileClassName);
        } catch (error) {
          fileClass = void 0;
        }
      }
      Object.keys(attributes).forEach((key) => __async(this, null, function* () {
        const fieldInfo = new FieldInfo();
        fieldInfo.unique = !Object.keys(fields).includes(key);
        fields[key] = fieldInfo;
        yield fieldInfo.setInfos(plugin, key, attributes[key], fileClass);
      }));
    }
    const result = yield plugin.app.vault.read(file);
    result.split("\n").map((line) => __async(this, null, function* () {
      const lineFields = getLineFields(line);
      lineFields.forEach((_0) => __async(this, [_0], function* ({ attribute, values }) {
        const fieldName = attribute.trim();
        const fieldInfo = new FieldInfo();
        fieldInfo.unique = !Object.keys(fields).includes(fieldName);
        fields[fieldName] = fieldInfo;
        yield fieldInfo.setInfos(plugin, fieldName, values, fileClass);
      }));
    }));
    return fields;
  });
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      insertValues: this.insertValues(),
      fieldModifier: this.fieldModifier(),
      fileFields: this.fileFields()
    };
  }
  getValues() {
    return (fileOrFilePath, attribute) => __async(this, null, function* () {
      return getValues(this.plugin.app, fileOrFilePath, attribute);
    });
  }
  replaceValues() {
    return (fileOrFilePath, attribute, input) => __async(this, null, function* () {
      return replaceValues(this.plugin.app, fileOrFilePath, attribute, input);
    });
  }
  insertValues() {
    return (fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, top2) => __async(this, null, function* () {
      return insertValues(this.plugin.app, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, top2);
    });
  }
  fieldModifier() {
    return (dv, p, fieldName, attrs) => fieldModifier(this.plugin, dv, p, fieldName, attrs);
  }
  fileFields() {
    return (fileOrFilePath) => __async(this, null, function* () {
      return fileFields(this.plugin, fileOrFilePath);
    });
  }
};

// src/options/linkContextMenu.ts
var import_obsidian35 = require("obsidian");

// src/fileClass/FileClassAttributeSelectModal.ts
var import_obsidian32 = require("obsidian");

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian31 = require("obsidian");
var FileClassAttributeModal = class extends import_obsidian31.Modal {
  constructor(plugin, fileClass, attr) {
    super(plugin.app);
    this.plugin = plugin;
    this.attr = attr;
    this.fileClass = fileClass;
    this.initialField = new Field_default();
    if (this.attr) {
      this.field = attr.getField();
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      this.field = new Field_default();
    }
    this.fieldManager = new FieldManager[this.field.type](this.field);
    this.nameInputContainer = this.contentEl.createDiv();
    this.typeSelectContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    this.fieldOptionsContainer = this.contentEl.createDiv();
  }
  buildNameInputContainer() {
    this.nameInputContainer.setText("Name: ");
    this.nameInput = new import_obsidian31.TextComponent(this.nameInputContainer);
    this.attr ? this.nameInput.setValue(this.field.name) : this.nameInput.setPlaceholder("Type a name for this attribute");
    this.nameInput.onChange((value) => {
      this.field.name = value;
      this.attrName.setText(`<${value}>`);
    });
    this.typeSelectContainer.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  buildTypeSelectContainer() {
    const typeSelectHeader = this.typeSelectContainer.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    this.attrName = attrLine.createEl("strong");
    this.attrName.setText(`<${this.field.name}>`);
    attrLine.append(" fields in files with:");
    String(`---
${this.plugin.settings.fileClassAlias}: ${this.fileClass.name}
...
---`).split("\n").forEach((line) => {
      typeSelectHeader.createEl("div", "yaml-metadata-menu-red").setText(line);
    });
    const typeSelectLabel = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label" });
    typeSelectLabel.setText("will: ");
    const typeSelectDropDown = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-toggler" });
    const typeSelect = new import_obsidian31.DropdownComponent(typeSelectDropDown);
    Object.keys(FieldTypeTooltip).forEach((key) => typeSelect.addOption(key, FieldTypeTooltip[key]));
    typeSelect.setValue(this.field.type);
    typeSelect.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.nameInput.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.nameInput, this.nameInput.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveBtn(container) {
    const saveButton = new import_obsidian31.ButtonComponent(container);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => {
      let error = !this.validateFields();
      if (error) {
        new import_obsidian31.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.fileClass.updateAttribute(this.field.type, this.field.name, this.field.options, this.attr);
      this.close();
    });
  }
  createRemovelBtn(container) {
    const removeButton = new import_obsidian31.ButtonComponent(container);
    removeButton.setIcon("trash");
    removeButton.onClick(() => {
      var _a;
      const confirmModal = new import_obsidian31.Modal(this.plugin.app);
      confirmModal.titleEl.setText("Please confirm");
      confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
      const confirmFooter = confirmModal.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const confirmButton = new import_obsidian31.ButtonComponent(confirmFooter);
      confirmButton.setIcon("checkmark");
      confirmButton.onClick(() => {
        if (this.attr)
          this.fileClass.removeAttribute(this.attr);
        confirmModal.close();
        this.close();
      });
      const dismissButton = new import_obsidian31.ExtraButtonComponent(confirmFooter);
      dismissButton.setIcon("cross");
      dismissButton.onClick(() => this.close());
      confirmModal.open();
    });
  }
  createCancelBtn(container) {
    const cancelButton = new import_obsidian31.ExtraButtonComponent(container);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
  onOpen() {
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    this.buildNameInputContainer();
    this.buildTypeSelectContainer();
    this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    this.createSaveBtn(footer);
    if (this.attr)
      this.createRemovelBtn(footer);
    this.createCancelBtn(footer);
  }
};

// src/fileClass/FileClassAttributeSelectModal.ts
var FileClassAttributeSelectModal = class extends import_obsidian32.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to update`);
      const fileClass = yield createFileClass(this.plugin, this.file.basename, true);
      this.titleEl.setText(`Select the field to update in ${fileClass.name}`);
      const selectContainer = this.contentEl.createDiv();
      const select = new import_obsidian32.DropdownComponent(selectContainer);
      select.addOption("select an attribute", "--select an attribute--");
      fileClass.attributes.forEach((attr) => {
        select.addOption(attr.name, attr.name);
      });
      select.addOption("++newAttr++", "++Add a new attribute++");
      select.onChange((attrName) => {
        if (attrName == "++newAttr") {
          const modal = new FileClassAttributeModal(this.plugin, fileClass);
          modal.open();
          this.close();
        } else {
          const modal = new FileClassAttributeModal(this.plugin, fileClass, fileClass.attributes.filter((attr) => attr.name == attrName)[0]);
          modal.open();
          this.close();
        }
      });
    });
  }
};

// src/options/OptionsList.ts
function isMenu(category) {
  return category.addItem !== void 0;
}
function isSelect(category) {
  return category.modals !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, category) {
    this.file = file;
    this.plugin = plugin;
    this.category = category;
    this.attributes = {};
    this.fileClassFields = [];
    this.fileClassForFields = false;
  }
  fetchFrontmatterFields() {
    return __async(this, null, function* () {
      var _a;
      const frontmatter = (_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter;
      if (frontmatter) {
        const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
        Object.keys(attributes).forEach((key) => {
          if (!this.plugin.settings.globallyIgnoredFields.includes(key)) {
            this.attributes[key] = attributes[key];
          }
          ;
        });
        const fileClassAlias = this.plugin.settings.fileClassAlias;
        if (Object.keys(this.attributes).includes(fileClassAlias) || this.plugin.settings.globalFileClass) {
          const fileClass = this.attributes[fileClassAlias] || this.plugin.settings.globalFileClass;
          try {
            const _fileClass = yield createFileClass(this.plugin, fileClass);
            this.fileClass = _fileClass;
            this.fileClassFields = _fileClass.attributes.map((attr) => attr.name);
            this.fileClassForFields = true;
            Object.keys(attributes).forEach((key) => {
              if (!this.fileClassFields.includes(key) && key != fileClassAlias) {
                delete this.attributes[key];
              }
              ;
            });
          } catch (error) {
          }
        }
      }
    });
  }
  fetchInlineFields() {
    return __async(this, null, function* () {
      const result = yield this.plugin.app.vault.read(this.file);
      result.split("\n").map((line) => {
        const lineFields = getLineFields(line);
        lineFields.forEach(({ attribute, values }) => {
          if (attribute && !this.plugin.settings.globallyIgnoredFields.includes(attribute.trim())) {
            if (this.fileClassForFields) {
              if (this.fileClassFields.includes(attribute.trim())) {
                this.attributes[attribute.trim()] = values ? values.trim() : "";
              }
              ;
            } else {
              this.attributes[attribute.trim()] = values ? values.trim() : "";
            }
            ;
          }
          ;
        });
      });
    });
  }
  createExtraOptionList() {
    return __async(this, null, function* () {
      yield this.fetchFrontmatterFields();
      yield this.fetchInlineFields();
      if (this.fileClass) {
        const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, this.fileClass.getClassFile());
        if (isMenu(this.category)) {
          this.category.addSeparator();
          this.category.addItem((item) => {
            item.setIcon("gear");
            item.setTitle(`Manage <${this.fileClass.name}> fields`);
            item.onClick(() => fileClassAttributeSelectModal.open());
          });
        } else {
          this.category.addOption("manage_fileClass_attributes", `Manage <${this.fileClass.name}> fields`);
          this.category.modals["manage_fileClass_attributes"] = () => fileClassAttributeSelectModal.open();
        }
        ;
      }
      if (isMenu(this.category)) {
        this.category.addSeparator();
      }
      ;
      this.buildFieldOptions();
      this.addSectionSelectModalOption();
    });
  }
  buildFieldOptions() {
    Object.keys(this.attributes).forEach((key) => {
      const value = this.attributes[key];
      const field = getField(this.plugin, key, this.fileClass);
      if (field) {
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.addMenuOption(key, value, this.plugin.app, this.file, this.category);
      } else {
        const defaultField = new Field_default(key);
        defaultField.type = "Input" /* Input */;
        const fieldManager = new Managers_default.Input(defaultField);
        fieldManager.addMenuOption(key, value, this.plugin.app, this.file, this.category);
      }
    });
  }
  addSectionSelectModalOption() {
    const modal = new chooseSectionModal(this.plugin, this.file, this.fileClass);
    if (isMenu(this.category)) {
      this.category.addItem((item) => {
        item.setIcon("pencil");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("target-metadata");
      });
    } else if (isSelect(this.category)) {
      this.category.addOption("add_field_at_section", "Add field at section...");
      this.category.modals["add_field_at_section"] = () => modal.open();
    }
    ;
  }
};

// src/options/NoteFieldsCommandsModal.ts
var import_obsidian34 = require("obsidian");

// src/optionModals/SelectModal.ts
var import_obsidian33 = require("obsidian");
var SelectModal = class extends import_obsidian33.DropdownComponent {
  constructor(containerEl) {
    super(containerEl);
    this.modals = {};
  }
};

// src/options/NoteFieldsCommandsModal.ts
var NoteFieldsCommandsModal = class extends import_obsidian34.Modal {
  constructor(app2, plugin, file) {
    super(app2);
    this.app = app2;
    this.plugin = plugin;
    this.file = file;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.titleEl.setText(`Select the field to manage`);
      this.containerEl.addClass("metadata-menu");
      const optionsListContainer = this.contentEl.createDiv({ cls: "field-options" });
      this.select = new SelectModal(optionsListContainer);
      this.select.addOption("---", "Choose Field");
      this.optionsList = new OptionsList(this.plugin, this.file, this.select);
      yield this.optionsList.createExtraOptionList();
      this.select.onChange((value) => {
        this.select.modals[value]();
        this.close();
      });
      this.select.selectEl.focus();
    });
  }
};

// src/options/linkContextMenu.ts
var linkContextMenu = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.createContextMenu();
  }
  createContextMenu() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
      if (file instanceof import_obsidian35.TFile && file.extension === "md") {
        this.file = file;
        if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
          menu.addSeparator();
          menu.addItem((item) => {
            item.setIcon("gear");
            item.setTitle(`Manage <${file.basename}> fields`);
            item.onClick((evt) => {
              const fileClassAttributeSelectModal = new FileClassAttributeSelectModal(this.plugin, file);
              fileClassAttributeSelectModal.open();
            });
          });
        } else {
          if (this.plugin.settings.displayFieldsInContextMenu) {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            this.optionsList.createExtraOptionList();
          } else {
            this.optionsList = new OptionsList(this.plugin, this.file, menu);
            menu.addItem((item) => {
              item.setIcon("bullet-list"), item.setTitle(`Field Options`), item.onClick((evt) => {
                const fieldOptions = new NoteFieldsCommandsModal(app, this.plugin, file);
                fieldOptions.open();
              });
              item.setSection("target-metadata");
            });
          }
        }
        ;
      }
      ;
    }));
  }
};

// src/suggester/metadataSuggester.ts
var import_obsidian36 = require("obsidian");
var ValueSuggest = class extends import_obsidian36.EditorSuggest {
  constructor(app2, plugin) {
    super(app2);
    this.inFrontmatter = false;
    this.inFullLine = false;
    this.inSentence = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(encodeLink(option))) && (!lastValue || !!lastValue && encodeLink(option).contains(lastValue));
    };
    this.app = app2;
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    const frontmatter = this.plugin.app.metadataCache.getFileCache(file).frontmatter;
    const fullLine = editor.getLine(editor.getCursor().line);
    this.inFrontmatter = frontmatter !== void 0 && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    if (this.inFrontmatter) {
      const regex = new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u");
      if (!regex.test(fullLine))
        return null;
    } else if (getLineFields(fullLine).length === 0) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a;
      const lineNumber = context.start.line;
      const matchField = { attribute: void 0, values: "" };
      if (!this.inFrontmatter) {
        const lineFields = getLineFields(encodeLink(context.editor.getLine(lineNumber)));
        const position = context.editor.getCursor().ch;
        const activeLineField = lineFields.find((lineField) => lineField.index <= position && lineField.index + lineField.length >= position);
        if (activeLineField) {
          this.inSentence = activeLineField.index > 0;
          this.inFullLine = activeLineField.index === 0;
          matchField.attribute = activeLineField.attribute;
          matchField.values = activeLineField.values;
        }
      } else {
        const regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
        const regexResult = context.editor.getRange({ line: lineNumber, ch: 0 }, context.end).match(regex);
        if (regexResult == null ? void 0 : regexResult.groups) {
          matchField.attribute = regexResult.groups.attribute;
          matchField.values = regexResult.groups.values;
        }
      }
      ;
      if (matchField.attribute) {
        const fieldName = matchField.attribute;
        const valuesList = (_a = matchField.values) == null ? void 0 : _a.replace(/^\[|^\s\[|^\(|^\s\(/, "").replace(/\]$|\)$/, "").split(",").map((o) => encodeLink(o.trim()));
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        const cache = this.plugin.app.metadataCache.getCache(context.file.path);
        let tryWithPresetField = !(cache == null ? void 0 : cache.frontmatter);
        if (cache == null ? void 0 : cache.frontmatter) {
          const _b = cache.frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
          const fileClassAlias = this.plugin.settings.fileClassAlias;
          if (Object.keys(attributes).contains(fileClassAlias)) {
            const fileClassValue = attributes[fileClassAlias];
            try {
              const fileClass = yield createFileClass(this.plugin, fileClassValue);
              this.fileClass = fileClass;
              const fileClassAttributes = this.fileClass.attributes;
              if (fileClassAttributes.map((attr) => attr.name).contains(fieldName)) {
                const field = fileClassAttributes.find((attr) => attr.name == fieldName).getField();
                if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(field.type)) {
                  const filteredOptions = Array.isArray(field.options) ? field.options.filter((option) => this.filterOption(firstValues, lastValue, option)) : Object.keys(field.options).map((k) => field.options[k]).filter((option) => this.filterOption(firstValues, lastValue, option));
                  return filteredOptions.map((option) => Object({ value: option }));
                } else if (field.type === "File" /* File */) {
                  const fieldManager = new FieldManager[field.type](field);
                  const files = fieldManager.getFiles();
                  if (lastValue) {
                    return files.filter((f) => f.basename.includes(lastValue)).map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
                  } else {
                    return files.map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
                  }
                } else {
                  return [];
                }
              }
            } catch (error) {
              tryWithPresetField = true;
            }
            ;
          } else {
            tryWithPresetField = true;
          }
          ;
        }
        ;
        if (tryWithPresetField) {
          const presetField = this.plugin.settings.presetFields.find((field) => field.name == fieldName);
          if (presetField) {
            if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(presetField.type)) {
              if (presetField.valuesListNotePath) {
                const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.valuesListNotePath);
                if (valuesFile instanceof import_obsidian36.TFile && valuesFile.extension == "md") {
                  const values2 = yield (yield this.plugin.app.vault.read(valuesFile)).split("\n").filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
                  return values2;
                }
                ;
              }
              ;
              const values = Object.entries(presetField.options).map((option) => option[1]).filter((option) => this.filterOption(firstValues, lastValue, option));
              return values.map((_value) => Object({ value: _value }));
            } else if (presetField.type === "File" /* File */) {
              const fieldManager = new FieldManager[presetField.type](presetField);
              const files = fieldManager.getFiles();
              if (lastValue) {
                return files.filter((f) => f.basename.includes(lastValue)).map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
              } else {
                return files.map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
              }
            } else {
              return [];
            }
          }
          ;
        }
        ;
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.value);
  }
  selectSuggestion(suggestion, event) {
    var _a;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian36.MarkdownView);
    if (!activeView) {
      return;
    }
    ;
    const editor = activeView.editor;
    const activeLine = editor.getLine(this.context.start.line);
    if (this.inFrontmatter) {
      try {
        let parsedField = (0, import_obsidian36.parseYaml)(activeLine);
        let [attr, pastValues] = Object.entries(parsedField)[0];
        let newField;
        if (!pastValues) {
          newField = attr + ": " + suggestion.value;
        } else if (typeof pastValues == "string") {
          if (!pastValues.contains(",")) {
            newField = attr + ": " + suggestion.value;
          } else {
            newField = attr + ": [" + pastValues.split(",").map((o) => o.trim()).slice(0, -1).join(", ") + ", " + suggestion.value + "]";
          }
        } else if (Array.isArray(pastValues)) {
          if (activeLine.endsWith(",]") || activeLine.endsWith(", ]")) {
            newField = attr + ": [" + [...pastValues, suggestion.value].join(", ") + "]";
          } else {
            newField = attr + ": [" + [...pastValues.slice(0, -1), suggestion.value].join(", ") + "]";
          }
        } else {
          newField = attr + ": [" + [...pastValues].join(", ") + "]";
        }
        editor.replaceRange(newField, { line: this.context.start.line, ch: 0 }, { line: this.context.start.line, ch: activeLine.length });
        if (Array.isArray(pastValues) || typeof pastValues === "string" && pastValues.contains(",")) {
          editor.setCursor({ line: this.context.start.line, ch: newField.length - 1 });
        } else {
          editor.setCursor({ line: this.context.start.line, ch: newField.length });
        }
      } catch (error) {
        new import_obsidian36.Notice("Frontmatter wrongly formatted", 2e3);
        this.close();
        return;
      }
    } else if (this.inFullLine) {
      let cleanedLine = activeLine;
      while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
        cleanedLine = cleanedLine.slice(0, -1);
      }
      editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
    } else if (this.inSentence) {
      const position = ((_a = this.context) == null ? void 0 : _a.editor.getCursor().ch) || 0;
      let beforeCursor = activeLine.slice(0, position);
      let afterCursor = activeLine.slice(position);
      let separatorPos = position;
      let currentValueLength = 0;
      while (!beforeCursor.endsWith("::") && !beforeCursor.endsWith(",") && beforeCursor.length) {
        separatorPos = separatorPos - 1;
        currentValueLength = currentValueLength + 1;
        beforeCursor = beforeCursor.slice(0, -1);
      }
      let nextBracketPos = position;
      while (!encodeLink(afterCursor).match("(\\]|\\)).*") && afterCursor.length) {
        nextBracketPos = nextBracketPos + 1;
        afterCursor = afterCursor.slice(nextBracketPos - position);
      }
      editor.replaceRange(suggestion.value, { line: this.context.start.line, ch: separatorPos }, { line: this.context.start.line, ch: nextBracketPos });
      editor.setCursor({ line: this.context.start.line, ch: nextBracketPos - currentValueLength + suggestion.value.length });
    }
    this.didSelect = true;
    this.close();
  }
};

// src/settings/migrateSettingV1toV2.ts
var migrateSettingsV1toV2 = (plugin) => __async(void 0, null, function* () {
  const presetFields = plugin.settings.presetFields;
  presetFields.forEach((p) => {
    if (!Object.keys(p).contains("type")) {
      if (p.isMulti)
        p.type = "Multi" /* Multi */;
      else if (p.isCycle)
        p.type = "Cycle" /* Cycle */;
      else if (p.isBoolean)
        p.type = "Boolean" /* Boolean */;
      else if (p.options && Object.keys(p.options).length > 0)
        p.type = "Select" /* Select */;
      else
        p.type = "Input" /* Input */;
    }
    delete p.isMulti;
    delete p.isCycle;
    delete p.isBoolean;
    if (Object.getOwnPropertyDescriptor(p, "values") !== void 0) {
      Object.defineProperty(p, "options", Object.getOwnPropertyDescriptor(p, "values"));
      delete p["values"];
    }
  });
  plugin.settings.settingsVersion = 2;
  yield plugin.saveData(plugin.settings);
  console.log("Metadata menu settings migrated");
});

// main.ts
var MetadataMenu = class extends import_obsidian37.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      if (this.settings.settingsVersion === void 0) {
        yield migrateSettingsV1toV2(this);
      }
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this.app, this));
      this.registerEditorSuggest(new ValueSuggest(this.app, this));
      this.api = new MetadataMenuApi(this).make();
      this.addCommand({
        id: "field_options",
        name: "field options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian37.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file);
          }
          const fieldsOptionsModal = new NoteFieldsCommandsModal(this.app, this, view.file);
          fieldsOptionsModal.open();
        }
      });
      this.addCommand({
        id: "fileClassAttr_options",
        name: "fileClass attributes options",
        checkCallback: (checking) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian37.MarkdownView);
          if (checking) {
            return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
          }
          const modal = new FileClassAttributeSelectModal(this, view.file);
          modal.open();
        }
      });
      new linkContextMenu(this);
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
