/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI3 = (app) => {
      var _a;
      if (app)
        return (_a = app.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window.DataviewAPI;
    };
    var isPluginEnabled = (app) => app.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI3;
    exports.isPluginEnabled = isPluginEnabled;
  }
});

// main.ts
__export(exports, {
  default: () => FileCookerPlugin
});
var import_obsidian12 = __toModule(require("obsidian"));

// src/modal/move-modal.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/action/move-action.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/modal/confirm-modal.ts
var import_obsidian = __toModule(require("obsidian"));
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, moveInfos) {
    super(app);
    this.moveInfos = moveInfos;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Confirm Move?" });
    this.moveInfos.forEach((info) => {
      contentEl.createEl("div", { text: info.sourceFile.path + " -> " + info.targetDir + "/" + info.sourceFile.name });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
      this.close();
      for (const key in this.moveInfos) {
        let info = this.moveInfos[key];
        yield this.app.fileManager.renameFile(info.sourceFile, info.targetDir + "/" + info.sourceFile.name);
      }
      new import_obsidian.Notice("Move Success!");
    }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
      this.close();
      new import_obsidian.Notice("Move Canceled!");
    }));
  }
};

// src/action/move-action.ts
var MoveAction = class {
  constructor(app, targetPath) {
    this.app = app;
    this.targetPath = targetPath;
  }
  act(resultArr) {
    const moveInfos = [];
    if (resultArr.length > 0) {
      resultArr.forEach((ff) => {
        moveInfos.push({
          sourceFile: ff,
          targetDir: this.targetPath
        });
      });
      new ConfirmModal(this.app, moveInfos).open();
    } else {
      new import_obsidian2.Notice("No Files Found!");
    }
  }
};

// src/modal/move-modal.ts
var MoveModal = class extends import_obsidian3.SuggestModal {
  constructor(app, readable) {
    super(app);
    this.readable = readable;
  }
  getSuggestions(query) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = query.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian3.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(folder, el) {
    el.createEl("div", { text: folder.path });
  }
  onChooseSuggestion(folder, evt) {
    let action = new MoveAction(this.app, folder.path);
    this.readable.read(action);
  }
};

// src/reader/clipboard-reader.ts
var import_obsidian4 = __toModule(require("obsidian"));

// src/reader/read-info.ts
var ReadInfo = class {
  constructor(limit = 300) {
    this.limit = limit;
    this.resultArr = [];
  }
  add(file) {
    if (this.resultArr.length >= this.limit) {
      throw new Error("Load more than " + this.limit + " files!");
    }
    this.resultArr.push(file);
  }
  getFiles() {
    return this.resultArr;
  }
};

// src/reader/clipboard-reader.ts
var ClipboardReader = class {
  constructor(app) {
    this.app = app;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let promiseStr = navigator.clipboard.readText();
    promiseStr.then((str) => {
      let lines = str.split("\n");
      try {
        lines.forEach((line) => {
          let f = line;
          if (f.startsWith("[[")) {
            f = f.substring(2, f.length);
          }
          if (f.endsWith("]]")) {
            f = f.substring(0, f.length - 2);
          }
          if (!f.endsWith(".md") && !f.endsWith(".MD") && !f.endsWith(".Md") && !f.endsWith(".mD")) {
            f = f + ".md";
          }
          let ff = this.app.vault.getAbstractFileByPath(f);
          if (ff != null) {
            readInfo.add(ff);
          }
        });
        action.act(readInfo.getFiles());
      } catch (e) {
        new import_obsidian4.Notice(e.message);
      }
    }).catch((e) => {
      new import_obsidian4.Notice("Clipboard Content Error!" + e);
    });
  }
};

// src/action/delete-action.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/modal/delete-confirm-modal.ts
var import_obsidian5 = __toModule(require("obsidian"));
var DeleteConfirmModal = class extends import_obsidian5.Modal {
  constructor(app, resultArr) {
    super(app);
    this.resultArr = resultArr;
  }
  onOpen() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.createEl("h1", { text: "Confirm Delete?" });
      if (this.resultArr.length == 0) {
        contentEl.createEl("div", { text: "No files found!" });
        new import_obsidian5.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
          this.close();
        }));
      } else {
        this.resultArr.forEach((info) => {
          contentEl.createEl("div", { text: info.path });
        });
        new import_obsidian5.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => {
          this.close();
          this.resultArr.forEach((info) => {
            this.app.vault.trash(info, true);
          });
          new import_obsidian5.Notice("Delete Success!");
        })).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
          this.close();
          new import_obsidian5.Notice("Delete Canceled!");
        }));
      }
    });
  }
};

// src/action/delete-action.ts
var DeleteAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      new DeleteConfirmModal(this.app, resultArr).open();
    } else {
      new import_obsidian6.Notice("No Files Found!");
    }
  }
};

// src/reader/current-file-reader.ts
var import_obsidian7 = __toModule(require("obsidian"));
var CurrentFileReader = class {
  constructor(app) {
    this.app = app;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let currentFile = this.app.workspace.getActiveFile();
    if (currentFile == null) {
      new import_obsidian7.Notice("No active file!");
      return;
    }
    let currentFilePath = currentFile.path;
    let linkObj = this.app.metadataCache.resolvedLinks[currentFilePath];
    try {
      for (let key in linkObj) {
        let ff = this.app.vault.getAbstractFileByPath(key);
        if (ff != null) {
          readInfo.add(ff);
        }
      }
      action.act(readInfo.getFiles());
    } catch (e) {
      new import_obsidian7.Notice(e.message);
    }
  }
};

// src/reader/dataview-reader.ts
var import_obsidian8 = __toModule(require("obsidian"));
var import_obsidian_dataview = __toModule(require_lib());
var DataviewReader = class {
  constructor(app, queryStr) {
    this.app = app;
    this.queryStr = queryStr;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let api = (0, import_obsidian_dataview.getAPI)();
    let qStr = formatStr(this.queryStr);
    api.query(qStr).then((res) => {
      if (res.successful) {
        let filePaths = [];
        if (res.value.type == "list") {
          res.value.values.forEach((it) => {
            filePaths.push(it.path);
          });
        } else if (res.value.type == "table") {
          filePaths = res.value.values;
          res.value.values.forEach((it) => {
            it.forEach((innerIt) => {
              if (innerIt && innerIt.path) {
                filePaths.push(innerIt.path);
                return;
              }
            });
          });
        } else {
          res.value.values.forEach((it) => {
            filePaths.push(it.link.path);
          });
        }
        try {
          filePaths.forEach((filePath) => {
            let ff = this.app.vault.getAbstractFileByPath(filePath.toString());
            if (ff != null) {
              readInfo.add(ff);
            }
          });
          action.act(readInfo.getFiles());
        } catch (e) {
          new import_obsidian8.Notice(e.message);
        }
      } else {
        new import_obsidian8.Notice("Query string error![" + this.queryStr + "]");
      }
    });
  }
};
function formatStr(queryStr) {
  let str = queryStr.trimStart();
  let commandStr = str.substring(0, 4);
  if (commandStr.toUpperCase() == "LIST") {
    return "LIST" + str.substring(4, str.length);
  }
  if (commandStr.toUpperCase() == "TABL") {
    return "TABLE" + str.substring(5, str.length);
  }
  if (commandStr.toUpperCase() == "TASK") {
    return "TASK" + str.substring(4, str.length);
  }
  return queryStr;
}

// src/action/copy-action.ts
var import_obsidian9 = __toModule(require("obsidian"));
var CopyAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      let str = "";
      resultArr.forEach((ff) => {
        let name = ff.name;
        if (name.endsWith(".md")) {
          name = name.substring(0, name.lastIndexOf("."));
        }
        str += "[[" + ff.path + "|" + name + "]]\n";
      });
      navigator.clipboard.writeText(str);
      new import_obsidian9.Notice("Copy links success!");
    } else {
      new import_obsidian9.Notice("No Files Found!");
    }
  }
};

// main.ts
var import_obsidian_dataview2 = __toModule(require_lib());

// src/action/edit-front-matter-action.ts
var import_obsidian11 = __toModule(require("obsidian"));

// src/modal/edit-front-matter-modal.ts
var import_obsidian10 = __toModule(require("obsidian"));
var EditFrontMatterModal = class extends import_obsidian10.Modal {
  constructor(app, resultArr) {
    super(app);
    this.resultArr = resultArr;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Edit Front Matter" });
    if (this.resultArr.length == 0) {
      contentEl.createEl("div", { text: "No files found!" });
      new import_obsidian10.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
        this.close();
      }));
    } else {
      this.resultArr.forEach((info) => {
        contentEl.createEl("div", { text: info.path });
      });
      new import_obsidian10.Setting(contentEl).addText((txt) => txt.setPlaceholder("Front Matter Key").onChange((val) => {
        this.key = val;
      })).addText((txt) => txt.setPlaceholder("Front Matter Value").onChange((val) => {
        this.val = val;
      })).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => {
        this.close();
        let api = this.app.plugins.plugins["metaedit"].api;
        this.resultArr.forEach((info) => __async(this, null, function* () {
          let val = yield api.getPropertyValue(this.key, info);
          if (val == null) {
            api.createYamlProperty(this.key, this.val, info);
          } else {
            api.update(this.key, this.val, info);
          }
        }));
        new import_obsidian10.Notice("Edit Success!");
      })).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
        this.close();
        new import_obsidian10.Notice("Edit Canceled!");
      }));
    }
  }
};

// src/action/edit-front-matter-action.ts
var EditFrontMatterAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      new EditFrontMatterModal(this.app, resultArr).open();
    } else {
      new import_obsidian11.Notice("No Files Found!");
    }
  }
};

// main.ts
var FileCookerPlugin = class extends import_obsidian12.Plugin {
  onload() {
    return __async(this, null, function* () {
      let dataviewApi = (0, import_obsidian_dataview2.getAPI)();
      this.addCommand({
        id: "move-files-to",
        name: "Move files to ...",
        callback: () => {
          new MoveModal(this.app, new ClipboardReader(this.app)).open();
        }
      });
      this.addCommand({
        id: "move-links-to",
        name: "Move links in current file to ...",
        callback: () => {
          new MoveModal(this.app, new CurrentFileReader(this.app)).open();
        }
      });
      this.addCommand({
        id: "move-dataview-results-to",
        name: "Move dataview query results to ...",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new MoveModal(this.app, new DataviewReader(this.app, editor.getSelection())).open();
          }
          return dataviewApi != null;
        }
      });
      this.addCommand({
        id: "delete-files-in-clipboard",
        name: "Delete files in clipboard!",
        callback: () => {
          new ClipboardReader(this.app).read(new DeleteAction(this.app));
        }
      });
      this.addCommand({
        id: "delete-links-in-current-file",
        name: "Delete link-files in current file!",
        callback: () => {
          new CurrentFileReader(this.app).read(new DeleteAction(this.app));
        }
      });
      this.addCommand({
        id: "delete-dataview-results",
        name: "Delete dataview query results!",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new DataviewReader(this.app, editor.getSelection()).read(new DeleteAction(this.app));
          }
          return dataviewApi != null;
        }
      });
      this.addCommand({
        id: "copy-dataview-result-links",
        name: "Copy dataview result links!",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new DataviewReader(this.app, editor.getSelection()).read(new CopyAction(this.app));
          }
          return dataviewApi != null;
        }
      });
      let metaedit = this.app.plugins.plugins["metaedit"];
      this.addCommand({
        id: "edit-front-matter-in-clipboard-files",
        name: "Edit Front Matter in clipboard files ...",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new ClipboardReader(this.app).read(new EditFrontMatterAction(this.app));
          }
          return dataviewApi != null && metaedit != null;
        }
      });
      this.addCommand({
        id: "edit-front-matter-in-current-file-links",
        name: "Edit Front Matter in current file links ... ...",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new CurrentFileReader(this.app).read(new EditFrontMatterAction(this.app));
          }
          return dataviewApi != null && metaedit != null;
        }
      });
      this.addCommand({
        id: "edit-front-matter-in-dataview-results",
        name: "Edit Front Matter in dataview results ...",
        editorCheckCallback: (checking, editor, view) => {
          if (!checking) {
            new DataviewReader(this.app, editor.getSelection()).read(new EditFrontMatterAction(this.app));
          }
          return dataviewApi != null && metaedit != null;
        }
      });
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
